<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>aixloh&#39;Blog</title>
  
  <subtitle>javac Zero-error.java</subtitle>
  <link href="https://bugdev.tk/feed.xml" rel="self"/>
  <link href="https://bugdev.tk/" rel="hub"/>
  <link href="https://bugdev.tk/"/>
  <updated>2024-06-11T06:43:35.134Z</updated>
  <id>https://bugdev.tk/</id>
  
  <author>
    <name>aixloh</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Zabbix部署</title>
    <link href="https://bugdev.tk/post/9021/"/>
    <id>https://bugdev.tk/post/9021/</id>
    <published>2024-05-03T08:48:00.000Z</published>
    <updated>2024-06-11T06:43:35.134Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Zabbix-介绍"><a href="#Zabbix-介绍" class="headerlink" title="Zabbix 介绍"></a><strong>Zabbix 介绍</strong></h1><p>zabbix是由Alexei Vladishev开发的一种网络监视，管理系统，基于Server-Client架构，可用于监视各种网络服务，服务器和网络机器等状态</p><p>使用各种Database-eNd 如 MYSQL PostgreSQL，SQLite，Oracle或IBM DB2储存资料。Server端基于C语言：web管理端frontend是基于PHP所制作的</p><p>Zabblx可以使用多种方式监视，可以只使用simple check不需要安装client端，亦可是于SMTP或<br>HTTP，各种协议定制监视</p><p>​    客户端如UNIX，windows中安装Zabbix Agent之后，可监视CPU Load，网络使用状况，硬盘容量<br>等各种状态。而就算没有安装Agent在监视对象中，zabbix也可以经由SNMP、TCP，ICMP，利用I<br>PMI，SSH，telent对自标进行监视</p><p>zabbix自带的ltem足够满足普通小公司的监控需求，对于大公司也可以设定自定义的Item，自动生成报表，也有API可以和其他系统集成</p><p><strong>附一下zabbix的<a href="https://www.zabbix.com/documentation/current/zh/manual">官方中文文档</a></strong></p><h1 id="功能组件"><a href="#功能组件" class="headerlink" title="功能组件"></a>功能组件</h1><ul><li><h5 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h5><ul><li>Zabbix server是 Zabbix agent 向其报告可用性、系统完整性信息和统计信息的核心组件。是存储所有配置信息、统计信息和操作信息的核心存储库。</li></ul></li><li><h5 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h5><ul><li>所有配置信息以及 Zabbix 收集到的数据都被存储在数据库中。</li></ul></li><li><h5 id="Web-界面"><a href="#Web-界面" class="headerlink" title="Web 界面"></a>Web 界面</h5><ul><li>为了从任何地方和任何平台轻松访问 Zabbix ，我们提供了基于 web 的界面。该界面是 Zabbix server 的一部分，通常（但不一定）和 Zabbix server 运行在同一台物理机器上。</li></ul></li><li><h5 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h5><ul><li>可以替 Zabbix server 收集性能和可用性数据。Zabbix proxy 是 Zabbix 环境部署的可选部分；然而，它对于单个 Zabbix server 负载的分担是非常有益的</li></ul></li><li><h5 id="Agent"><a href="#Agent" class="headerlink" title="Agent"></a>Agent</h5><ul><li>部署在被监控目标上，用于主动监控本地资源和应用程序，并将收集的数据发送给 Zabbix server。</li></ul></li><li><h4 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h4><ul><li>此外，重要的是，需要回过头来了解下 Zabbix 内部的整体数据流。首先，为了创建一个采集数据的监控项，您就必须先创建主机。其次，必须有一个监控项来创建触发器。最后，您必须有一个触发器来创建一个动作，这几个点构成了一个完整的数据流。因此，如果您想要收到 CPU load it too high on <em>Server X</em> 的告警，您必须首先为 //Server X // 创建一个主机条目，其次创建一个用于监视其 CPU 的监控项，最后创建一个触发器，用来触发 CPU is too high 这个动作，并将其发送到您的邮箱里。虽然这些步骤看起来很繁琐，但是使用模板的话，其实并不复杂。也正是由于这种设计，使得 Zabbix 的配置变得更加灵活易用</li></ul></li></ul><h1 id="关联术语"><a href="#关联术语" class="headerlink" title="关联术语"></a>关联术语</h1><p>***<a href="https://www.zabbix.com/documentation/current/zh/manual/config/hosts">主机（host）</a>***</p><p>- <em>你想要监控的联网设备，有IP/DNS。</em></p><p>***<a href="https://www.zabbix.com/documentation/current/zh/manual/config/hosts">主机组（host group)</a>***</p><p>- <em>主机的逻辑组；可能包含主机和模板。一个主机组里的主机和模板之间并没有任何直接的关联。通常在给不同用户组的主机分配权限时候使用主机组。</em></p><p>***<a href="https://www.zabbix.com/documentation/current/zh/manual/config/items">监控项（item）</a>***</p><p>- <em>你想要接收的主机的特定数据，一个度量/指标数据。</em></p><p>***<a href="https://www.zabbix.com/documentation/current/zh/manual/config/items/item#item-value-preprocessing">值预处理（value preprocessing）</a>***</p><p>- <em>转化/预处理接收到的指标数据</em> 存入数据库之前。</p><p>***<a href="https://www.zabbix.com/documentation/current/zh/manual/config/triggers">触发器（trigger）</a>***</p><p>- <em>一个被用于定义问题阈值和“评估”监控项接收到的数据的逻辑表达式</em></p><p>当接收到的数据高于阈值时，触发器从”OK”变成”Problem”状态。当接收到的数据低于阈值时，触发器保留/返回”OK”的状态。</p><p>***<a href="https://www.zabbix.com/documentation/current/zh/manual/config/events">事件（event）</a>***</p><p>- <em>一次发生的需要注意的事情，例如触发器状态改变、发现/监控代理自动注册</em></p><p>***<a href="https://www.zabbix.com/documentation/current/zh/manual/config/triggers/event_tags">事件标签（event tag）</a>***</p><p>- <em>提前设置的事件标记</em>可以被用于事件关联，权限细化设置等。</p><p>***<a href="https://www.zabbix.com/documentation/current/zh/manual/config/event_correlation">事件关联（event correlation）</a>***</p><p>- <em>自动灵活的、精确的关联问题和解决方案</em></p><p>比如说，你可以定义触发器A告警的异常可以由触发器B解决，触发器B可能采用完全不同的数据采集方式。</p><p>***<a href="https://www.zabbix.com/documentation/current/zh/manual/web_interface/frontend_sections/monitoring/problems">异常（problems）</a>*** - <em>一个处在”异常”状态的触发器</em></p><p>***<a href="https://www.zabbix.com/documentation/current/zh/manual/acknowledges#updating-problems">异常更新（problem update）</a>***</p><p>- <em>Zabbix提供的问题管理选项，例如添加评论、确认异常、改变问题级别或者手动关闭等。</em></p><p>***<a href="https://www.zabbix.com/documentation/current/zh/manual/config/notifications/action">动作（action）</a>***</p><p>- <em>预先定义的应对事件的操作</em></p><p>一个动作由操作(例如发出通知)和条件(<em>什么时间</em>进行操作)组成</p><p>***<a href="https://www.zabbix.com/documentation/current/zh/manual/config/notifications/action/escalations">升级（escalation）</a>***</p><p>- <em>一个在动作内执行操作的自定义方式; 发送通知/执行远程命令的顺序安排。</em></p><p>***<a href="https://www.zabbix.com/documentation/current/zh/manual/config/notifications/media">媒介（media）</a>***</p><p>- <em>发送告警通知的方式；传送途径</em></p><p>***<a href="https://www.zabbix.com/documentation/current/zh/manual/config/notifications/action/operation/message">通知（notification）</a>***</p><p>- <em>关于事件的信心，将通过选设定的媒介途径发送给用户。</em></p><p>***<a href="https://www.zabbix.com/documentation/current/zh/manual/config/notifications/action/operation/remote_command">远程命令（remote command）</a>***</p><p>- <em>一个预定义好的，满足特定条件的情况下，可以在被监控主机上自动执行的命令。</em></p><p>***<a href="https://www.zabbix.com/documentation/current/zh/manual/config/templates">模版（template）</a>***</p><p>- <em>一组可以被应用到一个或多个主机上的实体（监控项，触发器，图形，聚合图形，应用，LLD，Web场景）的集合</em></p><p>模版的应用使得主机上的监控任务部署快捷方便；也可以使监控任务的批量修改更加简单。模版是直接关联到每台单独的主机上。</p><p>***<a href="https://www.zabbix.com/documentation/current/zh/manual/config/items/applications">应用（application）</a>***</p><p>- <em>一组监控项组成的逻辑分组</em></p><p>***<a href="https://www.zabbix.com/documentation/current/zh/manual/web_monitoring">Web场景（web scenario）</a>***</p><p>- <em>检查网站可浏览性的一个或多个HTTP请求</em></p><p>***<a href="https://www.zabbix.com/documentation/current/zh/manual/introduction/overview#architecture">前端（frontend)</a>***</p><p>- <em>Zabbix提供的web界面</em></p><p>***<a href="https://www.zabbix.com/documentation/current/zh/manual/api">Zabbix API</a>***</p><p>- <em>Zabbix API允许用户使用JSON RPC协议来创建、更新和获取Zabbix对象（如主机、监控项、图形和其他）信息或者执行任何其他的自定义的任务</em></p><p>***<a href="https://www.zabbix.com/documentation/current/zh/manual/concepts/server">Zabbix server</a>***</p><p>- <em>Zabbix监控的核心程序，主要功能是与Zabbix proxies和Agents进行交互、触发器计算、发送告警通知；并将数据集中保存等</em></p><p>***<a href="https://www.zabbix.com/documentation/current/zh/manual/concepts/agent">Zabbix agent</a>***</p><p>- <em>部署在监控对象上的，能够主动监控本地资源和应用的程序</em></p><p>***<a href="https://www.zabbix.com/documentation/current/zh/manual/concepts/proxy">Zabbix proxy</a>***</p><p>- <em>一个帮助Zabbix Server收集数据，分担Zabbix Server的负载的程序</em></p><p>***<a href="https://www.zabbix.com/documentation/current/zh/manual/encryption">加密（encryption）</a>***</p><p>- <em>支持Zabbix组建之间的加密通讯(server, proxy, agent, zabbix_sender 和 zabbix_get 程序)</em> 使用TLS（Transport Layer Security ）协议。</p><h1 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><a href="https://zhuanlan.zhihu.com/p/110721591">安装VMware tool</a></p><p><a href="https://blog.csdn.net/qq_24342335/article/details/81449270">解决VMware虚拟机中centos 7无法上网的问题</a></p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>关闭防火墙<br>systemctl disable firewalld.service<br><br><span class="hljs-regexp">//</span>安装apache<br>yum install -y httpd<br><br><span class="hljs-regexp">//</span>httpd服务开机进行自启<br>systemctl enable httpd<br><br><span class="hljs-regexp">//</span>启动httpd服务<br>Systemctl start httpd<br><br><span class="hljs-regexp">//</span>安装mysql<br>yum install -y mariadb mariadb-server<br><br><span class="hljs-regexp">//</span>开机自启动<br>systemctl enable mariadb<br><br><span class="hljs-regexp">//</span>运行服务<br>Systemctl start mariadb<br><br><span class="hljs-regexp">//</span>安装php环境<br>yum install -y php php-mysql<br></code></pre></td></tr></table></figure><h2 id="安装zabbix"><a href="#安装zabbix" class="headerlink" title="安装zabbix"></a>安装zabbix</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Power" scheme="https://bugdev.tk/categories/Power/"/>
    
    
    <category term="Ops" scheme="https://bugdev.tk/tags/Ops/"/>
    
  </entry>
  
  <entry>
    <title>linux常用</title>
    <link href="https://bugdev.tk/post/17063/"/>
    <id>https://bugdev.tk/post/17063/</id>
    <published>2024-04-22T17:08:00.000Z</published>
    <updated>2024-06-11T06:18:35.876Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="linux基础"><a href="#linux基础" class="headerlink" title="linux基础"></a>linux基础</h1><h2 id="7个运行级别"><a href="#7个运行级别" class="headerlink" title="7个运行级别"></a>7个运行级别</h2><ul><li>运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动</li><li>运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆</li><li>运行级别2：多用户状态(没有NFS)</li><li>运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式</li><li>运行级别4：系统未使用，保留</li><li>运行级别5：X11控制台，登陆后进入图形GUI模式</li><li>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</li></ul><h2 id="Linux系统的启动过程"><a href="#Linux系统的启动过程" class="headerlink" title="Linux系统的启动过程"></a>Linux系统的启动过程</h2><p>5个阶段：</p><ul><li>内核的引导。</li><li>运行init。</li><li>系统初始化。</li><li>建立终端。</li><li>用户登录系统。</li></ul><h2 id="rc-local"><a href="#rc-local" class="headerlink" title="rc.local"></a>rc.local</h2><p>rc.local是在登录界面之前运行的一个文件，想要开机执行某个文件或者命令的话，可以在/etc/rc.d/rc.local 在该文件内末尾，写入要执行的文件。</p><h2 id="文件修改权限和所属用户组"><a href="#文件修改权限和所属用户组" class="headerlink" title="文件修改权限和所属用户组"></a>文件修改权限和所属用户组</h2><ul><li>chown(changeowner)：修改所属用户与组。</li><li>chmod(changemode)：修改用户的权限。</li></ul><h2 id="用户账号的管理"><a href="#用户账号的管理" class="headerlink" title="用户账号的管理"></a>用户账号的管理</h2><h3 id="账户管理"><a href="#账户管理" class="headerlink" title="账户管理"></a>账户管理</h3><p><strong>添加</strong></p><figure class="highlight"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs">useradd选项用户名<br></code></pre></td></tr></table></figure><ul><li>-ccomment指定一段注释性描述。</li><li>-d目录指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</li><li>-g用户组指定用户所属的用户组。</li><li>-G用户组，用户组指定用户所属的附加组。</li><li>-sShell文件指定用户的登录Shell。</li><li>-u用户号指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li></ul><p><strong>删除</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">userdel选项用户名<br></code></pre></td></tr></table></figure><p>常用的选项是**-r**，它的作用是把用户的主目录一起删除。</p><p><strong>修改帐号</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">usermod选项用户名<br></code></pre></td></tr></table></figure><p><strong>用户口令的管理</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">passwd选项用户名<br></code></pre></td></tr></table></figure><ul><li>-l锁定口令，即禁用账号。</li><li>-u口令解锁。</li><li>-d使账号无口令。</li><li>-f强迫用户下次登录时修改口令</li></ul><h3 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h3><p><strong>增加一个新的用户组使用groupadd命令。其格式如下：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">groupadd选项用户组<br></code></pre></td></tr></table></figure><p>可以使用的选项有：</p><ul><li>-gGID指定新用户组的组标识号（GID）。</li><li>-o一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">groupdel用户组<br></code></pre></td></tr></table></figure><p><strong>修改用户组的属性使用groupmod命令。其语法如下：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">groupmod选项用户组<br></code></pre></td></tr></table></figure><p>常用的选项有：</p><ul><li>-gGID为用户组指定新的组标识号。</li><li>-o与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li><li>-n新用户组将用户组的名字改为新名字</li></ul><p><strong>如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。</strong></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$newgrproot</span></span><br></code></pre></td></tr></table></figure><h2 id="Linux磁盘管理"><a href="#Linux磁盘管理" class="headerlink" title="Linux磁盘管理"></a>Linux磁盘管理</h2><p>Linux磁盘管理好坏直接关系到整个系统的性能问题。</p><p>Linux磁盘管理常用三个命令为<strong>df</strong>、<strong>du</strong>和<strong>fdisk</strong>。</p><ul><li><strong>df</strong>（英文全称：diskfree）：列出文件系统的整体磁盘使用量</li><li><strong>du</strong>（英文全称：diskused）：检查磁盘空间使用量</li><li><strong>fdisk</strong>：用于磁盘分区</li></ul><h3 id="df"><a href="#df" class="headerlink" title="df"></a>df</h3><p>df命令参数功能：检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">df<span class="hljs-selector-attr">[-ahikHTm]</span><span class="hljs-selector-attr">[目录或文件名]</span><br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-a：列出所有的文件系统，包括系统特有的/proc等文件系统；</li><li>-k：以KBytes的容量显示各文件系统；</li><li>-m：以MBytes的容量显示各文件系统；</li><li>-h：以人们较易阅读的GBytes,MBytes,KBytes等格式自行显示；</li><li>-H：以M=1000K取代M=1024K的进位方式；</li><li>-T：显示文件系统类型,连同该partition的filesystem名称(例如ext3)也列出；</li><li>-i：不用硬盘容量，而以inode的数量来显示</li></ul><h3 id="du"><a href="#du" class="headerlink" title="du"></a>du</h3><p>Linuxdu命令也是查看使用空间的，但是与df命令不同的是Linuxdu命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的，这里介绍Linuxdu命令。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>运维排错</title>
    <link href="https://bugdev.tk/post/19839/"/>
    <id>https://bugdev.tk/post/19839/</id>
    <published>2024-03-30T17:02:00.000Z</published>
    <updated>2024-06-11T06:20:15.620Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>运维流程</strong></p><ol><li>核实身份</li><li>核对设备标识</li><li>查看重启前状态</li><li>答复</li></ol><h2 id="Linux重启"><a href="#Linux重启" class="headerlink" title="Linux重启"></a>Linux重启</h2><blockquote><p>Linux中的重启命令： 1、“shutdown -r now”命令，停止系统服务后重启；2、“init 1”重启命令；3、“reboot”命令，立即重启；4、“poweroff”重启命令；5、“halt”重启命令。</p></blockquote><p><strong>Linux 有五个重启命令</strong></p><p>1、shutdown</p><p>shutdown是最常用也是最安全的关机和重启命令，它会在关机之前调用fsck检查磁盘，其中-h和-r是最常用的参数：</p><figure class="highlight arcade"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs arcade">-h：停止系统服务并关机 <span class="hljs-string">``</span>-r： 停止系统服务后重启<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">shutdown</span> -h now --立即关机 <span class="hljs-string">``</span><span class="hljs-keyword">shutdown</span> -h <span class="hljs-number">10</span>:<span class="hljs-number">53</span> --到<span class="hljs-number">10</span>:<span class="hljs-number">53</span>关机，如果该时间小于当前时间，则到隔天 <span class="hljs-string">``</span><span class="hljs-keyword">shutdown</span> -h +<span class="hljs-number">10</span> --<span class="hljs-number">10</span>分钟后自动关机 <span class="hljs-string">``</span><span class="hljs-keyword">shutdown</span> -r now --立即重启 <span class="hljs-string">``</span><span class="hljs-keyword">shutdown</span> -r +<span class="hljs-number">30</span> <span class="hljs-string">``</span><span class="hljs-string">&#x27;The System Will Reboot in 30 Mins&#x27;</span><span class="hljs-string">`  `</span>--<span class="hljs-number">30</span>分钟后重启并并发送通知给其它在线用户<br></code></pre></td></tr></table></figure><p>2、poweroff</p><p>poweroff表示立即关机，效果等同于shutdown -h now，在多用户模式下(Run Level 3）不建议使用。</p><p>3、init</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">语法：init(选项)(参数)`` ` `-b：不执行相关脚本而直接进入单用户模式；``-s：切换到单用户模式。`` ` `0 停机（千万不能把initdefault 设置为<span class="hljs-number">0</span>）``<span class="hljs-number">1</span> 单用户模式``<span class="hljs-number">2</span> 多用户，没有 NFS(和级别<span class="hljs-number">3</span>相似，会停止部分服务)``<span class="hljs-number">3</span> 完全多用户模式``<span class="hljs-number">4</span> 没有用到``<span class="hljs-number">5</span> x11(Xwindow)``<span class="hljs-number">6</span> 重新启动（千万不要把initdefault 设置为<span class="hljs-number">6</span>）<br></code></pre></td></tr></table></figure><p>init是所有进程的祖先﹐它的进程号始终为1﹐所以发送TERM信号给init会终止所有的 用户进程﹑守护进程等。shutdown 就是使用这种机制。init定义了8个运行级别(runlevel)， init 0为关机﹐init 1为重启。</p><p>4、reboot</p><p>reboot表示立即重启，效果等同于shutdown -r now</p><p>5、halt</p><p>不理会目前系统状况下，进行硬件关机，一般不建议使用</p><h2 id="linux排障"><a href="#linux排障" class="headerlink" title="linux排障"></a>linux排障</h2><h3 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h3><p><img src="/post/19839/f7b282f849824ab2ad341e72f5e4c660.png"></p><p><img src="/post/19839/59725dab68314431aaf1cdbc4416f7c9.png"></p><h3 id="现场环境"><a href="#现场环境" class="headerlink" title="现场环境"></a>现场环境</h3><p>如果是Linux系统的话，见过最多的是CentOS ，Linux是全命令界面的，</p><p>如果是Windows系统的话，一般是Windows server</p><h3 id="常见应急问题"><a href="#常见应急问题" class="headerlink" title="常见应急问题"></a>常见应急问题</h3><p>大多数应急常见的问题都是挖矿，或者是被植入菠菜</p><p>小部分是中了勒索病毒，如果是勒索病毒的话，看看360、腾讯有没有什么</p><p>解密工具，</p><p>如果没有的话就重装系统吧，自求多福 （逃。。</p><p><img src="/post/19839/3e8b1fa6686544bdb53885e02a1f0581.png"></p><h3 id="排查思路及方法"><a href="#排查思路及方法" class="headerlink" title="排查思路及方法"></a>排查思路及方法</h3><p>本节将讲解一些基本的流程，以及一些常用的命令。</p><h3 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h3><ol><li>接到应急指令后，一般都需要到客户现场去处理的，最好带上电脑和笔记本。</li><li>到达现场后，跟客户沟通，我方需要确认一些信息(我在Windows安全应急的第三篇有讲解一些)，<br>方便定(shuai)位(guo)问题，后面客户可能会让你上机操作，或者是使用你自己电脑登录目标机器查找问题。</li><li>无论是挖矿还是菠菜，流程都差不多，</li></ol><p>找出问题 –&gt; 解决问题 –&gt; 编写报告</p><p>有句传言道是：扫描一分钟，报告一个钟，</p><p>如果是菠菜的话，那要多注意注意是不是修改了网站配置文件还是直接在网页上植入入的链接。</p><h3 id="进程排查命令"><a href="#进程排查命令" class="headerlink" title="进程排查命令"></a>进程排查命令</h3><p>整理一些基本的命令，使用不分先后顺序</p><p>这里只简单说明，</p><p>服务器被入侵后，攻击者难免会利用恶意程序来达到自己的目的。</p><h3 id="1-查看当前系统状态-top"><a href="#1-查看当前系统状态-top" class="headerlink" title="1. 查看当前系统状态(top)"></a>1. 查看当前系统状态(top)</h3><p><strong>top命令：可以持续的监视进程的信息。</strong></p><p>挖矿应急通常优先使用top命令来查看系统进程，</p><p>一般挖矿病毒站用CPU比较大</p><p><img src="/post/19839/47dd75d10d4b416d82ca7ed76b098656.png"></p><h3 id="2-查看当前系统进程信息-ps"><a href="#2-查看当前系统进程信息-ps" class="headerlink" title="2. 查看当前系统进程信息(ps)"></a>2. 查看当前系统进程信息(ps)</h3><p><strong>ps命令：可以查看进程的瞬间信息。</strong><br>常用参数：</p><ol><li>-a：显示现行终端机下的所有程序，包括其他用户的程序。</li><li>-e：列出程序时，显示每个程序所使用的环境变量。</li><li>-f：显示UID,PPIP,C与STIME栏位。</li></ol><p><img src="/post/19839/3f15847aa6f549f4907d7b32fd535cd5.png"></p><h3 id="3-查看非root运行的进程-ps"><a href="#3-查看非root运行的进程-ps" class="headerlink" title="3. 查看非root运行的进程(ps)"></a>3. 查看非root运行的进程(ps)</h3><p>命令：</p><p>ps -U root -u root -N</p><p><img src="/post/19839/097e3f853701423a82e2359e8cf07e0f.jpeg"></p><h3 id="4-查看用户root运行的进程-ps"><a href="#4-查看用户root运行的进程-ps" class="headerlink" title="4. 查看用户root运行的进程(ps)"></a>4. 查看用户root运行的进程(ps)</h3><p>命令：</p><p>ps -u root</p><p><img src="/post/19839/a26c02d8e0014c9e987182397fca8593.png"></p><h3 id="5-查看有没有奇怪进程-ps"><a href="#5-查看有没有奇怪进程-ps" class="headerlink" title="5. 查看有没有奇怪进程(ps)"></a>5. 查看有没有奇怪进程(ps)</h3><p>命令：</p><p>ps -aef | grep inetd</p><p><strong>grep</strong> 是搜索命令</p><p><strong>inetd</strong> 程序是一个Linux守护进程.</p><p><img src="/post/19839/e75df0a588c84e5ca92d3e2c55dbe8a9.png"></p><h3 id="6-检测隐藏进程-ps"><a href="#6-检测隐藏进程-ps" class="headerlink" title="6. 检测隐藏进程(ps)"></a>6. 检测隐藏进程(ps)</h3><p><img src="/post/19839/add9be71f12946c493240abdc8274ab7.png"></p><p>命令：</p><p>ps -ef | awk ‘{print}’ | sort -n |uniq &gt;1</p><p>命令：</p><p>ls /proc | sort -n |uniq &gt;2</p><p><strong>sort</strong> 命令将文本文件内容加以排序,可针对文本文件的内容，以行为单位来排序。-n 参数依照数值的大小排序。</p><p><strong>uniq</strong> 命令用于检查及删除文本文件中重复出现的行列，一般与 sort 命令结合使用。</p><p><img src="/post/19839/928050d5cb634a56827c36e4fdcbbae5.png"></p><h3 id="7-检测系统守护进程-ls"><a href="#7-检测系统守护进程-ls" class="headerlink" title="7. 检测系统守护进程(ls)"></a>7. 检测系统守护进程(ls)</h3><p>命令：</p><p>ls /etc/crontab</p><p><img src="/post/19839/472e8ba2f00b4f0896d8652e137a0b3c.png"></p><h3 id="任务及用户活动排查命令"><a href="#任务及用户活动排查命令" class="headerlink" title="任务及用户活动排查命令"></a>任务及用户活动排查命令</h3><p>说明：机器使用过程中难免会留下一些痕迹</p><h3 id="1-查看当前有谁登陆在服务器上-who"><a href="#1-查看当前有谁登陆在服务器上-who" class="headerlink" title="1. 查看当前有谁登陆在服务器上(who)"></a>1. 查看当前有谁登陆在服务器上(who)</h3><p><strong>who</strong> 命令查看当前登录用户（tty本地登陆 pts远程登录）</p><p>命令：</p><p>who</p><p><strong>w</strong> 命令查看系统信息，想知道某一时刻用户的行为</p><p><img src="/post/19839/38d5636574ce4f9faae1d5503f5b6a32.png"></p><h3 id="2-查看当前登陆用户的IP信息-who"><a href="#2-查看当前登陆用户的IP信息-who" class="headerlink" title="2. 查看当前登陆用户的IP信息(who)"></a>2. 查看当前登陆用户的IP信息(who)</h3><p>命令：</p><p>who -m</p><p><img src="/post/19839/b1740c7661c4418f971b5e95c04c1943.png"></p><h3 id="3-查看近期用户登陆情况-last"><a href="#3-查看近期用户登陆情况-last" class="headerlink" title="3. 查看近期用户登陆情况(last)"></a>3. 查看近期用户登陆情况(last)</h3><p>命令：</p><p>last -n 5 ## -n 5 表示输出5条</p><p><img src="/post/19839/592c3a8c4db144f79449087f8f7c8346.jpeg"></p><h3 id="4-查看历史命令-history"><a href="#4-查看历史命令-history" class="headerlink" title="4. 查看历史命令(history)"></a>4. 查看历史命令(history)</h3><p>命令：</p><p>history 5 ## 5 表示输出最近使用的5条命令</p><p><img src="/post/19839/bed934198df448f9a1ac6f2318bd39e2.png"></p><h3 id="5-查看空口令账号-awk"><a href="#5-查看空口令账号-awk" class="headerlink" title="5. 查看空口令账号(awk)"></a>5. 查看空口令账号(awk)</h3><p><strong>awk</strong>是一种编程语言，用于对文本和数据进行处理的</p><p>语法：awk [options] ‘pattern{action}’ file</p><p>命令：</p><p>awk -F: ‘($2==””)’ /etc/shadow</p><p>没有的话啥都不输出</p><p><img src="/post/19839/4ae418a3e98548c5a531a071daa5311b.png"></p><p>在没有options和pattern的情况下，可以使用cat命令</p><p><img src="/post/19839/07cc18252f174c32acaf32c4f687d57c.png"></p><h3 id="6-查看uid为0的账号-awk"><a href="#6-查看uid为0的账号-awk" class="headerlink" title="6. 查看uid为0的账号(awk)"></a>6. 查看uid为0的账号(awk)</h3><p>命令：</p><p>awk -F: ‘($3==0)’ /etc/passwd</p><p><img src="/post/19839/63af33bd676f400f9e55eff454ece5d0.png"></p><h3 id="7-查看uid为0的账号-grep"><a href="#7-查看uid为0的账号-grep" class="headerlink" title="7. 查看uid为0的账号(grep)"></a>7. 查看uid为0的账号(grep)</h3><p>命令：</p><p>grep -v -E “^#” /etc/passwd | awk -F: ‘$3==0{print $1}’</p><p><img src="/post/19839/6aa89a41462442ad9362c3965696451c.png"></p><h3 id="8-查看进程树是否所有异常进程存在一个父进程、判断进程的父子关系-pstree"><a href="#8-查看进程树是否所有异常进程存在一个父进程、判断进程的父子关系-pstree" class="headerlink" title="8. 查看进程树是否所有异常进程存在一个父进程、判断进程的父子关系(pstree)"></a>8. 查看进程树是否所有异常进程存在一个父进程、判断进程的父子关系(pstree)</h3><p>命令：</p><p>pstree -p</p><p><img src="/post/19839/c6015f99dd0f4eddbf63f2fdefc51f59.jpeg"></p><h3 id="网络排查命令"><a href="#网络排查命令" class="headerlink" title="网络排查命令"></a>网络排查命令</h3><p>说明：挖矿病毒避免不了要跟主机通信</p><h3 id="1-列出本机所有的连接和监听的端口，查看有没有非法连接-netstat"><a href="#1-列出本机所有的连接和监听的端口，查看有没有非法连接-netstat" class="headerlink" title="1. 列出本机所有的连接和监听的端口，查看有没有非法连接(netstat)"></a>1. 列出本机所有的连接和监听的端口，查看有没有非法连接(netstat)</h3><p><strong>netstat</strong> 命令用来打印Linux中网络系统的状态信息。<br>常用参数：</p><ol><li>-a或–all：显示所有连线中的Socket。</li><li>-c或–continuous：持续列出网络状态。</li><li>-i或–interfaces：显示网络界面信息表单。</li><li>l或–listening：显示监控中的服务器的Socket。</li><li>-n或–numeric：直接使用ip地址，而不通过域名服务器。</li><li>-t或–tcp：显示TCP传输协议的连线状况。</li><li>-u或–udp：显示UDP传输协议的连线状况。</li></ol><p>命令：</p><p>netstat -lntp</p><p><img src="/post/19839/a735dedcc6b8493dbe7d7a536129c8f2.png"></p><h3 id="2-查看谁在使用某个端口-lsof"><a href="#2-查看谁在使用某个端口-lsof" class="headerlink" title="2. 查看谁在使用某个端口(lsof)"></a>2. 查看谁在使用某个端口(lsof)</h3><p><strong>lsof</strong> 命令用于查看你进程开打的文件，打开文件的进程，进程打开的端口(TCP、UDP)。<br>常用参数：</p><ol><li>-g：列出GID号进程详情；</li><li>-d&lt;文件号&gt;：列出占用该文件号的进程；</li><li>-i&lt;条件&gt;：列出符合条件的进程。（4、6、协议、:端口、 @ip ）</li><li>-p&lt;进程号&gt;：列出指定进程号所打开的文件；</li><li>-u：列出UID号进程详情；</li></ol><p>命令：</p><p>lsof -i :22 # 看看谁在使用22端口</p><p><img src="/post/19839/d95bd42311e8472585e15f39fb141a10.png"></p><h3 id="3-查看多个进程号对应的文件信息-lsof"><a href="#3-查看多个进程号对应的文件信息-lsof" class="headerlink" title="3. 查看多个进程号对应的文件信息(lsof)"></a>3. 查看多个进程号对应的文件信息(lsof)</h3><p>命令：</p><p>lsof -p 2,3 # 使用逗号分隔</p><p><img src="/post/19839/52ea1ed37863455a99378a6b2f26c9e6.png"></p><h3 id="4-查看所有tcp网络连接信息-lsof"><a href="#4-查看所有tcp网络连接信息-lsof" class="headerlink" title="4. 查看所有tcp网络连接信息(lsof)"></a>4. 查看所有tcp网络连接信息(lsof)</h3><p>命令：</p><p>lsof -i tcp</p><p><img src="/post/19839/63cede4b155c46d3856063d50b894738.png"></p><h3 id="5-查看所有udp网络连接信息-lsof"><a href="#5-查看所有udp网络连接信息-lsof" class="headerlink" title="5. 查看所有udp网络连接信息(lsof)"></a>5. 查看所有udp网络连接信息(lsof)</h3><p>命令：</p><p>lsof -i udp</p><p><img src="/post/19839/97250f99ee5640e08931ff48b4e26947.png"></p><h3 id="文件排查命令"><a href="#文件排查命令" class="headerlink" title="文件排查命令"></a>文件排查命令</h3><p>说明：服务器被入侵后，攻击者基本上都需要修改一些文件来维持脚本的</p><p>运行</p><h3 id="1-查看所有文件，包括隐藏的文件-ls"><a href="#1-查看所有文件，包括隐藏的文件-ls" class="headerlink" title="1. 查看所有文件，包括隐藏的文件(ls)"></a>1. 查看所有文件，包括隐藏的文件(ls)</h3><p><strong>ls</strong> 命令用来显示目标列表，不同类型的文件颜色也不同<br>常用参数：</p><ol><li>-a：显示所有文件及目录，包括隐藏文件</li><li>-l：以长格式显示目录下的内容列表。</li><li>-t：用文件和目录的更改时间排序</li></ol><p>命令：</p><p>ls -la</p><h3 id="2-查看文件路径-whereis"><a href="#2-查看文件路径-whereis" class="headerlink" title="2. 查看文件路径(whereis)"></a>2. 查看文件路径(whereis)</h3><p>命令：</p><p>whereis filename</p><h3 id="3-查看文件创建时间-ls"><a href="#3-查看文件创建时间-ls" class="headerlink" title="3. 查看文件创建时间(ls)"></a>3. 查看文件创建时间(ls)</h3><p>命令：</p><p>ls -al filname</p><h3 id="4-查找最近24小时内修改过的文件-find"><a href="#4-查找最近24小时内修改过的文件-find" class="headerlink" title="4. 查找最近24小时内修改过的文件(find)"></a>4. 查找最近24小时内修改过的文件(find)</h3><p>命令：</p><p>find ./ -mtime 0</p><p><strong>find</strong> 命令用来在指定目录下查找文件。</p><p>参数 <strong>-mtime n</strong> 按照文件的更改时间来找文件，n为整数。</p><p>例：</p><ol><li>-mtime 0 表示文件修改时间距离当前为0天的文件，即距离当前时间不到1天（24小时）以内的文件。</li><li>-mtime 1 表示文件修改时间距离当前为1天的文件，即距离当前时间1天（24小时－48小时）的文件。</li><li>-mtime＋1 表示文件修改时间为大于1天的文件，即距离当前时间2天（48小时）之外的文件</li><li>-mtime -1 表示文件修改时间为小于1天的文件，即距离当前时间1天（24小时）之内的文件</li></ol><h3 id="5-查找以-txt结尾的文件名-find"><a href="#5-查找以-txt结尾的文件名-find" class="headerlink" title="5. 查找以.txt结尾的文件名(find)"></a>5. 查找以.txt结尾的文件名(find)</h3><p>命令：</p><p>find / -name “*.txt”</p><p>忽略大小写，命令：</p><p>find / -iname “*.txt”</p><h3 id="6-查找不是以-txt结尾的文件-find"><a href="#6-查找不是以-txt结尾的文件-find" class="headerlink" title="6. 查找不是以.txt结尾的文件(find)"></a>6. 查找不是以.txt结尾的文件(find)</h3><p>命令：</p><p>find / ! -name “*.txt”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>NodeJS是什么</title>
    <link href="https://bugdev.tk/post/65145/"/>
    <id>https://bugdev.tk/post/65145/</id>
    <published>2024-02-18T05:47:00.000Z</published>
    <updated>2024-06-11T06:23:16.954Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="NodeJS是什么？"><a href="#NodeJS是什么？" class="headerlink" title="NodeJS是什么？"></a>NodeJS是什么？</h1><p>实现请求响应</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//导入模块</span><br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><br><span class="hljs-comment">//创建httpServer服务</span><br>http.<span class="hljs-title function_">createServer</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">request,response</span>)&#123;<br>    <span class="hljs-comment">//设置响应头，声明这个响应的类型</span><br>    response.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>,&#123;<span class="hljs-string">&#x27;Content-type&#x27;</span>:<span class="hljs-string">&#x27;text/plain&#x27;</span>&#125;);<br>    <span class="hljs-comment">//响应到浏览器</span><br>    response.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;hello nodejs&quot;</span>)<br>&#125;).<span class="hljs-title function_">listen</span>(<span class="hljs-number">8888</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;启动服务8888&quot;</span>)<br><span class="hljs-comment">//监听端口</span><br><span class="hljs-comment">//启动运行服务</span><br></code></pre></td></tr></table></figure><p>操作mysql数据库</p><p>首先在npm导入mysql</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//导入mysql依赖包</span><br><span class="hljs-keyword">var</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mysql&quot;</span>);<br><br><span class="hljs-comment">//创建mysql连接对象</span><br><span class="hljs-comment">//配置连接信息</span><br><br><span class="hljs-keyword">var</span> connection = mysql.<span class="hljs-title function_">createConnection</span>(&#123;<br>    <span class="hljs-attr">host</span>:<span class="hljs-string">&quot;localhost&quot;</span>,<br>    <span class="hljs-attr">port</span>:<span class="hljs-number">3306</span>,<br>    <span class="hljs-attr">user</span>:<span class="hljs-string">&quot;root&quot;</span>,<br>    <span class="hljs-attr">password</span>:<span class="hljs-string">&quot;123456&quot;</span>,<br>    <span class="hljs-attr">database</span>:<span class="hljs-string">&quot;nodejs_db&quot;</span><br>&#125;);<br><span class="hljs-comment">//创建连接</span><br><br>connection.<span class="hljs-title function_">connect</span>();<br><span class="hljs-comment">//执行crud</span><br><br>connection.<span class="hljs-title function_">query</span>(<span class="hljs-string">&quot;SELECT * FROM `kss-user`&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">error,results,fields</span>)&#123;<br>    <span class="hljs-comment">//有错即抛出</span><br>    <span class="hljs-keyword">if</span>(error) <span class="hljs-keyword">throw</span> error;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;results&quot;</span>,results);<br>&#125;);<br><br><span class="hljs-comment">//关闭连接</span><br><br>connection.<span class="hljs-property">end</span>;<br></code></pre></td></tr></table></figure><h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h2 id="let-amp-const"><a href="#let-amp-const" class="headerlink" title="let&amp;const"></a>let&amp;const</h2><ul><li><p><strong>ES6中变量使用let定义</strong></p></li><li><p><strong>常量使用const定义</strong></p></li><li><p><strong>解决了js中var定义变量穿透的问题</strong></p></li></ul><h2 id="模板字符串-套接字"><a href="#模板字符串-套接字" class="headerlink" title="模板字符串(套接字``)"></a>模板字符串(套接字``)</h2><p>解决字符串套接的问题</p><p>传统方式套接字符串时使用字符串变量+新的var或者var的属性进行套接</p><p>ES6则使用``外飘字定义字符串是一个套接字符串，并且使用${var}进行取值套接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> person = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;loh&quot;</span>,<br>    <span class="hljs-attr">address</span>:<span class="hljs-string">&quot;guang xi&quot;</span>,<br>    <span class="hljs-attr">link</span>:<span class="hljs-string">&quot;https://www.baidu.com&quot;</span><br>&#125;;<br><span class="hljs-keyword">let</span> address = <span class="hljs-string">&quot;guang dong&quot;</span>+person.<span class="hljs-property">address</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(address);<br><br>address = <span class="hljs-string">`guang dong<span class="hljs-subst">$&#123;person.address&#125;</span>`</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(address);<br></code></pre></td></tr></table></figure><h2 id="函数默认参数-amp-箭头函数"><a href="#函数默认参数-amp-箭头函数" class="headerlink" title="函数默认参数&amp;箭头函数"></a>函数默认参数&amp;箭头函数</h2><h3 id="函数默认参数"><a href="#函数默认参数" class="headerlink" title="函数默认参数"></a>函数默认参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a,b</span>)&#123;<br>            <span class="hljs-keyword">return</span> a + b;<br>        &#125;;<br><br><span class="hljs-keyword">let</span> result = <span class="hljs-title function_">sum</span>(<span class="hljs-number">100</span>,<span class="hljs-number">200</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;result=&quot;</span>,result);<br></code></pre></td></tr></table></figure><p>给函数方法参数赋默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a=<span class="hljs-number">100</span>,b=<span class="hljs-number">200</span></span>)&#123;<br>            <span class="hljs-keyword">return</span> a + b;<br>        &#125;;<br><br><span class="hljs-keyword">let</span> result = <span class="hljs-title function_">sum</span>(<span class="hljs-number">100</span>,<span class="hljs-number">200</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;result=&quot;</span>,result);<br></code></pre></td></tr></table></figure><ul><li>避免方法参数忘记赋值时引起的错误。</li></ul><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> sum = <span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<br>    <span class="hljs-keyword">return</span> a+b;<br>&#125;<br><br><span class="hljs-comment">//箭头函数 1</span><br><span class="hljs-keyword">var</span> <span class="hljs-title function_">sum</span> = (<span class="hljs-params">a,b</span>) =&gt;&#123;<br>    <span class="hljs-keyword">return</span> a+b;<br>&#125;<br><br><span class="hljs-comment">//箭头函数 2</span><br><span class="hljs-keyword">var</span> <span class="hljs-title function_">sum</span> = (<span class="hljs-params">a,b</span>) =&gt; a+b;<br><br><br><span class="hljs-comment">//去掉function</span><br><span class="hljs-comment">//在括号后加箭头指向</span><br><span class="hljs-comment">//如果逻辑代码中只有return，可以直接省略&#123;&#125;</span><br><span class="hljs-keyword">var</span> <span class="hljs-title function_">sum2</span>=(<span class="hljs-params">a,b</span>)=&gt;&#123;<br>    <span class="hljs-keyword">var</span> num = a+b;<br>    <span class="hljs-keyword">return</span> num;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="对象初始化简写"><a href="#对象初始化简写" class="headerlink" title="对象初始化简写"></a>对象初始化简写</h2><ul><li>js对象是以key:value的形式存在</li><li>如果键值名称一致，则可以省略，只写一次即可</li><li>如果value是一个函数，可以把function去掉，只剩下()和函数体</li></ul><h2 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h2><p>ES6中快捷获取对象属性的方法</p><p>传统方式获取对象属性</p><h3 id="通过"><a href="#通过" class="headerlink" title="通过."></a>通过.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">person.<span class="hljs-property">name</span><br></code></pre></td></tr></table></figure><h3 id="通过-key"><a href="#通过-key" class="headerlink" title="通过[key]"></a>通过[key]</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">person[<span class="hljs-string">&quot;name&quot;</span>]<br></code></pre></td></tr></table></figure><h3 id="ES6解构"><a href="#ES6解构" class="headerlink" title="ES6解构"></a>ES6解构</h3><p>ES6中可以通过解构的方式进行获取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span>&#123;name,say&#125;=person;<br><br><span class="hljs-comment">//等价于</span><br><br><span class="hljs-keyword">var</span> name = person.<span class="hljs-property">name</span><br><span class="hljs-keyword">var</span> say = person.<span class="hljs-property">say</span><br></code></pre></td></tr></table></figure><h2 id="传播操作符"><a href="#传播操作符" class="headerlink" title="传播操作符"></a>传播操作符</h2><p>对象解构后使用…可以把剩余参数传给你指定的属性</p><p>假如有这样一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">person&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;loh&quot;</span>,<br>    <span class="hljs-attr">address</span>:<span class="hljs-string">&quot;guang xi&quot;</span>,<br>    <span class="hljs-attr">phone</span>:<span class="hljs-number">13663423523</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们解构person的name和address并把phone传给person2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span>&#123;name,address,...person2&#125;=person<br></code></pre></td></tr></table></figure><p>那么我们可以分别得到一个name，address和一个person2对象</p><h2 id="数组map-reduce方法"><a href="#数组map-reduce方法" class="headerlink" title="数组map reduce方法"></a>数组map reduce方法</h2><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>假设有个数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> users = [&#123;<span class="hljs-attr">age</span>:<span class="hljs-number">10</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;小&quot;</span>&#125;,&#123;<span class="hljs-attr">age</span>:<span class="hljs-number">12</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;中&quot;</span>&#125;,&#123;<span class="hljs-attr">age</span>:<span class="hljs-number">14</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;大&quot;</span>&#125;];<br></code></pre></td></tr></table></figure><p>那么可以这样操作map</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">users.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">ele</span>)&#123;<br>    ele.<span class="hljs-property">age</span> += <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> ele;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p><strong>reduce() 方法对数组中的每个元素执行一个由我们提供的reducer函数，且该函数为升序执行，并将其结果汇总为单个返回值。</strong></p><p>对数组中的每个元素都执行一次我们定义的reduce函数</p><h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><p>node包管理器：node package manager  </p><ul><li><h2 id="npm-init"><a href="#npm-init" class="headerlink" title="npm init"></a>npm init</h2><ul><li><p>带参数-y即按默认方式配置</p></li><li><p>-g (globel)代表全局安装</p></li><li><p>初始化命令、初始化npm的参数等等</p></li><li><p>–save 等同于 -S （常用，可保存在package.json文件中），<br>-S, –save 安装包信息将加入到dependencies（生产阶段的依赖,也就是项目运行时的依赖，就是程序上线后仍然需要依赖）</p></li><li><p>–save-dev 等同于 -D<br>-D, –save-dev 安装包信息将加入到devDependencies（开发阶段的依赖，就是我们在开发过程中需要的依赖，只在开发阶段起作用。）</p></li></ul></li><li><h2 id="npm-install-包名-或npm-i-包名"><a href="#npm-install-包名-或npm-i-包名" class="headerlink" title="npm install 包名 或npm i 包名"></a>npm install 包名 或npm i 包名</h2><p>安装模块，模块位置存储在项目下node_modules下</p></li><li><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>node xxxx.js</p></li></ul><p>package.json保存着当前项目所依赖的模块，可以直接复制文件，执行npm install进行复用，相当于maven的pom.xml</p><p>镜像 </p><p>安装cnpm</p><h1 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h1><p>babel用来将es6的代码转码成es5的代码，防止某些环境不支持</p><h2 id="安装babel"><a href="#安装babel" class="headerlink" title="安装babel"></a>安装babel</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install -g babel-cli<br></code></pre></td></tr></table></figure><h2 id="项目下创建babel配置文件-babelrc"><a href="#项目下创建babel配置文件-babelrc" class="headerlink" title="项目下创建babel配置文件.babelrc"></a>项目下创建babel配置文件.babelrc</h2><p>我使用的配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;   <span class="hljs-string">&quot;presets&quot;</span>: [<span class="hljs-string">&quot;es2015&quot;</span>],<br>    <span class="hljs-string">&quot;plugins&quot;</span>: []<br>&#125;<br></code></pre></td></tr></table></figure><p>模板配置文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-string">&quot;presets&quot;</span>: [<br>    [<span class="hljs-string">&quot;@babel/env&quot;</span>, &#123;<br>      <span class="hljs-string">&quot;targets&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;node&quot;</span>: <span class="hljs-string">&quot;current&quot;</span><br>      &#125;<br>    &#125;]<br>  ],<br>  <span class="hljs-string">&quot;plugins&quot;</span>: [<br>    <span class="hljs-string">&quot;@babel/plugin-proposal-class-properties&quot;</span>,<br>    <span class="hljs-string">&quot;@babel/plugin-proposal-object-rest-spread&quot;</span><br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="安装转码器"><a href="#安装转码器" class="headerlink" title="安装转码器"></a>安装转码器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install --save-dev babel-preset-es2015<br></code></pre></td></tr></table></figure><p>生成转码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">babel src -d dist<br><br><span class="hljs-comment">//babel 转码目录 -d转码 转码目录</span><br></code></pre></td></tr></table></figure><p>也可以在packjson中定义一个命令，把上面的生成代码通过key:value的形式定义进去，</p><p>然后我们可以使用npm run 你定义的的命令，进行输出</p><h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p>有一个01-CommonJS-exports.js，里面定义两个方法，使用export导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> sum = <span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<br>    <span class="hljs-keyword">return</span> a+b;<br>&#125;<br><span class="hljs-keyword">const</span> sub = <span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<br>    <span class="hljs-keyword">return</span> a-b;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-comment">//方法名和你要导出的方法名相同时，可以省略</span><br>    <span class="hljs-attr">sum</span>:sum,<br>    <span class="hljs-attr">sub</span>:sub<br>&#125;<br></code></pre></td></tr></table></figure><p>在另外的02-CommonJS-require.js使用require导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> r = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./01-CommonJS-exports.js&#x27;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(r.<span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>));<br></code></pre></td></tr></table></figure><h2 id="ES6-1"><a href="#ES6-1" class="headerlink" title="ES6"></a>ES6</h2><p>在03-ES6-export.js导出，<strong>使用export function导出</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;f-a&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">b</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;f-b&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>在04-ES6-import.js导入，<strong>使用import引入</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;a,b&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./03-ES6-export&quot;</span>;<br><br><span class="hljs-title function_">a</span>();<br><span class="hljs-title function_">b</span>();<br></code></pre></td></tr></table></figure><p>但是在实际生产中会把所有方法定义在一起导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    <span class="hljs-title function_">ea</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;f-a&quot;</span>);<br>    &#125;,<br>    <span class="hljs-title function_">eb</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;f-b&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在引入时引入到对象里，再使用对象.方法使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> ex <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./03-ES6-export&quot;</span>;<br>ex.<span class="hljs-title function_">ea</span>();<br></code></pre></td></tr></table></figure><ul><li>export导出</li><li>import导入</li></ul><h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><p>用来打包静态资源</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install -g webpack webpack-cli<br></code></pre></td></tr></table></figure><p>安装好查看版本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">webpack -v<br></code></pre></td></tr></table></figure><h2 id="配置文件-webpack-config-js"><a href="#配置文件-webpack-config-js" class="headerlink" title="配置文件 webpack.config.js"></a>配置文件 webpack.config.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//导入path模块(nodejs的内置模块)</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-comment">//入口从哪里开始编译打包</span><br>    <span class="hljs-attr">entry</span>:<span class="hljs-string">&quot;./src/main.js&quot;</span>,<br>    <span class="hljs-comment">//编译后的内容输出目录和文件名</span><br>    <span class="hljs-attr">output</span>:&#123;<br>        <span class="hljs-attr">path</span>:path.<span class="hljs-title function_">resolve</span>(__dirname,<span class="hljs-string">&quot;./dist&quot;</span>),<br>        <span class="hljs-attr">filename</span>:<span class="hljs-string">&quot;bundle.js&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="webpack打包css"><a href="#webpack打包css" class="headerlink" title="webpack打包css"></a>webpack打包css</h2><p>默认情况下，webpack只处理js模块，如果要处理其他类型，就需要使用loader</p><ul><li>css-loader 将css装载到JavaScript</li><li>style-loader 让JavaScript识别css</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install --save-dev style-loader css-loader<br></code></pre></td></tr></table></figure><h3 id="修改webpack-config-js"><a href="#修改webpack-config-js" class="headerlink" title="修改webpack.config.js"></a>修改webpack.config.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//导入path模块(nodejs的内置模块)</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-comment">//入口从哪里开始编译打包</span><br>    <span class="hljs-attr">entry</span>:<span class="hljs-string">&quot;./src/main.js&quot;</span>,<br>    <span class="hljs-comment">//编译后的内容输出目录和文件名</span><br>    <span class="hljs-attr">output</span>:&#123;<br>        <span class="hljs-attr">path</span>:path.<span class="hljs-title function_">resolve</span>(__dirname,<span class="hljs-string">&quot;./dist&quot;</span>),<br>        <span class="hljs-attr">filename</span>:<span class="hljs-string">&quot;bundle.js&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">module</span>:&#123;<br>        <span class="hljs-attr">rules</span>:[<br>            &#123;<br>                <span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.css$/</span>,<span class="hljs-comment">//打包项目中所有css</span><br>                <span class="hljs-comment">//使用的loader是什么？</span><br>                <span class="hljs-attr">use</span>:[<span class="hljs-string">&#x27;style-loader&#x27;</span>,<span class="hljs-string">&#x27;css-loader&#x27;</span>]<br>            &#125;<br>        ]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">webpack -w<br><span class="hljs-comment">//实时监听并编译</span><br><br>webpack<br><span class="hljs-comment">//一次编译</span><br></code></pre></td></tr></table></figure><p>在src下创建style.css</p><p>在main.js第一行中引入style.css</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./style.CSS&#x27;</span>)<br></code></pre></td></tr></table></figure><p>编译命令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm run dev<br></code></pre></td></tr></table></figure><h3 id="UI框架了解"><a href="#UI框架了解" class="headerlink" title="UI框架了解"></a>UI框架了解</h3><p>vue-element-admin</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>git配置</title>
    <link href="https://bugdev.tk/post/59340/"/>
    <id>https://bugdev.tk/post/59340/</id>
    <published>2024-01-19T16:54:00.000Z</published>
    <updated>2024-06-11T06:28:58.251Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="git"><a href="#git" class="headerlink" title="git"></a><strong>git</strong></h1><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><h3 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h3><figure class="highlight sh"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs sh">git config --global user.name <span class="hljs-string">&quot;&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>初始化本地仓库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git init<br></code></pre></td></tr></table></figure><h3 id="添加暂存文件、commit"><a href="#添加暂存文件、commit" class="headerlink" title="添加暂存文件、commit"></a>添加暂存文件、commit</h3><p><strong>add 添加文件进入本地仓库的提交缓存</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git add filename<br></code></pre></td></tr></table></figure><p><strong>commit</strong>    </p><p><strong>-m 后跟本次提交注释</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git commit -m <span class="hljs-string">&quot;add new file \&quot;test.c\&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="改写提交信息"><a href="#改写提交信息" class="headerlink" title="改写提交信息"></a>改写提交信息</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git commit --amend<br></code></pre></td></tr></table></figure><p>输入命令后进入vi</p><h3 id="查看历史提交日志"><a href="#查看历史提交日志" class="headerlink" title="查看历史提交日志"></a>查看历史提交日志</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java开发-VUE3</title>
    <link href="https://bugdev.tk/post/59378/"/>
    <id>https://bugdev.tk/post/59378/</id>
    <published>2023-11-29T05:49:00.000Z</published>
    <updated>2024-06-11T06:26:37.904Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h1><p>Vue (发音为 /vjuː/，类似 <strong>view</strong>) 是一款用于构建用户界面的 JavaScript 框架。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。无论是简单还是复杂的界面，Vue 都可以胜任。</p><p>由尤雨溪开发</p><p>jQuery</p><p>angular</p><p>React</p><p>Vue</p><p>axio</p><h2 id="创建vue项目"><a href="#创建vue项目" class="headerlink" title="创建vue项目"></a>创建vue项目</h2><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs js">npm create vue@latest<br></code></pre></td></tr></table></figure><p>按提示进行install和编译</p><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><h3 id="文本插值"><a href="#文本插值" class="headerlink" title="文本插值"></a>文本插值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;h3&gt;&lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;&lt;/h3&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default&#123;<br>  data()&#123;<br>    return&#123;<br>      msg:&quot;hello vue&quot;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>使用JavaScript表达式时每个绑定仅支持单一表达式，即一段能够被求值的代码，即该代码能够在方法中被return出去</li><li>定义一个var，类似这种语句是不能够有效输出的</li></ul><h3 id="输出html标签"><a href="#输出html标签" class="headerlink" title="输出html标签"></a>输出html标签</h3><p>html标签在vue插值输出时不能够直接输出的，绑定输出标签时应该绑定v-html</p><p>假设有一个参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">myhtml:&quot;&lt;a herf=&quot;https:www.loh.com&quot;&gt;我的网站&lt;/a&gt;&quot;<br></code></pre></td></tr></table></figure><p>不能直接通过输出该标签</p><p>我们通过&lt;标签 v-html=”myhtml”&gt;&lt;/标签&gt;这种形式输出</p><h2 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h2><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>假如我们的html标签属性要从js中取值出来作为属性值，我们需要使用<code>v-bind:标签属性:&quot;js属性&quot;</code>进行取值</p><p>例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vu">&lt;script&gt;<br>export default&#123;<br>    data()&#123;<br>      return&#123;<br>        msg:&quot;active&quot;<br>      &#125;<br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div v-bind:class=&quot;msg&quot;&gt;这是一个div&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><ul><li>如果v-bind的值为null或者undefined，那么会在渲染时被移除</li></ul><p>简写</p><p>直接加：就行，不要加v-bind </p><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><p>v-if作为标签属性名，为真时启用内容，</p><p>v-else</p><p>v-else-if</p><p>v-show</p><ul><li>v-show基于css切换，无论显示与否都会渲染，根据display进行切换，开销较大</li></ul><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><p>v-for</p><p>数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">names</span>:[<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>]<br></code></pre></td></tr></table></figure><p>v-for=item in names遍历names中每一项</p><p>通过输出每一项</p><p>还可以遍历其他参数</p><p>v-for=”(value,item,index)” in names</p><p>分别取值，对象参数名，下标</p><p>通过key管理状态</p><p>vue按就地更新的策略更新v-for渲染的元素列表</p><p>为了防止重新渲染带来的性能开销，给标签加上唯一的key就可以在需要渲染时进行重新排序而不是重新渲染</p><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>v-on</p><p>用于监听dom事件</p><p>内联事件</p><p>v-on绑定一个动作，如click</p><p>方法事件</p><p>函数方法定义在method里面</p><p>v-on绑定一个方法，</p><h2 id="事件传参"><a href="#事件传参" class="headerlink" title="事件传参"></a>事件传参</h2><p>有时我们需要在内联事件处理器中访问原生 DOM 事件。你可以向该处理器方法传入一个特殊的 <code>$event</code> 变量，或者使用内联箭头函数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 使用特殊的 $event 变量 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;warn(&#x27;Form cannot be submitted yet.&#x27;, $event)&quot;</span>&gt;</span><br>  Submit<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 使用内联箭头函数 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;(event) =&gt; warn(&#x27;Form cannot be submitted yet.&#x27;, event)&quot;</span>&gt;</span><br>  Submit<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">methods: &#123;<br>  warn(message, event) &#123;<br>    // 这里可以访问 DOM 原生事件<br>    if (event) &#123;<br>      event.preventDefault()<br>    &#125;<br>    alert(message)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-comment">// 一个计算属性的 getter</span><br>    <span class="hljs-title function_">publishedBooksMessage</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// `this` 指向当前组件实例</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">author</span>.<span class="hljs-property">books</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> ? <span class="hljs-string">&#x27;Yes&#x27;</span> : <span class="hljs-string">&#x27;No&#x27;</span><br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>你可能注意到我们在表达式中像这样调用一个函数也会获得和计算属性相同的结果：</p><p>不同之处在于<strong>计算属性值会基于其响应式依赖被缓存</strong>。一个计算属性仅会在其响应式依赖更新时才重新计算。这意味着只要 <code>author.books</code> 不改变，无论多少次访问<code>publishedBooksMessage</code> 都会立即返回先前的计算结果，而不用重复执行 getter 函数。</p><h3 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h3><h3 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h3><h3 id="类与样式绑定"><a href="#类与样式绑定" class="headerlink" title="类与样式绑定"></a>类与样式绑定</h3><h3 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h3><h1 id="AXIOS网络通信"><a href="#AXIOS网络通信" class="headerlink" title="AXIOS网络通信"></a>AXIOS网络通信</h1><h2 id="mounted钩子函数"><a href="#mounted钩子函数" class="headerlink" title="mounted钩子函数"></a>mounted钩子函数</h2><p>绑定</p><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽 "></a>插槽 <slot></slot></h2><p>开发使用vue-cli（2.0版本）</p><h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><p>安装vue-router</p><p>安装saas加载器</p><p>通过前段路由到指定页面</p><p>导入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">//导入vue-router组件<br>import VUE from &#x27;vue&#x27;<br>import vueRoter from &#x27;vue-router&#x27;<br><br>//导入自定义组件<br>import Content from &#x27;..\component\Content&#x27;<br><br>//安装路由<br>Vue.use(vueRoter);<br><br>//配置导出路由<br>export default new vueRoter(&#123;<br>routers:[<br>&#123;<br>//跳转路径<br>path：&#x27;/content&#x27;,<br>name:&#x27;content&#x27;,<br>//定义要跳转的组件<br>component:Content<br>&#125;<br>]<br>&#125;)<br></code></pre></td></tr></table></figure><p>在main.js里导入路由的配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">//如果是index的话不用写全,vue会自动导入文件<br>import router from &#x27;./router&#x27;<br></code></pre></td></tr></table></figure><p>在app.vue里使用路由页</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;router-link to=&quot;/main&quot;&gt;&lt;/router-link&gt;<br>&lt;router-link to=&quot;/content&quot;&gt;&lt;/router-link&gt;<br></code></pre></td></tr></table></figure><h2 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h2><p>在导出路由是写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">Children:[<br>&#123;<br>//跳转路径<br>path：&#x27;/content&#x27;,<br>name:&#x27;content&#x27;,<br>//定义要跳转的组件<br>component:main<br>&#125;,<br>&#123;<br>//跳转路径<br>path：&#x27;/content&#x27;,<br>name:&#x27;content&#x27;,<br>//定义要跳转的组件<br>component:Content<br>&#125;<br>]<br></code></pre></td></tr></table></figure><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p>router-link标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">//路由连接的name 属性绑定组件,并添加参数params,注意传参需要v-bind<br>&lt;router-link :to=&quot;&#123;name:&#x27;content&#x27;,params:&#123;id:1&#125;&#125;&quot;&gt;content&lt;/router-link&gt;<br></code></pre></td></tr></table></figure><p>前端通过获取参数</p><p>可以通过props解耦</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">C<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="https://bugdev.tk/post/22648/"/>
    <id>https://bugdev.tk/post/22648/</id>
    <published>2023-10-12T16:56:00.000Z</published>
    <updated>2024-06-11T06:32:01.738Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs wiki">#后加上空格以及你想输入的标题屋内在,多级标题,输入几个#为几级标题<br></code></pre></td></tr></table></figure><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><strong>粗体</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs wiki">粗体,在字体两边加上**号<br></code></pre></td></tr></table></figure><p><em>斜体</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs wiki">斜体,在字体两边加上单个*号<br></code></pre></td></tr></table></figure><p><em><strong>斜体加粗</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs wiki">斜体加粗,在字体两边加三个*号<br></code></pre></td></tr></table></figure><p><del>划线</del></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">划线字体，在字体两边加上两个~号<br></code></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote><p>引用一段话</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="language-bash">号后加上一段链接或文本</span><br></code></pre></td></tr></table></figure><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><hr><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">三个<span class="hljs-comment">---或三个***0</span><br></code></pre></td></tr></table></figure><hr><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">!<span class="hljs-selector-attr">[]</span>&#123;&#125;,<span class="hljs-selector-attr">[]</span>内加上图片注释，()则为图片引用绝对或相对链接，本地或网络都可<br></code></pre></td></tr></table></figure><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p><a href="https://www.bilibili.com/video/BV12J41137hu/?p=6&vd_source=2c5e5f318c3cc67345e3b3f5736f0106">超链接</a></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">()<span class="hljs-selector-attr">[]</span>,()里加链接名，<span class="hljs-selector-attr">[]</span>号内加链接<br></code></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ol><li>a</li><li>b</li><li>c</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">有序列表，输入1后加分割符如.或、等，回车即可<br></code></pre></td></tr></table></figure><ul><li><p>a</p></li><li><p>b</p></li><li><p>c</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">无序列表为-号后加空格<br></code></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs wiki">代码框即连续输入三个`号,再加上xx语言就是要输入xx类型代码，如```java,回车<br></code></pre></td></tr></table></figure><p><code>单行代码</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs wiki">`这里输入你要写的代码`<br></code></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th>a</th><th>b</th><th>c</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>3</td></tr></tbody></table><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">源代码如下<br>|<span class="hljs-string">a</span>|<span class="hljs-string">b</span>|<span class="hljs-string">c</span>|<br>|<span class="hljs-string">-</span>|<span class="hljs-string">-</span>|<span class="hljs-string">-</span>|<br>|<span class="hljs-string">1</span>|<span class="hljs-string">2</span>|<span class="hljs-string">3</span>|<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>tomcat配置</title>
    <link href="https://bugdev.tk/post/24595/"/>
    <id>https://bugdev.tk/post/24595/</id>
    <published>2023-06-10T17:11:00.000Z</published>
    <updated>2024-06-11T06:32:46.911Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="tomcat配置"><a href="#tomcat配置" class="headerlink" title="tomcat配置"></a>tomcat配置</h1><p>配置环境变量<br>依次顺序点击：此电脑(右键)——属性——高级系统设置——高级——环境变量——系统变量，</p><p>第一步，在系统变量中选择新增</p><p>变量名：CATALINA_HOME</p><p>变量值（文件解压位置）：</p><p>C:\Program Files\Apache Software Foundation\Tomcat 8.5</p><p>第二步，选择系统变量中的path，选择编辑，添加：</p><p>%CATALINA_HOME%\bin\</p><h2 id="配置中文"><a href="#配置中文" class="headerlink" title="配置中文"></a>配置中文</h2><p>tomcat安装目录\conf 路径下logging.properties第47行UTF-8改为GBK</p><p>原因为window默认字符编码为GBK</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>maven配置</title>
    <link href="https://bugdev.tk/post/62752/"/>
    <id>https://bugdev.tk/post/62752/</id>
    <published>2023-06-01T17:10:00.000Z</published>
    <updated>2024-06-11T06:34:10.880Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="maven配置jdk版本"><a href="#maven配置jdk版本" class="headerlink" title="maven配置jdk版本"></a>maven配置jdk版本</h1><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 增加maven编译插件，设置编译版本，防止刷新后变为jdk5--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>jdk-20<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>jdk-20<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="资源导出问题，找不到资源，maven"><a href="#资源导出问题，找不到资源，maven" class="headerlink" title="资源导出问题，找不到资源，maven"></a>资源导出问题，找不到资源，maven</h2><p>java.lang.ExceptionInInitializerError，此标签放在build标签中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resource<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="web-xml-4-0空文件"><a href="#web-xml-4-0空文件" class="headerlink" title="web.xml 4.0空文件"></a>web.xml 4.0空文件</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">display-name</span>&gt;</span>Archetype Created Web Application<span class="hljs-tag">&lt;/<span class="hljs-name">display-name</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaWeb开发</title>
    <link href="https://bugdev.tk/post/7416/"/>
    <id>https://bugdev.tk/post/7416/</id>
    <published>2023-05-16T05:18:00.000Z</published>
    <updated>2024-06-11T06:34:48.206Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><p>web开发</p><ul><li><p>网页开发</p></li><li><p>静态web</p><ul><li>html，css</li></ul></li><li><p>动态web</p><ul><li>数据库交互</li><li>常用技术栈：servlet，ASP，PHP</li></ul></li></ul><p>在java中，动态web资源开发的技术统称为JavaWeb</p><h2 id="web应用程序"><a href="#web应用程序" class="headerlink" title="web应用程序"></a>web应用程序</h2><p>是一种可以通过Web访问的应用程序</p><p><img src="/post/7416/image-20230608144739868.png"></p><h3 id="静态web"><a href="#静态web" class="headerlink" title="静态web"></a>静态web</h3><p><img src="/post/7416/image-20230608145235269.png"></p><h3 id="动态web"><a href="#动态web" class="headerlink" title="动态web"></a>动态web</h3><ul><li>数据持久化</li><li>可以做用户差异化</li></ul><h2 id="web服务器"><a href="#web服务器" class="headerlink" title="web服务器"></a>web服务器</h2><p>ASP</p><ul><li><em>ASP</em>即Active Server Pages，是Microsoft公司开发的服务器端脚本环境，可用来创建动态交互式网页并建立强大的web应用程序。</li><li>在html中嵌入VB脚本，ASP+COM;</li><li>在ASP开发，基本页面代码量大，逻辑混乱</li><li>C#</li><li>IIS</li></ul><p><img src="/post/7416/image-20230608145951236.png"></p><p><img src="/post/7416/image-20230608150032101.png"></p><p>JSP/Servlet</p><p><img src="/post/7416/image-20230608150218798.png"></p><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><p><img src="/post/7416/image-20230608190051082.png"></p><p><strong>启动关闭</strong></p><p><img src="/post/7416/image-20230608190608045.png"></p><p><img src="/post/7416/image-20230608191412014.png"></p><h3 id="dns查询步骤"><a href="#dns查询步骤" class="headerlink" title="dns查询步骤"></a>dns查询步骤</h3><p><img src="/post/7416/image-20230608191746075.png"></p><h3 id="网站结构"><a href="#网站结构" class="headerlink" title="网站结构"></a>网站结构</h3><p><img src="/post/7416/image-20230608191930998.png"></p><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>http协议簇</p><p><img src="/post/7416/image-20230615085747001.png"></p><h3 id="1、HTTP简介"><a href="#1、HTTP简介" class="headerlink" title="1、HTTP简介"></a>1、HTTP简介</h3><p>HTTP(超文本传输协议),它是一种请求/响应式的协议，客户端与服务器建立连接后，就可以向服务器发送请求，这种请求被称为HTTP请求，服务器端收到请求后会做出响应，称为HTTP响应，客户端与服务器端在HTTP下的交互过程如图所示。<br><img src="/post/7416/kuangstudyd0f44252-a169-40f7-9b0a-58cf11d003c5.png" alt="img"></p><h3 id="2、HTTP1-0和HTTP2-0"><a href="#2、HTTP1-0和HTTP2-0" class="headerlink" title="2、HTTP1.0和HTTP2.0"></a>2、HTTP1.0和HTTP2.0</h3><p>(1) HTTP1.0<br>客户端与服务器连接后，只能发送一个请求，断开连接。<br>(2) HTTP2.0<br>客户端与服务器连接后，发送N个请求，断开连接。</p><h3 id="3、HTTP请求消息"><a href="#3、HTTP请求消息" class="headerlink" title="3、HTTP请求消息"></a>3、HTTP请求消息</h3><p>一个完整的请求消息是由<strong>请求行</strong>，<strong>请求头</strong>和<strong>实体</strong>三部分组成，每部分的功能各不相同。</p><h4 id="1、请求行"><a href="#1、请求行" class="headerlink" title="1、请求行"></a>1、请求行</h4><p>HTTP请求行包括几个部分，请求方式，资源路径…<br>HTTP的8种请求方式：</p><ul><li><p>GET</p></li><li><p>POST</p></li><li><p>HEAD</p></li><li><p>PUT</p></li><li><p>DELETE</p></li><li><p>TRACE</p></li><li><p>CONNECT</p></li><li><p>OPTIONS<br>其中最常用的两种方式是POST和GET</p></li><li><p>GET</p><ul><li><p>浏览器请求的URL中的参数部分，在浏览器生产的请求消息中，参数部分将附加到资源路径的后面。</p><blockquote><p><a href="http://www.myform.com/htmlForm?name=lee&amp;pwd=123456">http://www.myform.com/htmlForm?name=lee&amp;pwd=123456</a></p></blockquote></li><li><p>转送数据量有限,不能超过2KB。</p></li><li><p>不安全</p></li><li><p>高效</p></li></ul></li><li><p>POST</p><ul><li>传输数据大小没有限制</li><li>安全</li><li>不会在URL地址栏显示参数</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs java">GET在浏览器回退时是无害的，而POST会再次提交请求。<br>●<br>GET产生的URL地址可以被Bookmark，而POST不可以。<br>●<br>GET请求会被浏览器主动cache，而POST不会，除非手动设置。<br>●<br>GET请求只能进行url编码，而POST支持多种编码方式。<br>●<br>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。<br>●<br>GET请求在URL中传送的参数是有长度限制的，而POST么有。<br>●<br>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。<br>●<br>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。<br>●<br>GET参数通过URL传递，POST放在Request body中。<br></code></pre></td></tr></table></figure><h4 id="2、请求消息头"><a href="#2、请求消息头" class="headerlink" title="2、请求消息头"></a>2、请求消息头</h4><p>请求消息头主要用于向服务器端传递附加消息，例如，客户端可以接收的数据类型、压缩方法、语言以及发送请求的超链接所属页面的URL地址等消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Accept: 告诉浏览器，它所支持的数据类型<br>Accept-Encoding: 支持那种编码格式<br>Accept-Language: 指定客户端期望服务器返回哪个国家语言文档<br>Host:指定资源所在的主机名和端口号<br>Referer:常被网站管理人员用来查看网站的访问者是如何导航进入网站的。也可以用于网站的防盗链<br>Authorization:Proxy-Authorization:<span class="hljs-keyword">if</span>-Match:<span class="hljs-keyword">if</span>-Modified-Since:Range:<span class="hljs-keyword">if</span>-RangeMax-Forward:User-Agent:<br></code></pre></td></tr></table></figure><h3 id="4、响应消息"><a href="#4、响应消息" class="headerlink" title="4、响应消息"></a>4、响应消息</h3><p>当服务器收到浏览器的请求后，会回送响应给客户端。一个完整的响应消息主要包括<strong>响应状态行</strong>、<strong>响应消息头</strong>和<strong>实体内容</strong></p><h4 id="1、响应状态行"><a href="#1、响应状态行" class="headerlink" title="1、响应状态行"></a>1、响应状态行</h4><p>它包括三个部分，分别是HTTP版本，表示成功还是错误的状态码和对状态码进行描述的文本信息<br>例如：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">HTTP</span>/<span class="hljs-number">1</span>.<span class="hljs-number">1</span> <span class="hljs-number">200</span> OK<br></code></pre></td></tr></table></figure><blockquote><p>响应状态码</p></blockquote><p>状态码由3位数组成，第1个数定义了响应的类别，后面两位没有具体的分类</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1XX</span>:表示请求已接收，需要继续处理<span class="hljs-number">2</span>XX：表示请求已成功被服务器接收、理解，并接收<span class="hljs-number">3</span>XX:请求重定向<span class="hljs-number">4</span>XX：客户端的请求有错误<span class="hljs-number">5</span>XX:服务器端出现错误<br></code></pre></td></tr></table></figure><p>400(错误请求)服务器不理解请求的语法 参数错误<br>401表示发送的请求需要有通过HTTP认证的认证信息 没有认证<br>403(禁止)服务器拒绝请求    无权限<br>404(未找到)服务器找不到请求网页 找不到<br>500 服务器错误<br>503 表示服务器处于停机维护或超负载，无法处理请求</p><h4 id="2、响应消息头"><a href="#2、响应消息头" class="headerlink" title="2、响应消息头"></a>2、响应消息头</h4><p>向客户端传递附加消息，包括服务程序名、被请求资源需要的认证方式、客户端请求资源的最后修改时间、重定向地址等消息。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Location</span>:通知客户端获取请求文档新地址<span class="hljs-keyword">Refresh</span>:告诉浏览器自动刷新的时间，以秒为单位<span class="hljs-keyword">Connection</span>:告诉浏览器，请求完成是断开还是保证连接<br></code></pre></td></tr></table></figure><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><h3 id="架构管理工具"><a href="#架构管理工具" class="headerlink" title="架构管理工具"></a>架构管理工具</h3><p>核心思想：约定大于配置</p><ul><li>遵守约束，不要违反</li></ul><p>Maven会约束代码规范</p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p><img src="/post/7416/image-20230615092710192.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;settings xmlns=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span><br>          xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>          xsi:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;<br>  &lt;!-- localRepository<br>   | The path to the local repository maven will use to store artifacts.<br>   | Default: $&#123;user.home&#125;/.m2/repository  localRepository 指定包下载的位置<br>  --&gt;<br>  &lt;!-- 本地仓库位置 --&gt;<br>  &lt;localRepository&gt;D:\java\m2&lt;/localRepository&gt;<br>  ...<br>  &lt;!-- 远程仓库位置 --&gt;<br>   &lt;mirror&gt;  <br>      &lt;id&gt;alimaven&lt;/id&gt;  <br>      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;  <br>      &lt;name&gt;aliyun maven&lt;/name&gt;  <br>      &lt;url&gt;http:<span class="hljs-comment">//maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;  </span><br>   &lt;/mirror&gt;<br></code></pre></td></tr></table></figure><h3 id="镜像配置"><a href="#镜像配置" class="headerlink" title="镜像配置"></a>镜像配置</h3><p><img src="/post/7416/image-20230615092836385.png"></p><p><img src="/post/7416/image-20230626193843695.png"></p><h3 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h3><p><img src="/post/7416/image-20230615093057480.png"></p><h3 id="IDEA项目创建"><a href="#IDEA项目创建" class="headerlink" title="IDEA项目创建"></a>IDEA项目创建</h3><p><strong>创建项目</strong></p><p>可以使用idea开发工具构建，创建maven工程/web工程</p><p><img src="/post/7416/kuangstudyad0dba3e-7faf-4da6-a0be-0c4b04f5e7cf.png"></p><p>创建完，需要配置坐标pom.xml文件</p><ul><li><strong>关于idea默认使用自带的home变量</strong></li></ul><p><img src="/post/7416/image-20230616194338420.png"></p><p><img src="/post/7416/image-20230616194443163.png"></p><p>结束</p><p>一个干净的maven项目</p><p><img src="/post/7416/image-20230616194651076.png"></p><p>标记文件夹</p><p><img src="/post/7416/image-20230616194823840.png"></p><p>或者在project struct选择目录标记</p><h3 id="配置Tomcat"><a href="#配置Tomcat" class="headerlink" title="配置Tomcat"></a>配置Tomcat</h3><h4 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h4><p><img src="/post/7416/image-20230706171426830.png" alt=" "></p><p><img src="/post/7416/image-20230616195252837.png"></p><h4 id="解决警告"><a href="#解决警告" class="headerlink" title="解决警告"></a>解决警告</h4><p><img src="/post/7416/image-20230616195418169.png"></p><p><img src="/post/7416/image-20230616195530933.png"></p><p>maven命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">mvn clean   # 清理编译项目<br>mvn compile # 编译项目<br>mvn test    # 测试项目<br>mvn <span class="hljs-keyword">package</span> # 项目打包<br>mvn install # 安装到仓库中<br></code></pre></td></tr></table></figure><h3 id="pom配置文件"><a href="#pom配置文件" class="headerlink" title="pom配置文件"></a>pom配置文件</h3><p><img src="/post/7416/image-20230616195955436.png"></p><h4 id="maven-jar导入"><a href="#maven-jar导入" class="headerlink" title="maven jar导入"></a>maven jar导入</h4><p>搜索maven仓库，例如spring，并复制粘贴dependency，会自动导入jar以及所依赖的jar包</p><p><img src="/post/7416/image-20230616200718471.png"></p><h4 id="资源导出问题"><a href="#资源导出问题" class="headerlink" title="资源导出问题"></a>资源导出问题</h4><p>搜索maven资源导出问题，copybuild代码到pom里面</p><p><img src="/post/7416/image-20230616200942040.png"></p><h4 id="maven生成目录树"><a href="#maven生成目录树" class="headerlink" title="maven生成目录树"></a>maven生成目录树</h4><p><img src="/post/7416/image-20230706172506517.png"></p><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h3 id="Servlet的工作过程"><a href="#Servlet的工作过程" class="headerlink" title="Servlet的工作过程"></a>Servlet的工作过程</h3><p>  当用户通过 URL 发出一个请求时，这些 Java servlet 类就将之转换成一个 HttpServletRequest，并发送给 URL 所指向的目标。当服务器端完成其工作时，Java 运行时环境（JRE）就将结果包装在一个 HttpServletResponse 中，然后将原 HTTP 响应送回给发出该请求的客户机。</p><p>  在与 Web 应用程序进行交互时，通常会发出多个请求并获得多个响应。所有这些都是在一个会话语境中，Java 语言将之包装在一个 HttpSession 对象中。在处理响应时，您可以访问该对象，并在创建响应时向其添加事件。它提供了一些跨请求的语境。</p><h3 id="Servlet工作原理及架构"><a href="#Servlet工作原理及架构" class="headerlink" title="Servlet工作原理及架构"></a>Servlet工作原理及架构</h3><p><img src="/post/7416/image-20230719154042083.png"></p><ul><li><p>servlet具体的实现类用我们自己编写</p><ul><li><p>接收并处理请求</p></li><li><p>返回响应信息</p></li></ul></li></ul><p>当Web服务器接收到一个HTTP请求时，它会先判断请求内容——如果是静态网页数据，Web服务器将会自行处理，然后产生响应信息；如果牵涉到动态数据，Web服务器会将请求转交给Servlet容器。此时Servlet容器会找到对应的处理该请求的Servlet实例来处理，结果会送回Web服务器，再由Web服务器传回用户端</p><p>针对同一个Servlet，Servlet容器会在第一次收到http请求时建立一个Servlet实例，然后启动一个线程。第二次收到http请求时，Servlet容器无须建立相同的Servlet实例，而是启动第二个线程来服务客户端请求。所以多线程方式不但可以提高Web应用程序的执行效率，也可以降低Web服务器的系统负担</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml">1. 客户端 向Servlet容器（Tomcat）发出Http请求；<br><br>2. Servlet容器接收客户端的请求；<br><br>3. Servlet容器创建一个HttpRequest对象，将客户端请求的信息封装到这个对象中；<br><br>4. Servlet容器创建一个HttpResponse对象；<br><br>5. Servlet容器调用HttpServlet对象的service方法，把HttpRequest对象与HttpResponse对象作为参数传给 HttpServlet对象；<br><br>6. HttpServlet调用HttpRequest对象的有关方法，获取Http请求信息；<br><br>7. HttpServlet调用HttpResponse对象的有关方法，生成响应数据；<br><br>8. Servlet容器把HttpServlet的响应结果传给客户端；<br></code></pre></td></tr></table></figure><h3 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h3><p><img src="/post/7416/image-20230809181826065.png"></p><p><img src="/post/7416/image-20230809181900988.png"></p><h3 id="Http-Servlet实现"><a href="#Http-Servlet实现" class="headerlink" title="Http Servlet实现"></a>Http Servlet实现</h3><ul><li><p>继承HttpServlet类  </p><ul><li>重写doget（）方法</li><li>重写dopost（）方法</li></ul></li><li><p>继承GennerServlet类</p></li><li><p>实现Servlet类</p></li></ul><h3 id="web-xml配置"><a href="#web-xml配置" class="headerlink" title="web.xml配置"></a>web.xml配置</h3><p>servlet标签和servlet mapping成对出现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.loh.hservlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>servlet标签处理当前请求需要使用哪个类进行处理</li><li>mapping指定浏览器的映射路径</li></ul><h3 id="mapping问题"><a href="#mapping问题" class="headerlink" title="mapping问题"></a>mapping问题</h3><ol><li><p>一个servlet可指定一个映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>一个servlet可指定多个映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello2<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello3<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>一个servlet可指定通用映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>可自定义指定前缀、后缀等</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*.do<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>example通配.do</li></ul></li></ol><p>指定了固定映射的mapping优先级最高，当找不到时会走默认处理请求</p><h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2><p>web容器在启动时会为每个web程序都创建一个对应的</p><p>ServletContext对象，代表了当前的web应用</p><p><img src="/post/7416/JavaWeb%E5%BC%80%E5%8F%91%5Cimage-20230725075530814.png"></p><p>为了解决Servlet程序直接进行IO操作导致效率低下的原因，ServletContext对象也能进行IO</p><ul><li><p>主要用于多个Servlet通过ServletContext对象实现数据共享。</p></li><li><p>获取Servlet的初始化参数</p></li></ul><h3 id="1-共享数据"><a href="#1-共享数据" class="headerlink" title="1.共享数据"></a>1.共享数据</h3><p>提交数据类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();<br><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;loh&quot;</span>;<br>servletContext.setAttribute(<span class="hljs-string">&quot;username&quot;</span>,username);<br></code></pre></td></tr></table></figure><p>获取数据并输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();<br><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> (String) servletContext.getAttribute(<span class="hljs-string">&quot;username&quot;</span>);<br><br>resp.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);<br>resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>resp.getWriter().print(username);<br></code></pre></td></tr></table></figure><h3 id="2-获取web参数"><a href="#2-获取web参数" class="headerlink" title="2.获取web参数"></a>2.获取web参数</h3><p><strong>web.xml配置参数</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>url<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>通过字段获取参数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ServletContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();<br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> context.getInitParameter(<span class="hljs-string">&quot;url&quot;</span>);<br><br><span class="hljs-type">PrintWriter</span> <span class="hljs-variable">printWriter</span> <span class="hljs-operator">=</span> resp.getWriter();<br>printWriter.print(url);<br></code></pre></td></tr></table></figure><h3 id="3-请求转发"><a href="#3-请求转发" class="headerlink" title="3.请求转发"></a>3.请求转发</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();<br><span class="hljs-comment">//        简短代码</span><br><span class="hljs-comment">//        servletContext.getRequestDispatcher(&quot;/hello&quot;).forward(req,resp);</span><br><span class="hljs-type">RequestDispatcher</span> <span class="hljs-variable">requestDispatcher</span> <span class="hljs-operator">=</span> servletContext.getRequestDispatcher(<span class="hljs-string">&quot;/hello&quot;</span>);<span class="hljs-comment">//转发的请求路径</span><br>requestDispatcher.forward(req,resp);<span class="hljs-comment">//调用forward实现请求转发</span><br></code></pre></td></tr></table></figure><h3 id="4-资源读取"><a href="#4-资源读取" class="headerlink" title="4.资源读取"></a>4.资源读取</h3><p><strong>resource文件夹新建properties</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">username</span>=<span class="hljs-string">loh</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure><p><strong>处理类从文件流中读取</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        获取Servletcontext读取资源转换为输入流</span><br><span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext().getResourceAsStream(<span class="hljs-string">&quot;/WEB-INF/classes/db.properties&quot;</span>);<br><br>        <br><span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>prop.load(inputStream);<br><span class="hljs-comment">//        properties对象从输入流中读取并输出</span><br><span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span>prop.getProperty(<span class="hljs-string">&quot;username&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span>prop.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>resp.getWriter().print(user+<span class="hljs-string">&quot;:&quot;</span>+pwd);<br></code></pre></td></tr></table></figure><h2 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h2><p>我们再前面已经学过ServletContext(代表整个web应用的一个东西）,我们了解到Servlet里面最重要的方法为service方法，service方法里面会有两个参数，为HttpServletRequest（请求）,HttpServletResponse(响应）</p><p>web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的HttpServletResponse对象；</p><p>如果要获取客户端请求过来的参数：找HttpServletRequest</p><p>如果要给客户端响应一些信息：找HttpServletResponse</p><ul><li>该类继承ServletResponse</li></ul><h3 id="负责向浏览器发送数据的方法"><a href="#负责向浏览器发送数据的方法" class="headerlink" title="负责向浏览器发送数据的方法"></a>负责向浏览器发送数据的方法</h3><p>（往外写出的方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">ServletOutputStream <span class="hljs-title function_">getOutputStream</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException;  <span class="hljs-comment">//写流用这个</span><br> <br>PrintWriter <span class="hljs-title function_">getWriter</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException;  <span class="hljs-comment">//写中文用这个，如果用这个写一些东西的时候，会造成字符串损坏或者丢失</span><br></code></pre></td></tr></table></figure><p>负责向浏览器发送响应头的方法</p><p>这是ServletResponse里面的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">setCharacterEncoding</span><span class="hljs-params">(String var1)</span>; <span class="hljs-comment">//设置响应的编码</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setContentLength</span><span class="hljs-params">(<span class="hljs-type">int</span> var1)</span>;   <span class="hljs-comment">//设置响应的字符串长度</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setContentLengthLong</span><span class="hljs-params">(<span class="hljs-type">long</span> var1)</span>;   <span class="hljs-comment">//设置长度</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setContentType</span><span class="hljs-params">(String var1)</span>;   <span class="hljs-comment">//设置类型</span><br></code></pre></td></tr></table></figure><p>这是HttpServletResponse里面的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">setDateHeader</span><span class="hljs-params">(String var1, <span class="hljs-type">long</span> var2)</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">addDateHeader</span><span class="hljs-params">(String var1, <span class="hljs-type">long</span> var2)</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setHeader</span><span class="hljs-params">(String var1, String var2)</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">addHeader</span><span class="hljs-params">(String var1, String var2)</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setIntHeader</span><span class="hljs-params">(String var1, <span class="hljs-type">int</span> var2)</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">addIntHeader</span><span class="hljs-params">(String var1, <span class="hljs-type">int</span> var2)</span>;<br></code></pre></td></tr></table></figure><p>响应状态码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">SC_CONTINUE</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;  <span class="hljs-comment">//100是服务器接收到客户端发来的请求的初始部分，并且请客户端继续发送</span><br><span class="hljs-type">int</span> <span class="hljs-variable">SC_OK</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;   <span class="hljs-comment">//状态ok</span><br><span class="hljs-type">int</span> <span class="hljs-variable">SC_NOT_FOUND</span> <span class="hljs-operator">=</span> <span class="hljs-number">404</span>;   <span class="hljs-comment">//没有找到</span><br><span class="hljs-type">int</span> <span class="hljs-variable">SC_INTERNAL_SERVER_ERROR</span> <span class="hljs-operator">=</span> <span class="hljs-number">500</span>;  <span class="hljs-comment">//服务器端错误</span><br><span class="hljs-type">int</span> <span class="hljs-variable">SC_BAD_GATEWAY</span> <span class="hljs-operator">=</span> <span class="hljs-number">502</span>;   <span class="hljs-comment">//网关出现了问题</span><br></code></pre></td></tr></table></figure><h3 id="Response响应下载"><a href="#Response响应下载" class="headerlink" title="Response响应下载"></a>Response响应下载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        获取下载文件路径</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">resourcePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;G:\\Loh\\Code\\javaweb-maven\\ServletResponse\\src\\main\\resources\\2.png&quot;</span>;<br>        System.out.println(<span class="hljs-string">&quot;下载文件路径：&quot;</span>+resourcePath);<br><span class="hljs-comment">//        下载的文件名是什么</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> resourcePath.substring(resourcePath.lastIndexOf(<span class="hljs-string">&quot;\\&quot;</span>)+<span class="hljs-number">1</span>);<br><span class="hljs-comment">//        头部声明，通知浏览器在下载文件,中文文件名使用URLEncoder.encode编码防止乱码</span><br>        resp.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>,<span class="hljs-string">&quot;attachment;fileName=&quot;</span>+fileName);<br><span class="hljs-comment">//        获取下载文件的输入流</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(resourcePath);<br><span class="hljs-comment">//       创建缓冲区</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-comment">//        获取输出流对象</span><br>        <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> resp.getOutputStream();<br><span class="hljs-comment">//        写入缓冲</span><br>        <span class="hljs-keyword">while</span> ((len = in.read(buffer))!= -<span class="hljs-number">1</span>)&#123;<br>            out.write(buffer,<span class="hljs-number">0</span>,len);<br>        &#125;<br><span class="hljs-comment">//        关闭流</span><br>        in.close();<br>        out.close();<br></code></pre></td></tr></table></figure><h3 id="转发和重定向的区别"><a href="#转发和重定向的区别" class="headerlink" title="转发和重定向的区别"></a>转发和重定向的区别</h3><p><img src="/post/7416/image-20230809182207822.png"></p><h2 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h2><p>方法</p><p><img src="/post/7416/JavaWeb%E5%BC%80%E5%8F%91%5Cimage-20230809181515064.png"></p><h3 id="验证码实现"><a href="#验证码实现" class="headerlink" title="验证码实现"></a>验证码实现</h3><p>实现思路</p><ul><li>画笔绘制背景</li><li>画笔调用随机数生成方法生成随机数字验证码</li><li>浏览器参数设置绘制</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//浏览器5秒刷新一次</span><br>        resp.setHeader(<span class="hljs-string">&quot;refresh&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>);<br><br>        <span class="hljs-comment">//在内存中创建图片</span><br>        <span class="hljs-type">BufferedImage</span> <span class="hljs-variable">Image</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedImage</span>(<span class="hljs-number">80</span>, <span class="hljs-number">20</span>, BufferedImage.TYPE_INT_RGB);<br>        <span class="hljs-comment">//获取画笔</span><br>        <span class="hljs-type">Graphics2D</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> Image.createGraphics();<br>        <span class="hljs-comment">//设置画笔颜色</span><br>        g.setColor(Color.WHITE);<br>        <span class="hljs-comment">//填充背景颜色</span><br>        g.fillRect(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">80</span>,<span class="hljs-number">20</span>);<br><br>        <span class="hljs-comment">//设置画笔颜色</span><br>        g.setColor(Color.black);<br><br>        <span class="hljs-comment">//设置画笔字体、粗细、字号</span><br>        g.setFont(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Font</span>(<span class="hljs-string">&quot;宋体&quot;</span>,Font.BOLD,<span class="hljs-number">20</span>));<br><br>        <span class="hljs-comment">//画笔绘制，绘制坐标</span><br>        g.drawString(makeNum(),<span class="hljs-number">0</span>,<span class="hljs-number">20</span>);<br><br>        <span class="hljs-comment">//浏览器响应类型参数设置</span><br>        resp.setContentType(<span class="hljs-string">&quot;image/jpeg&quot;</span>);<br>        <span class="hljs-comment">//浏览器响应的过期时间,立即过期</span><br>        resp.setDateHeader(<span class="hljs-string">&quot;expires&quot;</span>,-<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//响应，缓存控制为不缓存</span><br>        resp.setHeader(<span class="hljs-string">&quot;Cache-Control&quot;</span>,<span class="hljs-string">&quot;no-cache&quot;</span>);<br>        <span class="hljs-comment">//不缓存</span><br>        resp.setHeader(<span class="hljs-string">&quot;Pragma&quot;</span>,<span class="hljs-string">&quot;no-cache&quot;</span>);<br><br>        <span class="hljs-comment">//IO写图,格式化类型,从响应对象中输出</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">jpg_out</span> <span class="hljs-operator">=</span> ImageIO.write(Image, <span class="hljs-string">&quot;jpg&quot;</span>, resp.getOutputStream());<br>    &#125;<br>    <br>        <span class="hljs-comment">//随机数生成</span><br>        <span class="hljs-keyword">private</span> String <span class="hljs-title function_">makeNum</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> random.nextInt(<span class="hljs-number">9999999</span>)+<span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">stringBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>            <span class="hljs-comment">//随机数不足7位时for循环遍历补足</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>-num.length(); i++) &#123;<br>                stringBuffer.append(<span class="hljs-string">&quot;0&quot;</span>);<br>            &#125;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> stringBuffer.toString() + num;<br>            <span class="hljs-comment">//返回</span><br>            <span class="hljs-keyword">return</span>  num;<br>        &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doGet(req, resp);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="表单参数获取"><a href="#表单参数获取" class="headerlink" title="表单参数获取"></a>表单参数获取</h3><p>前端提交参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;body&gt;<br>&lt;h1&gt;login&lt;/h1&gt;<br>&lt;div&gt;<br>   &lt;%--   当前项目路径获取--%&gt;<br>    &lt;form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;login&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>        name:&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>&gt;&lt;br&gt;<br>        password:&lt;input type=<span class="hljs-string">&quot;password&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span>&gt;&lt;br&gt;<br>        hobby:<br>        &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> name=<span class="hljs-string">&quot;hobby&quot;</span> value=<span class="hljs-string">&quot;code&quot;</span>&gt;code<br>        &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> name=<span class="hljs-string">&quot;hobby&quot;</span> value=<span class="hljs-string">&quot;sing&quot;</span>&gt;sing<br>        &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> name=<span class="hljs-string">&quot;hobby&quot;</span> value=<span class="hljs-string">&quot;watch movie&quot;</span>&gt;movie<br>        &lt;br&gt;<br>        &lt;input type=<span class="hljs-string">&quot;submit&quot;</span>&gt;<br>        &lt;input type=<span class="hljs-string">&quot;reset&quot;</span>&gt;<br>    &lt;/form&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p>后端获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span>req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span>req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>    System.out.println(name);<br>    System.out.println(pwd);<br><br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    doGet(req, resp);<br>&#125;<br></code></pre></td></tr></table></figure><p>请求转发</p><p><img src="/post/7416/JavaWeb%E5%BC%80%E5%8F%91%5Cimage-20230807134721685.png"></p><p><img src="/post/7416/JavaWeb%E5%BC%80%E5%8F%91%5Cimage-20230807134942000.png"></p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        设置响应和查询编码</span><br>        req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br><br><span class="hljs-comment">//        获取响应输出流</span><br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> resp.getWriter();<br><span class="hljs-comment">//        获取cookie</span><br>        Cookie[] cookies = req.getCookies();<br><span class="hljs-comment">//        从cookie中获取参数</span><br>        <span class="hljs-keyword">if</span> (cookies != <span class="hljs-literal">null</span>)&#123;<br>            out.print(<span class="hljs-string">&quot;上次访问时间&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; cookies.length; i++) &#123;<br>                <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> cookies[i];<br><br>                <span class="hljs-keyword">if</span> (cookie.getName().equals(<span class="hljs-string">&quot;lastLoginTime&quot;</span>))&#123;<br><br>                    <span class="hljs-type">long</span> <span class="hljs-variable">lastLoginTime</span> <span class="hljs-operator">=</span> Long.parseLong(cookie.getValue());<br>                    <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(lastLoginTime);<br>                    out.write(date.toLocaleString());<br>                &#125;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            out.write(<span class="hljs-string">&quot;首次访问&quot;</span>);<br>        &#125;<br>        <br><span class="hljs-comment">//        创建一个Cookie</span><br>        <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;lastLoginTime&quot;</span>, System.currentTimeMillis() + <span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-comment">//        设置有效期</span><br>        cookie.setMaxAge(<span class="hljs-number">24</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>);<br><span class="hljs-comment">//        响应给浏览器一个cookie</span><br>        resp.addCookie(cookie);<br></code></pre></td></tr></table></figure><ul><li><strong>cookie内容乱码可以用URLEncoder.encode和decode进行编解码内容</strong></li></ul><p><img src="/post/7416/image-20230808150537910.png"></p><h3 id="cookie设置path"><a href="#cookie设置path" class="headerlink" title="cookie设置path"></a>cookie设置path</h3><p><img src="/post/7416/image-20230815194746390.png"></p><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p><img src="/post/7416/image-20230815202037572.png"></p><h3 id="session的两种实现方式"><a href="#session的两种实现方式" class="headerlink" title="session的两种实现方式"></a>session的两种实现方式</h3><p><strong>第一种方式的理解</strong>：就是把session的id 放在cookie里面（为什么是使用cookies存放呢，因为cookie有临时的，也有定时的，临时的就是当前浏览器什么时候关掉即消失，也就是说session本来就是当浏览器关闭即消失的，所以可以用临时的cookie存放。保存再cookie里的sessionID一定不会重复，因为是独一无二的。），当允许浏览器使用cookie的时候，session就会依赖于cookies，当浏览器不支持cookie后，就可以通过第二种方式获取session内存中的数据资源。</p><p><strong>第二种方式的理解</strong>：在客户端不支持cookie的情况下使用。为了以防万一，也可以同时使用。</p><p>如果不支持cookie，必须自己编程使用URL重写的方式实现。</p><p>   如何重写URL：通过response.encodeURL()方法</p><p>encodeURL()的两个作用   </p><p>第一个作用：转码（说明：转中文的编码，或者一些其他特殊的编码。就好比如网页的链接中存在中文字符，就会转换成为一些百分号或者其他的符号代替。）</p><p>第二个作用：URL后面加入sessionID，当不支持cookie的时候，可以使用encodeURL()方法，encodeUTL()后面跟上sessionID，这样的话，在禁用cookie的浏览器中同时也可以使用session了。但是需要自己编程，只要链接支持，想用session就必须加上encodeURL()。</p><p>提示：若想程序中永远支持session，那就必须加上encodeURL()，当别人禁用了cookie，一样可以使用session</p><h3 id="session的创建获取和销毁"><a href="#session的创建获取和销毁" class="headerlink" title="session的创建获取和销毁"></a>session的创建获取和销毁</h3><p><strong>Session创建</strong></p><p><img src="/post/7416/image-20230817204523790.png"></p><p><strong>Session获取</strong></p><p><img src="/post/7416/image-20230817204236353.png"></p><p><strong>Session注销</strong></p><p><img src="/post/7416/image-20230817203705448.png"></p><h4 id="web-xml中session过期时间配置"><a href="#web-xml中session过期时间配置" class="headerlink" title="web.xml中session过期时间配置"></a>web.xml中session过期时间配置</h4><p><img src="/post/7416/image-20230817203627407.png" alt=" "></p><p>使用场景</p><p><img src="/post/7416/image-20230817204449997.png"></p><h4 id="Cookie和Session的区别"><a href="#Cookie和Session的区别" class="headerlink" title="Cookie和Session的区别"></a>Cookie和Session的区别</h4><p>1、数据存放位置不同：</p><p>cookie数据存放在客户的浏览器上，session数据放在服务器上。</p><p>2、安全程度不同：</p><p>cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗,考虑到安全应当使用session。</p><p>3、性能使用程度不同：</p><p>session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能,考虑到减轻服务器性能方面，应当使用cookie。</p><p>4、数据存储大小不同：</p><p>单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie，而session则存储与服务端，浏览器对其没有限制。</p><p>5、会话机制不同</p><p>session会话机制：session会话机制是一种服务器端机制，它使用类似于哈希表(可能还有哈希表)的结构来保存信息。</p><p>cookies会话机制：cookie是服务器存储在本地计算机上的小块文本，并随每个请求发送到同一服务器。 Web服务器使用HTTP标头将cookie发送到客户端。在客户端终端，浏览器解析cookie并将其保存为本地文件，该文件自动将来自同一服务器的任何请求绑定到这些cookie。</p><h1 id="JSP原理"><a href="#JSP原理" class="headerlink" title="JSP原理"></a>JSP原理</h1><p>JSP（Java Server Pages）是一种<strong>动态网页开发技术</strong>。JSP 文件就是在传统的 HTML 文件中插入 Java 代码和 JSP 标签，后缀名为<code>.jsp</code>。</p><p>JSP 与 PHP、ASP、ASP.NET 等语言类似，都<strong>运行在服务端</strong>。通常返回给客户端的就是一个 HTML 文件，因此只要有浏览器就能查看 JSP 页面。</p><p>JSP 使用 JSP 标签在 HTML 网页中插入 Java 代码，标签通常以<code>&lt;%</code>开头，以<code>%&gt;</code>结束。JSP 标签有多种功能，比如访问数据库和 JavaBean 组件等，还可以在不同的网页之间传递和共享信息。</p><p>JSP 是 <strong>Servlet 的扩展</strong>，我们可以在 JSP 中使用 Servlet 的所有功能。另外，JSP 还提供了一些其他功能，例如 EL 表达式、自定义标签等。</p><p>JSP <strong>依赖于 Servlet</strong>，用户访问 JSP 页面时，JS 1被翻译成 Servlet 代码，最终，以字符串的形式向外输出 HTML 代码。所以，JSP 只是在 Servlet 的基础上做了进一步封装。</p><p>JSP 通过表单获取用户输入的数据、访问数据库或其它数据源生成动态的 Web 内容。</p><h3 id="jsp内置对象"><a href="#jsp内置对象" class="headerlink" title="jsp内置对象"></a>jsp内置对象</h3><p><img src="/post/7416/image-20230825113925602.png"></p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h2 id="指令标识"><a href="#指令标识" class="headerlink" title="指令标识"></a>指令标识</h2><p>指令标识主要用于设定整个JSP页面范围内都有效的相关信息，它是被服务器解释并执行的，不会产生任何输出到网页中的内容，也就是说指令标识对客户端浏览器是不可见的。<br>JSP指令标识的语法格式如下：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ 指令名 属性<span class="hljs-number">1</span>=<span class="hljs-string">&quot;属性值&quot;</span> 属性<span class="hljs-number">2</span>=<span class="hljs-string">&quot;属性值&quot;</span>......%&gt;<br></code></pre></td></tr></table></figure><ul><li>指令名：用于指定指令名称，在JSP中包含page,include和taglib3条指令。</li><li>属性：用于指定属性名称，不同的指令包含不同的属性。一个指令可以设置多个属性，各属性之间用分号隔离。</li><li>属性值：用于指定属性值。</li></ul><h3 id="1-page指令"><a href="#1-page指令" class="headerlink" title="1.page指令"></a>1.page指令</h3><p>这是JSP页面最常用的指令，用于定义整个JSP页面的相关属性，这些属性在JSP被服务器解析成Servlet时会转换为相应的Java程序代码。<code>page</code>指令的语法格式如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;%@<span class="hljs-built_in"> page </span>属性<span class="hljs-attribute">1</span>=<span class="hljs-string">&quot;属性值1&quot;</span> 属性<span class="hljs-attribute">2</span>=<span class="hljs-string">&quot;属性值2&quot;</span>...%&gt;<br></code></pre></td></tr></table></figure><p>page指令提供了language、contentType、import、autoFlush、buffer、errorPage、extends、info、isELIgnored、isErrorSafe和session共13个属性。<br>下面对常用的属性进行介绍：</p><p><img src="/post/7416/image-20230825082404406.png"></p><h3 id="2-include指令"><a href="#2-include指令" class="headerlink" title="2.include指令"></a>2.include指令</h3><p>通过include指令可以在JSP页面中包含另一个JSP页面，不过该指令是静态包含指令，也就是说被被包含文件中的所有内容会被原样包含到该JSP页面中，即使被包含文件中有JSP代码，在包含时不会被编译执行。使用include指令最终将生成一个文件，所以在被包含和包含的文件中不能有相同名称的变量。<br>include指令的语法格式如下：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ include file=<span class="hljs-string">&quot;path&quot;</span>%&gt;<br></code></pre></td></tr></table></figure><p>该指令只有一个file属性，用于指定要包含文件的路径。该路径是相对路径，也可以是绝对路径，但不可以是通过&lt;%=%&gt;表达式所代表的文件。</p><h3 id="3-taglib指令"><a href="#3-taglib指令" class="headerlink" title="3.taglib指令"></a>3.taglib指令</h3><p>在JSP文件中，可以通过taglib指令标识声明该页面中所使用的标签库，同时引用标签库，并指定标签的前缀。在页面中引用标签库后，就可以通过前缀来引用标签库中的标签。taglib指令的语法格式如下：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">&quot;tagPrefix&quot;</span> uri=<span class="hljs-string">&quot;tagURI&quot;</span>%&gt;<br></code></pre></td></tr></table></figure><ul><li>prefix属性：用于指定标签的前缀。该前缀不能命名为jsp、jspx、java、javax、sun、servlet和sunw。</li><li>uri属性：用于指定标签库文件的存放位置。<br>例：在页面中引用JSTL中的核心代码库，实例代码如下：</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span>%&gt;<br></code></pre></td></tr></table></figure><h2 id="脚本标识"><a href="#脚本标识" class="headerlink" title="脚本标识"></a>脚本标识</h2><h3 id="JSP表达式"><a href="#JSP表达式" class="headerlink" title="JSP表达式"></a>JSP表达式</h3><p>JSP表达式用于向页面中输出信息，其语法格式如下：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;% = 表达式%&gt;<br></code></pre></td></tr></table></figure><ul><li>表达式：可以是任何Java语言的完整表达式。该表达式的最终运算结果将转换为字符串。<br>例：使用JSP表达式在页面中输出信息，示例代码如下：</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%String manager=<span class="hljs-string">&quot;mr&quot;</span>; %&gt;&lt;!--定义保存管理员名的变量--&gt;<br>管理员：&lt;%=manager %&gt;&lt;!--输出结果为：管理员： mr--&gt;<br>&lt;%=<span class="hljs-string">&quot;管理员：&quot;</span>+manager %&gt;&lt;!--输出结果为：管理员： mr --&gt;<br>&lt;%= <span class="hljs-number">7</span>+<span class="hljs-number">6</span> %&gt;&lt;!--输出结果为：<span class="hljs-number">13</span> --&gt;<br>&lt;%String url=<span class="hljs-string">&quot;head01.jpg&quot;</span>;%&gt;&lt;!--定义保存文件名称的变量--&gt;<br>&lt;img src=<span class="hljs-string">&quot;images/&lt;%url %&gt;&quot;</span>&gt;&lt;!--输出结果为：&lt;img src=<span class="hljs-string">&quot;images/head01.jpg&quot;</span>&gt;--&gt;<br></code></pre></td></tr></table></figure><h3 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h3><p>所谓代码片段就是在JSP页面中嵌入的Java代码或脚本代码。代码片段将在页面请求的处理期间被执行，通过Java代码可以定义变量或流程控制语句等；而通过脚本代码可以应用JSP的内置对象在页面输出内容、请求处理和响应、访问session会话等。代码片段的语法格式如下：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&lt;<span class="hljs-meta">%</span> Java代码或脚本代码 <span class="hljs-meta">%</span>&gt;<br></code></pre></td></tr></table></figure><p>代码片段的使用比较灵活，他所实现的功能是JSP表达式无法实现的。<br>例：通过代码片段和JSP表达式在JSP页面上输出九九乘法表。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JSP">&lt;body&gt;<br>&lt;%<br>String str=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">9</span>;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">9</span>;j++)<br>&#123;<br>str+=j+<span class="hljs-string">&quot;x&quot;</span>+i+<span class="hljs-string">&quot;=&quot;</span>+j*i;<br>str+=<span class="hljs-string">&quot;&amp;nbsp;&quot;</span>;<br>&#125;<br>str+=&lt;<span class="hljs-string">&quot;br&quot;</span>&gt;;<br>&#125;<br>%&gt;<br>&lt;div&gt;<br>&lt;ul&gt;<br>&lt;li id=<span class="hljs-string">&quot;title&quot;</span>&gt;九九乘法表&lt;/li&gt;<br>&lt;li&gt;&lt;%=str%&gt;&lt;!--输出九九乘法表--&gt;&lt;/li&gt;<br>&lt;ul&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br></code></pre></td></tr></table></figure><h3 id="声明标识"><a href="#声明标识" class="headerlink" title="声明标识"></a>声明标识</h3><p>声明表示用于在JSP页面中定义全局的变量或方法。通过声明表示定义的变量和方法可以被整个JSP页面访问，所以通常使用该标识定义整个JSP页面都需要引用的变量或方法。<br>声明标识的语法格式如下：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%! 声明变量或方法的代码 %&gt;<br></code></pre></td></tr></table></figure><p>例：通过声明标识声明一个全局变量和全局方法：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%!<br><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//声明全局变量</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">count</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//声明全局方法</span><br>number++;<span class="hljs-comment">//累加number</span><br><span class="hljs-keyword">return</span> number;<span class="hljs-comment">//返回number的值</span><br>&#125;<br>%&gt;<br></code></pre></td></tr></table></figure><h2 id="jsp-9大内置对象"><a href="#jsp-9大内置对象" class="headerlink" title="jsp 9大内置对象"></a>jsp 9大内置对象</h2><ul><li>PageContext 保存数据</li><li>Request 保存数据</li><li>Response</li><li>Session 保存数据</li><li>Application【ServletContext】 保存数据</li><li>config【ServletConfig】</li><li>out</li><li>page</li><li>exception</li></ul><p><img src="/post/7416/image-20230828201411054.png"></p><p><img src="/post/7416/image-20230828200151843.png"></p><h2 id="JSP标签、JSTL标签、EL表达式"><a href="#JSP标签、JSTL标签、EL表达式" class="headerlink" title="JSP标签、JSTL标签、EL表达式"></a>JSP标签、JSTL标签、EL表达式</h2><p><img src="/post/7416/image-20230828201733549.png"></p><h3 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h3><ul><li>获取数据</li><li>执行运算</li><li>获取web开发的常用对象</li><li>调用java</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$&#123;变量名&#125;</span><br></code></pre></td></tr></table></figure><h3 id="JSP标签"><a href="#JSP标签" class="headerlink" title="JSP标签"></a>JSP标签</h3><p><img src="/post/7416/image-20230828202141938.png"></p><h3 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h3><p>实现了JSP页面的代码复用。基于标签库原理，重复率较高的代码块支持复用，提高效率。</p><p>书写JSP页面时可读性更强。长得像XML，方便前端查看和参与开发。</p><p>在应用程序服务器之间提供了一致的接口，最大程度地提高了WEB应用在各应用服务器之间的移植。</p><p>简化了JSP和WEB应用程序的开发。</p><ul><li>通过jstl标签库弥补jsp使用原生html语法的不足</li></ul><p>根据JSTL标签所提供的功能，可以将其分为5个类别。</p><ul><li><p><strong>核心标签</strong></p><ul><li>```<br>&lt;%@ taglib prefix=”c” uri=”<a href="http://java.sun.com/jsp/jstl/core&quot;">http://java.sun.com/jsp/jstl/core&quot;</a> %&gt;<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br>  - ![](JavaWeb开发/image-20230828202915257.png)<br><br>- **格式化标签**<br><br>- **SQL 标签**<br><br>- **XML 标签**<br><br>- **JSTL 函数**<br><br>![](JavaWeb开发/image-20230828203838019.png)<br><br>## jsp不能取值问题<br><br>web.xml头文件版本太低<br><br># JavaBean<br><br>实体类<br><br>JavaBean特定写法<br><br>- 必须有一个无参构造<br>- 属性私有化<br>- 必有相应的get/set<br><br>一般用来和数据库字段做映射 ORM:<br><br>ORM:对象关系映射<br><br>- 表-----&gt;类<br>- 字段----&gt;属性<br>- 行记录----&gt;对象<br><br># MVC架构<br><br>什么是MVC:<br><br> Model模型<br><br> View视图<br><br> Controller控制器<br><br><br><br>早期业务架构<br><br>![](JavaWeb开发\image-20230831155054203.png)<br><br>![](JavaWeb开发\image-20230831155043558.png)<br><br>MVC架构<br><br>![](JavaWeb开发\image-20230831155733781.png)<br><br>model<br><br>- 业务处理：业务逻辑模型往往是对数据的处理，如订单和用户信息的修改。（service）<br><br>- 数据持久层：CRUD（Dao）<br><br>View<br><br>- 内容展示：视图是将模型的内容呈现出来<br>- 发起请求：用户可以通过对视图的操作进而操作模型，封装的是对数据源Model的显示<br><br>Controller（Servlet处理）<br><br>- 接受请求：（req携带请求参数，session信息等....）<br>- 分析业务请求，想业务处理发起处理<br>- 控制视图跳转<br><br>![](JavaWeb开发\image-20230901134011155.png)<br><br># 过滤器：Filter<br><br>## 过滤器简介<br><br>filter也称之为过滤器，它是javaWeb三大组件之一（Servlet程序、Listener监听器、Filter过滤器）<br><br>**作用：**既可以对请求进行拦截，也可以对响应进行处理。![](https://img-blog.csdnimg.cn/8f87baaec54244e08a6a33cdcff7be8f.png)<br><br>**常见场景：**权限检查，日记操作、拦截请求、过滤操作、对请求字符设置编码。<br><br>## filter开发步骤<br><br>### Maven依赖<br><br>```xml<br><span class="hljs-comment">&lt;!-- servlet依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- jsp依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- jstl表达式依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- standard标准库依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>taglibs<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>standard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- mysql连接依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.33<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="类实现filter接口"><a href="#类实现filter接口" class="headerlink" title="类实现filter接口"></a>类实现filter接口</h3><p>导入包名</p><p><img src="/post/7416/JavaWeb%E5%BC%80%E5%8F%91%5Cimage-20230911211328078.png"></p><h3 id="重写方法"><a href="#重写方法" class="headerlink" title="重写方法"></a>重写方法</h3><p><img src="/post/7416/JavaWeb%E5%BC%80%E5%8F%91%5Cimage-20230911212958540.png"></p><p>servlet配置</p><p><img src="/post/7416/JavaWeb%E5%BC%80%E5%8F%91%5Cimage-20230911213039771.png"></p><p>改servlet通过servlet配置的两个路径均可访问，filter过滤servlet路径后，show路径仍为乱码，全路径不乱码</p><p><img src="/post/7416/JavaWeb%E5%BC%80%E5%8F%91%5Cimage-20230911213200556.png"></p><h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><ul><li>错误日志内容：org.apache.catalina.core.StandardContext.startInternal Context [/16_filter] startup failed due to previous errors</li></ul><p>filter类方法重写，所以方法体里自带一段super语句，删除这个语句Tomcat就可以正常运行了。</p><ul><li>删除web.xml自动生成的文件头</li></ul><h1 id="监听器：listener"><a href="#监听器：listener" class="headerlink" title="监听器：listener"></a>监听器：listener</h1><h2 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h2><h3 id="实现监听器接口并重写方法"><a href="#实现监听器接口并重写方法" class="headerlink" title="实现监听器接口并重写方法"></a><strong>实现监听器接口并重写方法</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.loh.listener;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletContext;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSessionEvent;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSessionListener;<br><span class="hljs-keyword">import</span> java.net.http.WebSocket;<br><span class="hljs-comment">//实现session监听</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OnlineCountListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HttpSessionListener</span> &#123;<br><span class="hljs-comment">//    创建session时监听</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sessionCreated</span><span class="hljs-params">(HttpSessionEvent se)</span> &#123;<br><span class="hljs-comment">//        获取ServletContext</span><br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">sct</span> <span class="hljs-operator">=</span> se.getSession().getServletContext();<br><span class="hljs-comment">//        从ServletContext中获取字段值</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">onlineCount</span> <span class="hljs-operator">=</span> (Integer) sct.getAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>);<br><br>        <span class="hljs-keyword">if</span>(onlineCount==<span class="hljs-literal">null</span>)&#123;<br>            onlineCount =Integer.valueOf(<span class="hljs-number">1</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> onlineCount.intValue();<br>            onlineCount=Integer.valueOf(count+<span class="hljs-number">1</span>);<br>        &#125;<br>        sct.setAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>,onlineCount);<br>    &#125;<br><span class="hljs-comment">//销毁session时监听</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sessionDestroyed</span><span class="hljs-params">(HttpSessionEvent se)</span> &#123;<br>        <span class="hljs-comment">//        获取ServletContext</span><br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">sct</span> <span class="hljs-operator">=</span> se.getSession().getServletContext();<br><span class="hljs-comment">//        从ServletContext中获取字段值</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">onlineCount</span> <span class="hljs-operator">=</span> (Integer) sct.getAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>);<br><br>        <span class="hljs-keyword">if</span>(onlineCount==<span class="hljs-literal">null</span>)&#123;<br>            onlineCount =Integer.valueOf(<span class="hljs-number">0</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> onlineCount.intValue();<br>            onlineCount=Integer.valueOf(count-<span class="hljs-number">1</span>);<br>        &#125;<br>        sct.setAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>,onlineCount);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注册监听器"><a href="#注册监听器" class="headerlink" title="注册监听器"></a>注册监听器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  注册监听器--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>com.loh.listener.OnlineCountListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="jsp输出"><a href="#jsp输出" class="headerlink" title="jsp输出"></a>jsp输出</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;html&gt;<br>&lt;body&gt;<br>    &lt;%--以下为两行jsp表达式--%&gt;<br>&lt;%@ page pageEncoding=<span class="hljs-string">&quot;utf-8&quot;</span>%&gt;<br>&lt;h1&gt;当前&lt;span&gt;&lt;%=<span class="hljs-built_in">this</span>.getServletConfig().getServletContext().getAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>)%&gt;&lt;/span&gt;人在线&lt;/h1&gt;<br>&lt;h1&gt;当前&lt;span&gt;&lt;%=application.getAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>)%&gt;&lt;/span&gt;人在线&lt;/h1&gt;<br>&lt;h2&gt;Hello World!&lt;/h2&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="gui中应用监听器"><a href="#gui中应用监听器" class="headerlink" title="gui中应用监听器"></a>gui中应用监听器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.loh.listener;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.WindowEvent;<br><span class="hljs-keyword">import</span> java.awt.event.WindowListener;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestPanel</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        窗口</span><br>        <span class="hljs-type">Frame</span> <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>(<span class="hljs-string">&quot;lets go&quot;</span>);<br><span class="hljs-comment">//        面板</span><br>        <span class="hljs-type">Panel</span> <span class="hljs-variable">panel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Panel</span>();<br><span class="hljs-comment">//        窗口设置布局tr</span><br>        frame.setLayout(<span class="hljs-literal">null</span>);<br><span class="hljs-comment">//        窗口大小</span><br>        frame.setBounds(<span class="hljs-number">300</span>,<span class="hljs-number">300</span>,<span class="hljs-number">500</span>,<span class="hljs-number">500</span>);<br><span class="hljs-comment">//        窗口背景色</span><br>        frame.setBackground(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>));<br><span class="hljs-comment">//        面板大小</span><br>        panel.setBounds(<span class="hljs-number">50</span>,<span class="hljs-number">50</span>,<span class="hljs-number">300</span>,<span class="hljs-number">300</span>);<br>        <br>        panel.setBackground(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>));<br>        frame.add(panel);<br>        frame.setVisible(<span class="hljs-literal">true</span>);<br><br>        <br>        frame.addWindowListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowListener</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowOpened</span><span class="hljs-params">(WindowEvent e)</span> &#123;<br>                <br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowClosing</span><span class="hljs-params">(WindowEvent e)</span> &#123;<br>            <br><span class="hljs-comment">//                退出</span><br>                System.exit(<span class="hljs-number">1</span>);<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowClosed</span><span class="hljs-params">(WindowEvent e)</span> &#123;<br><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowIconified</span><span class="hljs-params">(WindowEvent e)</span> &#123;<br><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowDeiconified</span><span class="hljs-params">(WindowEvent e)</span> &#123;<br><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowActivated</span><span class="hljs-params">(WindowEvent e)</span> &#123;<br><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowDeactivated</span><span class="hljs-params">(WindowEvent e)</span> &#123;<br><br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="浏览器登录过滤器项目"><a href="#浏览器登录过滤器项目" class="headerlink" title="浏览器登录过滤器项目"></a>浏览器登录过滤器项目</h2><p>描述 该项目共有三   个web资源，三个java类</p><p>其中login作为主登录页，主方法类LoginMethod添加seesion字段，并判断字段分辨用户是否登录，并跳转至相应页面</p><p>web</p><p><img src="/post/7416/image-20231204133059007.png"></p><p>success</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%--启用过滤器时注销下面的jsp代码--%&gt;<br>&lt;%--&lt;%--%&gt;<br>&lt;%--    <span class="hljs-type">Object</span> <span class="hljs-variable">userSession</span> <span class="hljs-operator">=</span> request.getSession().getAttribute(<span class="hljs-string">&quot;USER_SESSION&quot;</span>);--%&gt;<br>&lt;%--    <span class="hljs-keyword">if</span> (userSession == <span class="hljs-literal">null</span>)&#123;--%&gt;<br>&lt;%--       response.sendRedirect(<span class="hljs-string">&quot;/Login.jsp&quot;</span>);--%&gt;<br>&lt;%--    &#125;--%&gt;<br>&lt;%--%&gt;--%&gt;<br>&lt;p&gt;&lt;a href=<span class="hljs-string">&quot;/servlet/logout&quot;</span>&gt;注销&lt;/a&gt;&lt;/p&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>error</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1&gt;error&lt;/h1&gt;<br>&lt;p&gt;&lt;a href=<span class="hljs-string">&quot;/Login.jsp&quot;</span>&gt;返回首页&lt;/a&gt;&lt;/p&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>login</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1&gt;login&lt;/h1&gt;<br>&lt;form action=<span class="hljs-string">&quot;/servlet/login&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span>&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>java</p><p>LoginMethod</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.loh.filter_admin;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginMethod</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><span class="hljs-comment">//        获取前端参数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-keyword">if</span> (username.equals(<span class="hljs-string">&quot;admin&quot;</span>))&#123;<span class="hljs-comment">//登录成功</span><br><span class="hljs-comment">//             设置session字段值给常量USER_SESSION</span><br>            req.getSession().setAttribute(<span class="hljs-string">&quot;USER_SESSION&quot;</span>,req.getSession().getId());<br><span class="hljs-comment">//            重定向</span><br>            resp.sendRedirect(<span class="hljs-string">&quot;/sys/success.jsp&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//登录失败</span><br>            resp.sendRedirect(<span class="hljs-string">&quot;/error.jsp&quot;</span>);<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doGet(req,resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>LogoutMethod</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.loh.filter_admin;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogoutMethod</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">userSession</span> <span class="hljs-operator">=</span> req.getSession().getAttribute(<span class="hljs-string">&quot;USER_SESSION&quot;</span>);<br>        <span class="hljs-keyword">if</span> (userSession != <span class="hljs-literal">null</span>)&#123;<br>            req.getSession().removeAttribute(<span class="hljs-string">&quot;USER_SESSION&quot;</span>);<br>            resp.sendRedirect(<span class="hljs-string">&quot;/Login.jsp&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>FilterDo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.loh.filter_admin;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterDo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServletRequest) req;<br>        <span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> (HttpServletResponse) resp;<br><br>        <span class="hljs-keyword">if</span> (request.getSession().getAttribute(<span class="hljs-string">&quot;USER_SESSION&quot;</span>)==<span class="hljs-literal">null</span>)&#123;<br>            response.sendRedirect(<span class="hljs-string">&quot;/error.jsp&quot;</span>);<br>        &#125;<br><br><span class="hljs-comment">//        执行过滤</span><br>        chain.doFilter(req,resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注册filter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>SysFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.loh.filter_admin.FilterDo<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>SysFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/sys/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="JDBC-Relearn（复习）"><a href="#JDBC-Relearn（复习）" class="headerlink" title="JDBC Relearn（复习）"></a>JDBC Relearn（复习）</h1><ol><li><p>加载数据库</p></li><li><p>连接数据库，代表数据库</p></li><li><p>向数据库发送sql对象statement：crud</p></li><li><p>编写sql</p></li><li><p>执行sql</p></li><li><p>关闭连接 </p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> users( `id` <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY, `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">40</span>), `password` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">40</span>), `email` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">60</span>), `birthday` <span class="hljs-type">DATE</span> ); <br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> users(`id`,`name`,`password`,`email`,`birthday`)<span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;123455&#x27;</span>,<span class="hljs-string">&#x27;sss@qq.com&#x27;</span>,<span class="hljs-string">&#x27;2021-01-09&#x27;</span>); <br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> users(`id`,`name`,`password`,`email`,`birthday`)<span class="hljs-keyword">VALUES</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;王五&#x27;</span>,<span class="hljs-string">&#x27;123455&#x27;</span>,<span class="hljs-string">&#x27;sss@qq.com&#x27;</span>,<span class="hljs-string">&#x27;2021-01-09&#x27;</span>); <br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> users(`id`,`name`,`password`,`email`,`birthday`)<span class="hljs-keyword">VALUES</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;李四2&#x27;</span>,<span class="hljs-string">&#x27;123455&#x27;</span>,<span class="hljs-string">&#x27;sss@qq.com&#x27;</span>,<span class="hljs-string">&#x27;2021-01-09&#x27;</span>); <br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> users;<br></code></pre></td></tr></table></figure><h2 id="statement"><a href="#statement" class="headerlink" title="statement"></a>statement</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.loh.test;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestJdbc01_Statement</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//  配置jdbc信息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/JDBC_WEB?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br><br><span class="hljs-comment">//        加载驱动</span><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br><span class="hljs-comment">//        连接数据库</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br><span class="hljs-comment">//         statement对象：CRUD</span><br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br><span class="hljs-comment">//        编写sql</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from users&quot;</span>;<br><span class="hljs-comment">//        执行查询sql</span><br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> statement.executeQuery(sql);<br><br>        <span class="hljs-keyword">while</span> (rs.next())&#123;<br>            System.out.println(<span class="hljs-string">&quot;id=&quot;</span> + rs.getObject(<span class="hljs-string">&quot;id&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;name=&quot;</span> + rs.getObject(<span class="hljs-string">&quot;name&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;password=&quot;</span> + rs.getObject(<span class="hljs-string">&quot;password&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;email=&quot;</span> + rs.getObject(<span class="hljs-string">&quot;email&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;birthday=&quot;</span> + rs.getObject(<span class="hljs-string">&quot;birthday&quot;</span>));<br>        &#125;<br><span class="hljs-comment">//        关闭连接释放</span><br>        rs.close();<br>        statement.close();<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="增删改"><a href="#增删改" class="headerlink" title="增删改"></a>增删改</h3><p>代码与查询基本一致，statement方法以及返回类型不一致，注意，关闭方式相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        注释：增删改</span><br><span class="hljs-comment">//        增删改使用update</span><br>        sql =<span class="hljs-string">&quot;insert into jdbc_web.users(ID, NAME, PASSWORD, EMAIL, BIRTHDAY) VALUES(4,&#x27;DA&#x27;,&#x27;12234&#x27;,&#x27;21423@QQ.COM&#x27;,&#x27;2021-10-28&#x27;)&quot;</span>;<br><span class="hljs-comment">//        statement使用update处理sql，该方法返回一个int类型的数（表中受影响的行数）</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> statement.executeUpdate(sql);<br>        System.out.println(<span class="hljs-string">&quot;有&quot;</span>+i+<span class="hljs-string">&quot;行受影响&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="preparestatement"><a href="#preparestatement" class="headerlink" title="preparestatement"></a>preparestatement</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.loh.test;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-comment">//使用preparedStatement处理sql</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestJdbc02_PrepareStatement</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SQLException &#123;<br><span class="hljs-comment">//  配置jdbc信息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/JDBC_WEB?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br><br><span class="hljs-comment">//        加载驱动</span><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br><span class="hljs-comment">//        连接数据库</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br><br><span class="hljs-comment">//        编写sql和占位符</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into jdbc_web.users(id, name, password, email, birthday) VALUES (?,?,?,?,?);&quot;</span>;<br><br><span class="hljs-comment">//        安全sql查询,预编译</span><br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> connection.prepareStatement(sql);<br><br><span class="hljs-comment">//        对占位符进行赋值</span><br>        preparedStatement.setInt(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>);<br>        preparedStatement.setString(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;xaxa&quot;</span>);<br>        preparedStatement.setString(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;54321&quot;</span>);<br>        preparedStatement.setString(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;dasda@qq.com&quot;</span>);<br>        preparedStatement.setDate(<span class="hljs-number">5</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.sql.Date(<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Date().getTime()));<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> preparedStatement.executeUpdate();<br><br>        <span class="hljs-keyword">if</span> (rs &gt; <span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;插入成功&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;错误&quot;</span>);<br>        &#125;<br><br><span class="hljs-comment">//        关闭连接释放</span><br>        preparedStatement.close();<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>mysql数据库基础</title>
    <link href="https://bugdev.tk/post/47633/"/>
    <id>https://bugdev.tk/post/47633/</id>
    <published>2023-04-14T05:09:00.000Z</published>
    <updated>2024-06-11T06:36:30.316Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>简单地说，救据库（英文Daabase）就是一个存放数据的仓库。在日常工作中，常常需要把等些相关的数据放进这样的仓库，并根据管理的需要进行相应的处理。</p><h2 id="DBMS"><a href="#DBMS" class="headerlink" title="DBMS"></a>DBMS</h2><p><strong>数据库管理系统</strong>（DatabaseManagementSystem）是一种<strong>操纵和管理数据库</strong>的大型软件，用于建立、使用和维护数据库，简称DBMS。它对数据库进行统一的管理和控制，以保证数据库的安全性和完整性。用户通过DBMS<br>访问数据库中的数据，数据库管理员也通过dbms进行数据库的维护工作。它可使多个应用程序和用户用不同的方法在同时或不同时刻去建立，修改和询问数据库。大部分DBMS提供数据定义语言DDL（DataDefinitionLanguage）和数据操作语言DML（DataManipulationLanguage），供用户定义数据库的模式结构与权限约束，实现对数据的追加、删除等操作，以及数据库控制语言DCL（DataControlLanguage），用来设置或更改数据库用户或角色权限的语句</p><ul><li><strong>数据库和DBMS不是同一个东西</strong></li></ul><h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>配置环境变量，bin目录配置mysql path</p></li><li><p>新建配置文件my.ini</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs js">[mysqld]<br>basedir=<span class="hljs-attr">G</span>:\<span class="hljs-title class_">Loh</span>\<span class="hljs-title class_">Code</span>_usefile\mysql-<span class="hljs-number">8.0</span><span class="hljs-number">.32</span>-winx64<span class="hljs-comment">//配置目录</span><br>datadir=<span class="hljs-attr">G</span>:\<span class="hljs-title class_">Loh</span>\<span class="hljs-title class_">Code</span>_usefile\mysql-<span class="hljs-number">8.0</span><span class="hljs-number">.32</span>-winx64\data<span class="hljs-comment">//配置data目录</span><br>port=<span class="hljs-number">3306</span><br>skip-grant-tables #（<span class="hljs-number">8.0</span>版本需要注释掉该语句）<br></code></pre></td></tr></table></figure></li><li><p>启动cmd,切换到bin目录，输入<code>mysqld --install</code>安装</p></li><li><p>输入<code>mysqld --initialize-insecure --user=mysql</code>初始化数据文件</p></li><li><p>输入<code>net start mysql</code>启动mysql后，需要以<code>管理员</code>身份运行，否则会报错：<img src="/post/47633/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1eXVqaW4xOTk3,size_16,color_FFFFFF,t_70#pic_center.png"></p></li><li><p>输入<code>mysql -u root -p密码</code>（注意-p后不可以有空格）</p></li><li><p>```js<br>update mysql.user set authentication string=password(‘123456’) where user=’root’ and Host=’localhost’<br>#8.0版本用这个改密码alter user ‘root‘@’localhost’ identified by ‘123456’;<br>#sqlyog用这个更新密码ALTER USER ‘root‘@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘password’(password改成要的密码)<br>flush privileges</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><br><br>![](<span class="hljs-link">mysql数据库基础/image-20230524193822898.png</span>)<br><br><br><br><span class="hljs-strong">**mysql关键字不区分大小写**</span><br><br><span class="hljs-section"># 数据库操作</span><br><br><span class="hljs-section">## 数据库操作(了解)</span><br><br>创建新数据库<br><br><span class="hljs-code">```sql</span><br><span class="hljs-code">create database [if not exists] 数据库名;</span><br></code></pre></td></tr></table></figure></li></ol><p>删除数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> database if <span class="hljs-keyword">exists</span> 数据库名;<br></code></pre></td></tr></table></figure><p>切换数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">use 数据库名;<br></code></pre></td></tr></table></figure><p>查看数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> databases;<br></code></pre></td></tr></table></figure><p>关键字</p><ul><li>create</li><li>drop</li></ul><h2 id="列类型"><a href="#列类型" class="headerlink" title="列类型"></a>列类型</h2><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th></th></tr></thead><tbody><tr><td align="left">TINYINT</td><td align="left">1 Bytes</td><td></td></tr><tr><td align="left">SMALLINT</td><td align="left">2 Bytes</td><td></td></tr><tr><td align="left">MEDIUMINT</td><td align="left">3 Bytes</td><td></td></tr><tr><td align="left">INT或INTEGER</td><td align="left">4 Bytes</td><td>标准类型，存储int</td></tr><tr><td align="left">BIGINT</td><td align="left">8 Bytes</td><td></td></tr><tr><td align="left">FLOAT</td><td align="left">4 Bytes</td><td></td></tr><tr><td align="left">DOUBLE</td><td align="left">8 Bytes</td><td></td></tr><tr><td align="left">DECIMAL</td><td align="left">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td>字符串形式浮点数，金融计算多使用</td></tr></tbody></table><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p>字符串类型指CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET。该节描述了这些类型如何工作以及如何在查询中使用这些类型。</p><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">CHAR</td><td align="left">0-255 bytes</td><td align="left">定长字符串</td></tr><tr><td align="left">VARCHAR</td><td align="left">0-65535 bytes</td><td align="left">变长字符串</td></tr><tr><td align="left">TINYTEXT</td><td align="left">0-255 bytes</td><td align="left">短文本字符串</td></tr><tr><td align="left">TEXT</td><td align="left">0-65 535 bytes</td><td align="left">长文本数据</td></tr></tbody></table><p><strong>注意</strong>：char(n) 和 varchar(n) 中括号中 n 代表字符的个数，并不代表字节个数，比如 CHAR(30) 就可以存储 30 个字符。</p><p>CHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</p><p>BINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</p><p>BLOB 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 BLOB 类型：TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。它们区别在于可容纳存储范围不同。</p><p>有 4 种 TEXT 类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4 种 BLOB 类型，可存储的最大长度不同，可根据实际情况选择。</p><h3 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h3><p>表示时间值的日期和时间类型为DATETIME、DATE、TIMESTAMP、TIME和YEAR。</p><p>每个时间类型有一个有效值范围和一个”零”值，当指定不合法的MySQL不能表示的值时使用”零”值。</p><p>TIMESTAMP类型有专有的自动更新特性，将在后面描述。</p><table><thead><tr><th align="left">类型</th><th align="left">大小 ( bytes)</th><th align="left">范围</th><th align="left">格式</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">DATE</td><td align="left">3</td><td align="left">1000-01-01/9999-12-31</td><td align="left">YYYY-MM-DD</td><td align="left">日期值</td></tr><tr><td align="left">TIME</td><td align="left">3</td><td align="left">‘-838:59:59’/‘838:59:59’</td><td align="left">HH:MM:SS</td><td align="left">时间值或持续时间</td></tr><tr><td align="left">YEAR</td><td align="left">1</td><td align="left">1901/2155</td><td align="left">YYYY</td><td align="left">年份值</td></tr><tr><td align="left">DATETIME</td><td align="left">8</td><td align="left">‘1000-01-01 00:00:00’ 到 ‘9999-12-31 23:59:59’</td><td align="left">YYYY-MM-DD hh:mm:ss</td><td align="left">混合日期和时间值</td></tr><tr><td align="left">TIMESTAMP</td><td align="left">4</td><td align="left">‘1970-01-01 00:00:01’ UTC 到 ‘2038-01-19 03:14:07’ UTC结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td align="left">YYYY-MM-DD hh:mm:ss</td><td align="left">混合日期和时间值，时间戳</td></tr></tbody></table><h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><p>空值，未知</p><h2 id="字段属性（重点）"><a href="#字段属性（重点）" class="headerlink" title="字段属性（重点）"></a>字段属性（重点）</h2><p>Unsigned：</p><ul><li>无符号整数</li><li>声明该列不能为负数</li></ul><p>Zerofill：</p><ul><li>0填充的</li><li>不足的位数使用0来填充</li></ul><p>自增：AUTO_INTCREMENT</p><ul><li>通常理解为自增，自动在上一条记录的基础上+1（默认）</li><li>用来设计唯一主键index，必须是整数类型</li><li>自定义设计主键自增的起始值和步长</li></ul><p>非空 NULL not null</p><ul><li>not null非空字段不赋值即报错</li><li>null，不填默认为null</li></ul><p>默认</p><ul><li>设置默认值</li><li>sex 默认值为男，不填值则使用默认值</li></ul><p>注释：COMMENT</p><ul><li>注释</li></ul><p><img src="/post/47633/image-20230525085536865.png"></p><h2 id="创建表（重点）"><a href="#创建表（重点）" class="headerlink" title="创建表（重点）"></a>创建表（重点）</h2><p>创建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> teacher( <br>    `id` <span class="hljs-type">INT</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;tid&#x27;</span>,<br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;anonymous&#x27;</span> COMMENT <span class="hljs-string">&#x27;tname&#x27;</span>, <br>    `psssword` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;123456&#x27;</span> COMMENT <span class="hljs-string">&#x27;tpwd&#x27;</span>,<br>    `sex` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;女&#x27;</span> COMMENT <span class="hljs-string">&#x27;sex&#x27;</span>,<br>    `brithday` DATETIME <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;bornday&#x27;</span>,<br>    `address` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;address&#x27;</span>,<br>    `email` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;mail&#x27;</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <br>)ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4,<span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8mb4_general_ci;<br><br><br><br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> [IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] 表名(<br>`字段名` 列类型 [字段属性] [索引] [注释],<br>`字段名` 列类型 [字段属性] [索引] [注释],<br>`字段名` 列类型 [字段属性] [索引] [注释],<br>[ <span class="hljs-keyword">PRIMARY</span> KEY (`字段名`) ]<br>)[表类型] [字符集设置] [注释]<br></code></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>逆向显示创建命令</p><p>假设有一个库和一张表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> database `库名`; <span class="hljs-comment">--查看库的定义</span><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> `表名`; <span class="hljs-comment">---查看该表的定义</span><br><span class="hljs-keyword">desc</span> `表名` <span class="hljs-comment">--显示表结构</span><br></code></pre></td></tr></table></figure><h2 id="数据库引擎"><a href="#数据库引擎" class="headerlink" title="数据库引擎"></a>数据库引擎</h2><p><img src="/post/47633/image-20230525100324860.png"></p><p><img src="/post/47633/image-20230525101709216.png"></p><p><img src="/post/47633/image-20230525101725652.png"></p><p><img src="/post/47633/image-20230525101824309.png"></p><h2 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h2><p><img src="/post/47633/image-20230525103810761.png"></p><p><img src="/post/47633/image-20230525103920349.png"></p><h3 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h3><h4 id="1）修改表名"><a href="#1）修改表名" class="headerlink" title="1）修改表名"></a>1）修改表名</h4><p>rename 原表名 to 新表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">rename tb_txt <span class="hljs-keyword">to</span> tb_txt_new；<br></code></pre></td></tr></table></figure><h4 id="2）修改列名"><a href="#2）修改列名" class="headerlink" title="2）修改列名"></a>2）修改列名</h4><p>alter table 表名 rename column 列名 to</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> tb_txt_new rename <span class="hljs-keyword">column</span> txtid <span class="hljs-keyword">to</span> tid；<br></code></pre></td></tr></table></figure><h4 id="3）修改字段类型"><a href="#3）修改字段类型" class="headerlink" title="3）修改字段类型"></a>3）修改字段类型</h4><p>alter table 表名 modify（字段类型）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_txt_new modify（tid vachar2(<span class="hljs-number">20</span>))；<br></code></pre></td></tr></table></figure><h4 id="4）添加列"><a href="#4）添加列" class="headerlink" title="4）添加列"></a>4）添加列</h4><p>alter table 表名 add 字段类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_txt <span class="hljs-keyword">new</span> <span class="hljs-keyword">add</span> col_test name varchar2(<span class="hljs-number">30</span>);<br></code></pre></td></tr></table></figure><h4 id="5）删除列"><a href="#5）删除列" class="headerlink" title="5）删除列"></a>5）删除列</h4><p>alter table 表名 drop column 字段</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_txt <span class="hljs-built_in">new</span> <span class="hljs-keyword">drop</span> <span class="hljs-keyword">column</span> col_test <span class="hljs-type">name</span>;<br></code></pre></td></tr></table></figure><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span><br></code></pre></td></tr></table></figure><h1 id="mysql数据管理"><a href="#mysql数据管理" class="headerlink" title="mysql数据管理"></a>mysql数据管理</h1><h2 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h2><p><img src="/post/47633/image-20230525111636069.png"></p><p>创建表操作时不指定外键</p><p><img src="/post/47633/image-20230525111654621.png"></p><h1 id="DML-重点"><a href="#DML-重点" class="headerlink" title="DML(重点)"></a>DML(重点)</h1><h2 id="DML介绍"><a href="#DML介绍" class="headerlink" title="DML介绍"></a>DML介绍</h2><p>DML（DataManipulationlanguage数据操控语言）用于操作数据库对象中包含的数据。也就是说操作的单位是记录。</p><p>Oracle数据库的DML表数据的操作有三种</p><p><strong>①insert（插入）；②update（更新）；③delete（删除）。</strong></p><h2 id="条件语句where"><a href="#条件语句where" class="headerlink" title="条件语句where"></a>条件语句where</h2><p>运算符类：&gt;,&lt;,&gt;=….</p><p>between…and..    在xx和xx之间的</p><p>and    等价与&amp;&amp;</p><p>or    或</p><h2 id="插入insert"><a href="#插入insert" class="headerlink" title="插入insert"></a>插入insert</h2><p><img src="/post/47633/image-20230525112632503.png"></p><p>通过insert语句向指定的表中添加记录，添加记录时需要满足以下条件，类型和长度要兼容，（字段兼容值）；值满足约束，主键（唯一+非空），非空（必填），唯一（不重复），默认（没有填写使用默认值），检查（满足条件），外键（参考主表主键列的值）；个数必须相同，指定列，个数顺序与列<br>相同；没有指定，个数与表结构的列个数和顺序相同（nul也得占位，没有默认值）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 表名 [（字段列表）] <span class="hljs-keyword">values</span>（值列表）;<br></code></pre></td></tr></table></figure><h3 id="默认方式添加"><a href="#默认方式添加" class="headerlink" title="默认方式添加"></a>默认方式添加</h3><p>insert into 表名 values（值列表）<br>此时的值列表顺序和个数以及类型需要和标结构一致，默认的，可以为空的列也都必须填上值。可以手写也可以从别的表中获取。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_user <span class="hljs-keyword">values</span>(<span class="hljs-number">1001</span>，<span class="hljs-string">&#x27;test&#x27;</span>，<span class="hljs-string">&#x27;test123&#x27;</span> ，<span class="hljs-keyword">null</span>，<span class="hljs-string">&#x27;女’，null，sysdate）;</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_user_copy <span class="hljs-keyword">values</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_user）；<br></code></pre></td></tr></table></figure><h3 id="添加时指定列和顺序"><a href="#添加时指定列和顺序" class="headerlink" title="添加时指定列和顺序"></a>添加时指定列和顺序</h3><p>insert into表名（指定列）values（值列表）<br>此时的值列表要和指定的列个数、顺序、类型保持一致</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_user（username，userid，userpwd）<span class="hljs-keyword">values</span>（tom,<span class="hljs-number">1002</span>，tompwd）；<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_user_copy(username,userid,userpwd） <span class="hljs-keyword">values</span>(<span class="hljs-keyword">select</span> username userid，userpwd <span class="hljs-keyword">from</span> tb_user)<br></code></pre></td></tr></table></figure><p><font color="red">当添加的记录中，存在外键关联时需要注意，可以采取先查询后添加的方式</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_txt(txtid,title,userid）（<span class="hljs-number">1001</span>，title1，<span class="hljs-number">123</span>（<span class="hljs-keyword">select</span> userid <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> username<span class="hljs-operator">=</span>随笔大师））;<br></code></pre></td></tr></table></figure><h2 id="修改update"><a href="#修改update" class="headerlink" title="修改update"></a>修改update</h2><p>通过update语句可以更新（修改）表中的记录值。</p><p>update 表名 set 字段1=值1 [字段2=值2…] where 过滤行记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> tb_user <span class="hljs-keyword">set</span> userpwd<span class="hljs-operator">=</span><span class="hljs-number">8888</span> <span class="hljs-keyword">where</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> tb_user <span class="hljs-keyword">set</span> userpwd<span class="hljs-operator">=</span>good , age<span class="hljs-operator">=</span><span class="hljs-number">29</span> <span class="hljs-keyword">where</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;zzz&#x27;</span> <span class="hljs-keyword">and</span> pwd<span class="hljs-operator">=</span><span class="hljs-string">&#x27;123&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> tb_userset(username， userpwd）<span class="hljs-operator">=</span> （<span class="hljs-keyword">select</span>  <span class="hljs-string">&#x27;good&#x27;</span>，<span class="hljs-string">&#x27;block’ from dual） where userid=1；</span><br></code></pre></td></tr></table></figure><h2 id="删除delete"><a href="#删除delete" class="headerlink" title="删除delete"></a>删除delete</h2><p>通过delete语句可以删除表中的记录。（注意存在主外键约束的记录）<br>delete from表名where条件；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> userid<span class="hljs-operator">&lt;</span><span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> tb <span class="hljs-keyword">user</span>;<br></code></pre></td></tr></table></figure><h2 id="删除表的方式"><a href="#删除表的方式" class="headerlink" title="删除表的方式"></a>删除表的方式</h2><blockquote><h3 id="TRUNCATE"><a href="#TRUNCATE" class="headerlink" title="TRUNCATE"></a>TRUNCATE</h3></blockquote><p>TRUNCATE 表名</p><p>TRUNCATE清空一个表，表结构和索引约束不会变</p><p><img src="/post/47633/image-20230529090419060.png"></p><h1 id="DQL查询数据（重中重）"><a href="#DQL查询数据（重中重）" class="headerlink" title="DQL查询数据（重中重）"></a>DQL查询数据（重中重）</h1><h2 id="select基本结构和简单查询"><a href="#select基本结构和简单查询" class="headerlink" title="select基本结构和简单查询"></a>select基本结构和简单查询</h2><h3 id="select结构"><a href="#select结构" class="headerlink" title="select结构"></a>select结构</h3><p><img src="/post/47633/image-20230529154006183.png"></p><p>结构：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-operator">|</span>colname  [,...] <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> [alias]<br></code></pre></td></tr></table></figure><p>分析：<br>select 关键字 后面跟要查询的内容from关键字后面跟数据的来源<br>解析步骤：1)  from找来源 2) select挑数据<br>语法结构需记忆</p><h3 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h3><h4 id="1）查询所有"><a href="#1）查询所有" class="headerlink" title="1）查询所有"></a>1）查询所有</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> 表名;<br></code></pre></td></tr></table></figure><h4 id="2）查询部分字段"><a href="#2）查询部分字段" class="headerlink" title="2）查询部分字段"></a>2）查询部分字段</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 列<span class="hljs-number">1</span> , 列<span class="hljs-number">2</span> 列n <span class="hljs-keyword">from</span> 表名;<br></code></pre></td></tr></table></figure><h4 id="3）按顺序查询"><a href="#3）按顺序查询" class="headerlink" title="3）按顺序查询"></a>3）按顺序查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 自定顺序列<span class="hljs-number">1</span> , 自定顺序列<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> 表名;<br></code></pre></td></tr></table></figure><p><img src="/post/47633/image-20230529093807277.png"></p><h2 id="去重、别名和排序"><a href="#去重、别名和排序" class="headerlink" title="去重、别名和排序"></a>去重、别名和排序</h2><h3 id="去重-distinct"><a href="#去重-distinct" class="headerlink" title="去重 distinct"></a>去重 distinct</h3><p>去除重复记录<br>结构：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> 列名 <span class="hljs-keyword">from</span> 表名;<br></code></pre></td></tr></table></figure><h3 id="列别名"><a href="#列别名" class="headerlink" title="列别名"></a>列别名</h3><p>给列取名字<br>结构：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 列名 改名 <span class="hljs-keyword">from</span> 表名;<br><span class="hljs-keyword">select</span> 列名 <span class="hljs-keyword">as</span> 改名 <span class="hljs-keyword">from</span> 表名;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>多列在<span class="hljs-keyword">from</span>前加，号再将列名 改名写上<br></code></pre></td></tr></table></figure><h3 id="排序-order-by"><a href="#排序-order-by" class="headerlink" title="排序  order by"></a>排序  order by</h3><p>将查询出来的结果按照指定顺序排序<br>结构：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 列名<span class="hljs-number">1</span> , 列名<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> 表名 orer <span class="hljs-keyword">by</span> 列名(要按此排序) <span class="hljs-keyword">desc</span>(降序)<span class="hljs-operator">/</span><span class="hljs-keyword">asc</span>(升序);<br></code></pre></td></tr></table></figure><h4 id="多字段排序"><a href="#多字段排序" class="headerlink" title="多字段排序"></a>多字段排序</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 列名<span class="hljs-number">1</span> , 列名<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> 表名 orer <span class="hljs-keyword">by</span> 列名 <span class="hljs-keyword">desc</span>(降序)<span class="hljs-operator">/</span><span class="hljs-keyword">asc</span>(升序),列名 <span class="hljs-keyword">desc</span>(降序)<span class="hljs-operator">/</span><span class="hljs-keyword">asc</span>(升序);<br></code></pre></td></tr></table></figure><p>空值可以在语句末尾加<code>nulls first</code> 或 <code>nulls last</code></p><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><p>当我们查询的数据需要经过筛选时，我们会给出一些条件，只有当表中的记录满足我们所给的条件，才会成为我们的目标数据，这就需要借助我们的条件查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 查询内容 <span class="hljs-keyword">from</span> 数据来源 <span class="hljs-keyword">where</span> 行记录条件<br></code></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="条件运算"><a href="#条件运算" class="headerlink" title="条件运算"></a>条件运算</h4><p><strong>一般条件</strong>                   = 、&gt; 、&lt; 、&gt;= 、&lt;= 、</p><p><strong>都表示不等于</strong>          &lt;&gt;、!=、^=、</p><p>​                                 between and、in</p><h4 id="连接条件运算"><a href="#连接条件运算" class="headerlink" title="连接条件运算"></a>连接条件运算</h4><p>and、or、not</p><p>当查询条件有多个时，可能需要同时满足，或者只满足其中一个，或者不满足某个条件，则需要用到或。且。非</p><h4 id="null运算nvl"><a href="#null运算nvl" class="headerlink" title="null运算nvl()"></a>null运算nvl()</h4><p>nul比较特殊需要单独处理<br>is null、is not null、 not…is null</p><h3 id="where子句"><a href="#where子句" class="headerlink" title="where子句"></a>where子句</h3><p>判断条件不能直接得到，需要经过计算和过滤的</p><p><img src="/post/47633/image-20230529102652403.png"></p><p>嵌套查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> deptno <span class="hljs-operator">=</span> (<span class="hljs-keyword">select</span> deptno <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> dname <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;SALES&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="in具体值"><a href="#in具体值" class="headerlink" title="in具体值"></a>in具体值</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> deptno <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;xx&#x27;</span><br><span class="hljs-comment">--查询所有值条件为deptno为xx的具体条目</span><br></code></pre></td></tr></table></figure><h3 id="模糊查询-like"><a href="#模糊查询-like" class="headerlink" title="模糊查询 like"></a>模糊查询 like</h3><p>任意个任意字符 <strong>%</strong>   :占用若干字符（添加在字符前面表示可以有若干字符）</p><p>一个任意的字符 <strong>_</strong>   ：占用一个字符</p><p>当查询的条件为比较模糊时，可以使用模糊查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%S%&#x27;</span> ;<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查询emp表里ename列 含有S的属性<br>注意：内容区分大小写<br></code></pre></td></tr></table></figure><h3 id="联表查询-join"><a href="#联表查询-join" class="headerlink" title="联表查询 join"></a>联表查询 join</h3><h4 id="七种JOIN理论"><a href="#七种JOIN理论" class="headerlink" title="七种JOIN理论"></a>七种JOIN理论</h4><p><img src="/post/47633/1852729-20210315212321942-482432758.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--inner join</span><br><br><span class="hljs-keyword">SELECT</span> s.studentno,studentname,subjectno,studentresult <br><span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">AS</span> s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> <span class="hljs-keyword">AS</span> r<br><span class="hljs-keyword">ON</span> s.`studentno` <span class="hljs-operator">=</span>r.`studentno`;<br><br><span class="hljs-comment">--right join</span><br><br><span class="hljs-keyword">SELECT</span> s.studentno,studentname,subjectno,studentresult<br><span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">ON</span> s.`studentno` <span class="hljs-operator">=</span>r.`studentno`;<br><br><span class="hljs-comment">--left join</span><br><br><span class="hljs-keyword">SELECT</span> s.studentno,studentname,subjectno,studentresult<br><span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">ON</span> s.`studentno` <span class="hljs-operator">=</span>r.`studentno`;<br></code></pre></td></tr></table></figure><h4 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h4><p>把一个表分为两个表</p><p>**example:**有一个表</p><p><img src="/post/47633/image-20230529150520987.png"></p><p>对其作分类，父类的categoryid=子类的pid</p><p><img src="/post/47633/image-20230529150632307.png"></p><p><img src="/post/47633/image-20230529150740747.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> f.`categoryname` <span class="hljs-keyword">AS</span> father ,s.`categoryname` <span class="hljs-keyword">AS</span> son<br><span class="hljs-keyword">FROM</span> category <span class="hljs-keyword">AS</span> f,category <span class="hljs-keyword">AS</span> s<br><span class="hljs-keyword">WHERE</span> f.categoryid <span class="hljs-operator">=</span> s.pid<br></code></pre></td></tr></table></figure><h2 id="排序和分页"><a href="#排序和分页" class="headerlink" title="排序和分页"></a>排序和分页</h2><h3 id="order-by排序"><a href="#order-by排序" class="headerlink" title="order by排序"></a>order by排序</h3><p><img src="/post/47633/image-20230529154543250.png"></p><h2 id="子查询嵌套查询"><a href="#子查询嵌套查询" class="headerlink" title="子查询嵌套查询"></a>子查询嵌套查询</h2><p><img src="/post/47633/image-20230529192752781.png"></p><h1 id="mysql函数"><a href="#mysql函数" class="headerlink" title="mysql函数"></a>mysql函数</h1><h2 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h2><p>OracleSQL提供了用于执行特定操作的专用函数，这些函数大大增强了SQL语言的功能。函数可以接受零个或者多个输入参数，并且返回一个输出结果。这种由Oracle提供给我们的函数我们称为内置函数，除了有内置函数外还可以自定义函数。</p><p>​    根据函数的返回结果，我们将函数分为单行函数和多行函数</p><p>1、单行函数：对应在表记录时，一条记录返回一个结果。例如lower（x），将参数转换为小写</p><p>2、多行函数：也称组函数或聚合函数（重点）：此类函数可同时对多条记录进行操作，并返回一个结果（重点）。例如max（x）求最大值。</p><h2 id="常用单行函数"><a href="#常用单行函数" class="headerlink" title="常用单行函数"></a>常用单行函数</h2><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p>concat（x,y）连接字符串x和y</p><p>instr(x，str，start，n）.在x中查找str，可以指定从start开始，也可以指定从第n次开始</p><p>length（x）返回x的长度</p><p>lower（x）x转换为小写</p><p>upper（x）x转换为大写</p><p>ltrim（xtrim_str）把x左边截去trim_str字符串，缺省截去空格</p><p>rtrimt（xtrim_str）把x右边截去trim_str字符串，缺省截去空格</p><p>replace（x，old，new）在x中查找old，并替换为new</p><p>substr（x，start ，length）返回x的字符串，从start处开始，截取length个字符，缺省length，默认到结尾</p><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><p>abs（x）    x的绝对值</p><p>ceil（x）    向上取整</p><p>floor（x）    向下取整</p><p>mod（x，y）    对x求y的余数</p><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><p>sysdate    当前系统时间 </p><p>current_date    返回当前系统日期</p><p>add_months（d1，n1）返回在日期d1基础上再加n1个月后新的日期</p><p>last day(d1）返回日期d1所在月份最后一天的日期</p><p>months_between(d1.d2）返回日期d1到日期d2之间的月数</p><p>next_day(d1c1）返回日期d1在下周，星期几（参数c1）的日期</p><h3 id="转换函数"><a href="#转换函数" class="headerlink" title="转换函数"></a>转换函数</h3><p>to_char（x.c）将日期或数据x按照c的格式转换为char数据类型</p><p>to_date（x.c）将字符串x按照c的格式转换为日期</p><p>to_number(x）将字符串x转化为数字型</p><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><p>组函数同时对多条记录进行操作，并返回一个结果</p><p>count()    计数</p><p><img src="/post/47633/image-20230529194330738.png"></p><p>avg()    平均值</p><p>sum()    求和</p><p>max()    最大值</p><p>min()    最小值</p><p><font color="red">注意：null不参与运算</font></p><h3 id="group-by分组"><a href="#group-by分组" class="headerlink" title="group by分组"></a>group by分组</h3><p>group by分组，将满足条件的记录进一步按照某特性进行分组。提取每组记录中的共性</p><p>结构：select…from…where….goup by….</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> deptno,<span class="hljs-built_in">count</span>(deptno) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno;<br></code></pre></td></tr></table></figure><h3 id="having过滤组信息"><a href="#having过滤组信息" class="headerlink" title="having过滤组信息"></a>having过滤组信息</h3><p>要获取的组信息也许要满足一定条件时，我们通过hving来过滤组的条件。</p><p>结构：select…from…where…group by …having…</p><h3 id="过滤行记录和组信息"><a href="#过滤行记录和组信息" class="headerlink" title="过滤行记录和组信息"></a>过滤行记录和组信息</h3><p>行记录的过滤是针对每条记录的筛选，组信息的过滤是针对组的筛选，是可以同时出现的，先筛选行，再过滤组。</p><p>where筛选行，只能出现行信息</p><p>having过滤组，只能出现组信息</p><p>结构：select…from…where…groupby…having</p><p><img src="/post/47633/image-20230529194732403.png"></p><h2 id="2-3伪列和虚表"><a href="#2-3伪列和虚表" class="headerlink" title="2.3伪列和虚表"></a>2.3伪列和虚表</h2><h3 id="2-3-1伪列和表达式"><a href="#2-3-1伪列和表达式" class="headerlink" title="2.3.1伪列和表达式"></a>2.3.1伪列和表达式</h3><p>说明：查询不存在的列即伪列，当需要的结果不能直接从表中得到需要经过计算来展示则可以使用伪列<br>+表达式实现</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> emps<br><span class="hljs-keyword">select</span> ename,<span class="hljs-number">1</span> <span class="hljs-keyword">from</span> emp；<br></code></pre></td></tr></table></figure><p>查询员工的名称，工种，月工资，以及年薪（年薪=12个月的工资）<br>查询每个工资等级的平均工资（平均工资=（最低工资+最高工资）/2）</p><h4 id="1）null处理-—nvl"><a href="#1）null处理-—nvl" class="headerlink" title="1）null处理 —nvl()"></a><strong>1）null处理 —nvl()</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 条件<span class="hljs-operator">+</span>nvl(列，返回的数值) <span class="hljs-keyword">from</span> 表;<br></code></pre></td></tr></table></figure><p>查询员工的名称，工种，工资，奖金，以及月收入（月收入=工资+奖金）</p><h4 id="2）字符串拼接"><a href="#2）字符串拼接" class="headerlink" title="2）字符串拼接||"></a><strong>2）字符串拼接||</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 列名<span class="hljs-operator">/</span>条件<span class="hljs-operator">||</span><span class="hljs-string">&#x27;要拼接的字符串&#x27;</span> form 表名；<br></code></pre></td></tr></table></figure><p>查询员工的员工编号，姓名，以及将员工姓名和工种进行拼接后的字段（员工姓名-工种）</p><h3 id="2-3-2虚表dual"><a href="#2-3-2虚表dual" class="headerlink" title="2.3.2虚表dual"></a>2.3.2虚表dual</h3><p>​    dual是一个虚表，虚拟表，是用来构成select的语法规则，oracle保证dual里面永远只有一条记录。该表只有一行一列，它和其他表一样，可以执行插入、更新、删除操作，还可以执行drop操作。但是不要去执行drop表的操作，否则会使系统不能用，起不了数据库。</p><p>​    dual主要用来选择系统变量或是求一个表达式的值。如果我们不需要从具体的表来取得表中数据，而是单纯地味了得到一些我们想得到的信息，并要通过select完成时，就要借助一个对象，这个对象就是dual。</p><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="事务的四大特性"><a href="#事务的四大特性" class="headerlink" title="事务的四大特性"></a>事务的四大特性</h2><p>谈到事务一般都是以下四点:</p><p><strong>1.原子性(Atomicity)</strong><br>过去原子被认为是分割的最小单位, 类比事务, 事务是一个不可分割的工作单位, 事务中的操作要么全部成功要么全部失败.</p><p> 这个过程包含两个步骤:</p><p>1.A转给B 200元, A剩余600元</p><p>2.B收到A 200元, B剩余400元</p><p>原子性表示, 这两个步骤不可分割, 要么全部成功要么全部失败.</p><p><strong>2.一致性(Consistency)</strong><br>事物提交前和提交后, 数据都是合法的一致性状态, 即使发生异常也不会破坏数据库的完整性约束.(符合逻辑运算)</p><p>假设要求事务执行前后总有A的账户余额+B的账户余额=1000, 那么事务执行后该完整性约束仍然满足.因此这个事务就满足一致性.</p><p><strong>3.隔离性(isolation)</strong><br>多个用户并发(同时)访问数据库时, 数据库为每一个用户都开启事物, 为了防止多个事物的操作数据相互干扰, 多个并发事物之间要相互隔离.隔离性通过事务的隔离级别来定义, 并用锁机制来保证写操作的隔离性, MVCC来保证读操作的隔离性.</p><p> 假设A只有500元, 如果没有隔离性, 两个事务同时进行, 事务2可能会读取到事务1还未提交的数据.此时A就会转出700, 这显然是不符合逻辑的, 隔离性就是为了解决上述问题.</p><p><strong>4.持久性(durability)</strong><br>一个事物一旦被提交, 它对数据库的改变就是永久的, 不管是断电还是机器故障也不会对其有任何影响, 通过事务中重做日志(redo log)来保证, 事务修改之前会将变更信息预写到 redo log中, 如果数据库宕机, 恢复后会读取redo log中的数据恢复数据.</p><blockquote><p>隔离会导致的一些问题</p></blockquote><p><img src="/post/47633/image-20230530082325772.png"></p><h2 id="手动处理事务"><a href="#手动处理事务" class="headerlink" title="手动处理事务"></a>手动处理事务</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> autocommit <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">/*关闭自动提交*/</span><br><span class="hljs-keyword">set</span> autocommit <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">/*开启自动提交*/</span><br><br><br><br><span class="hljs-comment">--事务的手动处理</span><br><span class="hljs-keyword">set</span> autocommit <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">/*关闭自动提交*/</span><br><br><span class="hljs-keyword">start</span> transcation <span class="hljs-comment">--标记一个事务的开始,之后sql都在同一个事务内</span><br><span class="hljs-keyword">insert</span> xxx<br><span class="hljs-keyword">insert</span> xxx<br><br><span class="hljs-comment">--提交:持久化(succes)</span><br><span class="hljs-keyword">commit</span><br><span class="hljs-comment">--回滚:回到某个位置(fail)</span><br><span class="hljs-keyword">rollback</span><br><br><span class="hljs-comment">--事务结束</span><br><span class="hljs-keyword">set</span> autocommit <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">/*开启自动提交*/</span><br><br><span class="hljs-comment">--了解</span><br><span class="hljs-keyword">savepoint</span> 名称 <span class="hljs-comment">--设置事务保存点</span><br><span class="hljs-keyword">rollback</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">savepoint</span> 名称  <span class="hljs-comment">--回滚到保存点</span><br><span class="hljs-keyword">release</span> <span class="hljs-keyword">savepoint</span> 名称  <span class="hljs-comment">--撤销保存点</span><br></code></pre></td></tr></table></figure><blockquote><p>模拟转账场景</p></blockquote><p><img src="/post/47633/image-20230530083834984.png"></p><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li><p>主键索引</p><ul><li>唯一标识，主键不可重复，只能有一列作为主键</li></ul></li><li><p>唯一索引</p><ul><li>避免重复列出现，唯一索引可以重复，多个列都可以标识为唯一索引</li></ul></li><li><p>常规索引</p><ul><li>默认的，index，key关键字来设置</li></ul></li><li><p>全文索引</p><ul><li>在特定引擎下才有 MyISAM</li><li>快速定位数据</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--索引的使用</span><br><span class="hljs-comment">--1.在创建表时给字段增加索引</span><br><span class="hljs-comment">--2.创建完毕后增加索引</span><br><br><span class="hljs-comment">--显示所有索引</span><br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> student<br><span class="hljs-comment">--show index from 表名</span><br><br><br><span class="hljs-comment">--增加一个全文索引(索引名) 列名</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> school.student <span class="hljs-keyword">add</span> fulltext index `studentname`(`studentname`)<br><br><span class="hljs-comment">--explain 分析sql执行情况</span><br>explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student; <span class="hljs-comment">--非全文索引</span><br><br>explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-keyword">match</span>(studentname) against(<span class="hljs-string">&#x27;刘&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="/post/47633/image-20230530201818773.png"></p><h1 id="权限管理和备份"><a href="#权限管理和备份" class="headerlink" title="权限管理和备份"></a>权限管理和备份</h1><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">--创建用户 </span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> loh IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;123456&#x27;</span><br><br><span class="hljs-comment">--修改当前用户密码</span><br><span class="hljs-keyword">SET</span> PASSWORD <span class="hljs-operator">=</span> PASSWORD(<span class="hljs-string">&#x27;12345678&#x27;</span>)<br><span class="hljs-comment">--修改指定用户密码</span><br><span class="hljs-keyword">SET</span> PASSWORD <span class="hljs-keyword">FOR</span> loh@<span class="hljs-operator">%</span> <span class="hljs-operator">=</span> PASSWORD(<span class="hljs-string">&#x27;12345678&#x27;</span>)<br><br><span class="hljs-comment">--重命名 rename user 旧名字 to 新名字</span><br>rename <span class="hljs-keyword">user</span> loh <span class="hljs-keyword">to</span> loh2<br><br><span class="hljs-comment">--用户授权all privileges全部权限，库，表</span><br><span class="hljs-comment">--all privileges权限，包含除授权权限外的全部权限</span><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> privileges <span class="hljs-keyword">on</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> loh2<br><br><span class="hljs-comment">--查询权限</span><br><span class="hljs-keyword">show</span> grants <span class="hljs-keyword">for</span> loh2<br><span class="hljs-keyword">show</span> grants <span class="hljs-keyword">for</span> root<span class="hljs-variable">@localhost</span><br><br><span class="hljs-comment">--root用户权限：grant all privileges on *.* &#x27;root&#x27;@&#x27;localhost&#x27; with grant option</span><br><br><span class="hljs-comment">--撤销权限, revoke哪些权限在哪个库撤销</span><br><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">all</span> privileges <span class="hljs-keyword">on</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> loh2<br><br><span class="hljs-comment">--删除用户</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">user</span> loh2<br></code></pre></td></tr></table></figure><h2 id="mysql备份"><a href="#mysql备份" class="headerlink" title="mysql备份"></a>mysql备份</h2><ul><li>保证安全性</li><li>数据转移</li></ul><p> <img src="/post/47633/image-20230531101726886.png"></p><h1 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h1><p><img src="/post/47633/image-20230531101925972.png"></p><h2 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h2><h3 id="第一范式："><a href="#第一范式：" class="headerlink" title="第一范式："></a>第一范式：</h3><p>原子性，保证不可再分</p><h3 id="第二范式："><a href="#第二范式：" class="headerlink" title="第二范式："></a>第二范式：</h3><p>在第一范式基础上，每张表只描述一件事情</p><h3 id="第三范式："><a href="#第三范式：" class="headerlink" title="第三范式："></a>第三范式：</h3><p>第三范式需要确保数据表的每一列都与主键直接相关，不能间接相关</p><p><img src="/post/47633/image-20230601162144437.png"></p><h1 id="JDBC（重点）"><a href="#JDBC（重点）" class="headerlink" title="JDBC（重点）"></a>JDBC（重点）</h1><h2 id="数据库驱动"><a href="#数据库驱动" class="headerlink" title="数据库驱动"></a>数据库驱动</h2><p>下载mysql驱动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">//加载驱动</span><br>Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br><br><span class="hljs-comment">//设置数据库地址,使用unicode编码,使用utf8编码,使用安全连接</span><br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbcstu?useUnicode=true&amp;character=utf8&amp;useSSL=true&quot;</span>;<br><span class="hljs-comment">//用户名 密码</span><br><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br><br><span class="hljs-comment">//连接并获取数据库对象</span><br><span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url,username,password);<br><br><span class="hljs-comment">//执行sql的对象</span><br><span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br><span class="hljs-comment">//定义sql语句</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT * FROM USER&quot;</span>;<br><span class="hljs-comment">//获取执行sql的结果对象</span><br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(sql);<br><br><span class="hljs-comment">//循环输出</span><br><span class="hljs-keyword">while</span> (resultSet.next())&#123;<br>    System.out.println(<span class="hljs-string">&quot;id：&quot;</span>+resultSet.getObject(<span class="hljs-string">&quot;id&quot;</span>));<br>    System.out.println(<span class="hljs-string">&quot;name：&quot;</span>+resultSet.getObject(<span class="hljs-string">&quot;name&quot;</span>));<br>    System.out.println(<span class="hljs-string">&quot;pwd：&quot;</span>+resultSet.getObject(<span class="hljs-string">&quot;password&quot;</span>));<br>    System.out.println(<span class="hljs-string">&quot;email：&quot;</span>+resultSet.getObject(<span class="hljs-string">&quot;email&quot;</span>));<br>    System.out.println(<span class="hljs-string">&quot;birth：&quot;</span>+resultSet.getObject(<span class="hljs-string">&quot;birthday&quot;</span>));<br>&#125;<br><br><span class="hljs-comment">//释放连接</span><br>resultSet.close();<br>statement.close();<br>connection.close();<br></code></pre></td></tr></table></figure><blockquote><p>DriverManager</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//加载驱动1</span><br>Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br><br><span class="hljs-comment">//加载驱动2</span><br>DriverManager.registerDriver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">com</span>.mysql.cj.jdbc.Driver());<br></code></pre></td></tr></table></figure><blockquote><p>statement执行类</p></blockquote><p>execute执行语句</p><p><img src="/post/47633/image-20230601194714172.png"></p><p><img src="/post/47633/image-20230601194848888.png"></p><p><img src="/post/47633/image-20230601194905621.png"></p><h2 id="statement对象"><a href="#statement对象" class="headerlink" title="statement对象"></a>statement对象</h2><p>jdbc中的statement对象用于向数据库发送SQL语句，想完成对数据库的增删改查，只需要通过这个对象向数据库发送增删改查语句即可。</p><blockquote><p>CRUD操作 – create</p></blockquote><p>使用executeUpdate（String sql）方法完成数据添加操作，示例操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Statement</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> conn.createStatement();<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into user(...) values(....)&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> st.executeUpdate(sql);<br><span class="hljs-keyword">if</span>(num&gt;<span class="hljs-number">0</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;插入成功！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>CRUD操作 – delete</p></blockquote><p>使用executeUpdate(String sql)方法完成数据删除操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Statement</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> conn.createStatement();<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delete from user where id = 1&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> st.executeUpdate(sql);<br><span class="hljs-keyword">if</span>(num&gt;<span class="hljs-number">0</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;删除成功！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>CRUD操作 – update</p></blockquote><p>使用executeUpdate(String sql)方法完成数据修改操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Statement</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> conn.createStatement();<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update user set name = &#x27;&#x27; where name = &#x27;&#x27; &quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> st.executeUpdate(sql);<br><span class="hljs-keyword">if</span>(num&gt;<span class="hljs-number">0</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;修改成功！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>CRUD操作 – read</p></blockquote><p>使用executeQuery(String sql)方法完成数据库查询操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Statement</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> conn.createStatement();<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot; select * from user where id = 1 &quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> st.executeUpdate(sql);<br><span class="hljs-keyword">while</span>(rs.next())&#123;<br><span class="hljs-comment">//根据获取列表的数据类型，分别调用rs的相应方法映射到JAVA对象中</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>插入数据程序实例</strong></p></blockquote><p>新建db,properties文件，存放连接数据库所用参数</p><p><img src="/post/47633/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzMzOTQwMTA4,size_16,color_FFFFFF,t_70#pic_center.png"></p><p>db.properties文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">driver=com.mysql.cj.jdbc.Driver<br>url=jdbc:mysql:<span class="hljs-comment">//localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span><br>username= <span class="hljs-type">root</span><br><span class="hljs-variable">password</span> <span class="hljs-operator">=</span> root<br></code></pre></td></tr></table></figure><p>新建工具类，写有连接数据库使用的代码，方便其他类调用。</p><p><img src="/post/47633/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzMzOTQwMTA4,size_16,color_FFFFFF,t_70#pic_center-1685620298356-3.png"></p><p>jdbcUtils.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wang.liesson2.utils;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jdbcUtils</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <br>    <span class="hljs-keyword">static</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>           <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> jdbcUtils.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;db.properties&quot;</span>);<br>            <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>            properties.load(in);<br>            driver = properties.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br>            url = properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>            username = properties.getProperty(<span class="hljs-string">&quot;username&quot;</span>);<br>            password = properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>            <span class="hljs-comment">//驱动只需要加载一次</span><br>            Class.forName(driver);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">//获取连接</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException&#123;<br>        <span class="hljs-keyword">return</span> DriverManager.getConnection(url,username,password);<br>    &#125;<br>   <br>    <span class="hljs-comment">//释放连接资源</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">release</span><span class="hljs-params">(Connection conn, Statement st, ResultSet rs)</span>&#123;<br>        <span class="hljs-keyword">if</span>(rs!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                rs.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(st!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                st.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(conn!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试插入类<img src="/post/47633/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzMzOTQwMTA4,size_16,color_FFFFFF,t_70#pic_center-1685620327858-6.png"></p><p>TestInsert.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wang.liesson2;<br><br><span class="hljs-keyword">import</span> com.wang.liesson2.utils.jdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestInsert</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            conn = jdbcUtils.getConnection(); <span class="hljs-comment">//获取连接</span><br>            st = conn.createStatement();  <span class="hljs-comment">//创建Statement对象</span><br>            <br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;INSERT INTO users (id,`NAME`,`PASSWORD`,`email`,`birthday`)\n&quot;</span> +<br>                    <span class="hljs-string">&quot;VALUES(4,&#x27;wangchen&#x27;,&#x27;123456&#x27;,&#x27;3247829@qq.com&#x27;,&#x27;2021-1-1&#x27;)\n&quot;</span>;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span>  st.executeUpdate(sql);<br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//如果数据大于0</span><br>                System.out.println(<span class="hljs-string">&quot;插入成功！&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            jdbcUtils.release(conn,st,rs);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p>sql注入：通过漏洞方法使数据库判断条件为true，未经过过滤直接返回表值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs SQL">package com.loh.utils;<br><br>import java.sql.Connection;<br>import java.sql.ResultSet;<br>import java.sql.Statement;<br><br>public class TestSqlInject &#123;<br>    public <span class="hljs-keyword">static</span> void main(String[] args) &#123;<br>        login(&quot;&#x27; or&#x27; 1=1&quot;,&quot;123456&quot;);<br>    &#125;<br>    public <span class="hljs-keyword">static</span> void login(String username,String password)&#123;<br>        Connection conn <span class="hljs-operator">=</span> <span class="hljs-keyword">null</span>;<br>        Statement st <span class="hljs-operator">=</span> <span class="hljs-keyword">null</span>;<br>        ResultSet rs <span class="hljs-operator">=</span> <span class="hljs-keyword">null</span>;<br><br>        try&#123;<br><br>            conn <span class="hljs-operator">=</span> JdbcUtils.getConnection();<br>            st<span class="hljs-operator">=</span>conn.createStatement();<br><br>            <span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">USER</span> <span class="hljs-keyword">WHERE</span> `name` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;zhangsan&#x27;</span> <span class="hljs-keyword">AND</span> `password` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br>            String <span class="hljs-keyword">sql</span> <span class="hljs-operator">=</span> &quot;SELECT * FROM USER where `name` =&#x27;&quot;<span class="hljs-operator">+</span>username<span class="hljs-operator">+</span>&quot;&#x27;and `password` = &#x27;&quot;<span class="hljs-operator">+</span>password<span class="hljs-operator">+</span>&quot;&#x27;&quot;;<br>            rs <span class="hljs-operator">=</span> st.executeQuery(<span class="hljs-keyword">sql</span>);<br><br>            while (rs.next())&#123;<br>                System.out.println(&quot;name：&quot;<span class="hljs-operator">+</span>rs.getObject(&quot;name&quot;));<br>                System.out.println(&quot;pwd：&quot;<span class="hljs-operator">+</span>rs.getObject(&quot;password&quot;));<br>                System.out.println(&quot;====================&quot;);<br>            &#125;<br><br>        &#125;catch (Exception e)&#123;&#125;<br><br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Preparedstatement对象"><a href="#Preparedstatement对象" class="headerlink" title="Preparedstatement对象"></a>Preparedstatement对象</h2><h3 id="selcet"><a href="#selcet" class="headerlink" title="selcet"></a>selcet</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs SQL">package com.loh.utils;<br><br>import java.sql.Connection;<br>import java.sql.PreparedStatement;<br>import java.sql.ResultSet;<br><br><br>public class TestPreparedStatementSelect &#123;<br>    public <span class="hljs-keyword">static</span> void main(String[] args) &#123;<br>        login();<br>    &#125;<br>    public <span class="hljs-keyword">static</span> void login () &#123;<br>        Connection conn <span class="hljs-operator">=</span> <span class="hljs-keyword">null</span>;<br>        PreparedStatement st <span class="hljs-operator">=</span> <span class="hljs-keyword">null</span>;<br>        ResultSet rs <span class="hljs-operator">=</span> <span class="hljs-keyword">null</span>;<br><br>        try &#123;<br><br>            conn <span class="hljs-operator">=</span> JdbcUtils.getConnection();<br>            <span class="hljs-operator">/</span><span class="hljs-operator">/</span>使用？作为占位符代替参数预编译<br>            String <span class="hljs-keyword">sql</span> <span class="hljs-operator">=</span> &quot;select * from user where id = ?&quot;;<br>            st <span class="hljs-operator">=</span> conn.prepareStatement(<span class="hljs-keyword">sql</span>);<br>            <span class="hljs-operator">/</span><span class="hljs-operator">/</span>手动给参数赋值<br>            <span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">set</span>可以指定参数类型，(<span class="hljs-keyword">sql</span>参数下标,设置值)<br>            st.setInt(<span class="hljs-number">1</span>, <span class="hljs-number">8</span>);<br><br>            rs <span class="hljs-operator">=</span> st.executeQuery();<br>            while (rs.next())&#123;<br>                System.out.println(&quot;id：&quot;<span class="hljs-operator">+</span>rs.getObject(&quot;id&quot;));<br>                System.out.println(&quot;name：&quot;<span class="hljs-operator">+</span>rs.getObject(&quot;name&quot;));<br>                System.out.println(&quot;pwd：&quot;<span class="hljs-operator">+</span>rs.getObject(&quot;password&quot;));<br>                System.out.println(&quot;email：&quot;<span class="hljs-operator">+</span>rs.getObject(&quot;email&quot;));<br>                System.out.println(&quot;birth：&quot;<span class="hljs-operator">+</span>rs.getObject(&quot;birthday&quot;));<br>            &#125;<br><br>        &#125; catch (Exception e) &#123;<br><br>        &#125; finally &#123;<br>            JdbcUtils.release(conn, st, <span class="hljs-keyword">null</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs SQL">package com.loh.utils;<br><br>import java.sql.Connection;<br>import java.sql.PreparedStatement;<br>import java.sql.ResultSet;<br><br>public class TestPreparedStatementInsert &#123;<br>    public <span class="hljs-keyword">static</span> void main(String[] args) &#123;<br>        login();<br>    &#125;<br>    public <span class="hljs-keyword">static</span> void login()&#123;<br>        Connection conn <span class="hljs-operator">=</span> <span class="hljs-keyword">null</span>;<br>        PreparedStatement st <span class="hljs-operator">=</span> <span class="hljs-keyword">null</span>;<br>        ResultSet rs <span class="hljs-operator">=</span> <span class="hljs-keyword">null</span>;<br><br>        try&#123;<br><br>            conn <span class="hljs-operator">=</span> JdbcUtils.getConnection();<br>            <span class="hljs-operator">/</span><span class="hljs-operator">/</span>使用？作为占位符代替参数预编译<br>            String <span class="hljs-keyword">sql</span> <span class="hljs-operator">=</span> &quot;insert into user(`id`,`name`,`password`,`email`,`birthday`) values(?,?,?,?,?)&quot;;<br>            st<span class="hljs-operator">=</span>conn.prepareStatement(<span class="hljs-keyword">sql</span>);<br>            <span class="hljs-operator">/</span><span class="hljs-operator">/</span>手动给参数赋值<br>            <span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">set</span>可以指定参数类型，(<span class="hljs-keyword">sql</span>参数下标,设置值)<br>            st.setInt(<span class="hljs-number">1</span>,<span class="hljs-number">9</span>);<br>            st.setString(<span class="hljs-number">2</span>,&quot;wangwu&quot;);<br>            st.setString(<span class="hljs-number">3</span>,&quot;654321&quot;);<br>            st.setString(<span class="hljs-number">4</span>,&quot;654321@da.com&quot;);<br>            st.setDate(<span class="hljs-number">5</span>,<span class="hljs-keyword">new</span> java.sql.Date(<span class="hljs-keyword">new</span> java.util.Date().getTime()));<br>            <span class="hljs-type">int</span> i <span class="hljs-operator">=</span> st.executeUpdate();<br><br>            if(i <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> )&#123;<br>                System.out.println(&quot;插入成功&quot;);<br>            &#125;<br><br><br>        &#125;catch (Exception e)&#123;<br><br>        &#125;finally &#123;<br>            JdbcUtils.release(conn,st,<span class="hljs-keyword">null</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="IDEA连接数据库"><a href="#IDEA连接数据库" class="headerlink" title="IDEA连接数据库"></a>IDEA连接数据库</h2><p><img src="/post/47633/242a44dc9d05400c9bc85be58d270ae4.png" alt="img"></p><ul><li><strong>找到database</strong></li><li><strong>点击“+”</strong></li><li><strong>点击Data Source</strong></li><li><strong>最后点击Mysql</strong></li></ul><h3 id="配置连接💎"><a href="#配置连接💎" class="headerlink" title="配置连接💎"></a>配置连接💎</h3><p><img src="/post/47633/56048e50a79a4fd6a448db468e25c530.png" alt="img"></p><ul><li> <strong>连接的名称</strong></li><li> <strong>连接数据库的地址跟端口 地址默认localhost 端口默认3306</strong></li><li> <strong>数据库的用户名跟密码</strong></li><li> <strong>需要连接数据库的名字</strong></li><li> <strong>测试连接</strong></li></ul><p> <strong>接着就是配置我们的驱动！</strong></p><p><img src="/post/47633/cd56b0d18cb5492cb6b55fa46ca03d76.png" alt="img"></p><p><strong>Drivers-&gt;MySQL-&gt;Driver files</strong></p><p><strong>回到 Date Sources，出现*<em>**绿色的小勾**</em>*，即表示连接成功，然后点击OK，结束配置。</strong></p><p><img src="/post/47633/b2cad7b1eff3463eadae2338c7186a19.png" alt="img"></p><p><strong>还有一种情况</strong></p><p><img src="/post/47633/5f6a2f62cc35450b9992c02ca0873827.png" alt="img"></p><p><strong>相信大家都会遇到这种情况吧</strong></p><p><strong>小王来教大家如何解决！</strong></p><p><strong>我们先把错误代码copy 翻译一下</strong></p><p><img src="/post/47633/437be7d072aa499f98a34eef31b1a100.png" alt="img"></p><p><strong>这就是mysql里的时区是默认的！</strong></p><p><strong>我们需要更改时区！</strong></p><blockquote><p><strong>show variables like’%time_zone’;</strong></p></blockquote><p><strong>注意*<em>**分号不能省略**</em>*</strong> </p><p><img src="/post/47633/469dcd8ec2ec477ea4f6772b997dc458.png" alt="img"></p><p><strong>默认是system</strong></p><p><strong>我们需要插入一条sql语句</strong></p><blockquote><ul><li> <strong>set time_zone=’+8:00’;</strong></li></ul></blockquote><p> <img src="/post/47633/87f6b7d700214a78b7cb8c7438dec308.png" alt="img"></p><p><strong>接着小王才查看一下！</strong></p><p> <img src="/post/47633/11cb08ea35e64030ad21c893b684e3e5.png" alt="img"></p><p><strong>成功！！</strong></p><p> <img src="/post/47633/1ace7c71b8e44b299b739b8af4bf37dc.png" alt="img"></p><p>接下来点击Database</p><p><strong>默认是system</strong></p><p><strong>我们需要插入一条sql语句</strong></p><blockquote><ul><li> <strong>set time_zone=’+8:00’;</strong></li></ul></blockquote><p> <img src="/post/47633/87f6b7d700214a78b7cb8c7438dec308-1686033003324-23.png" alt="img"></p><p><strong>接着小王才查看一下！</strong></p><p> <img src="/post/47633/11cb08ea35e64030ad21c893b684e3e5-1686033003324-25.png" alt="img"></p><p><strong>成功！！</strong></p><p> <img src="/post/47633/1ace7c71b8e44b299b739b8af4bf37dc-1686033003324-27.png" alt="img"></p><p>接下来点<strong>默认是system</strong></p><p><strong>我们需要插入一条sql语句</strong></p><blockquote><ul><li> <strong>set time_zone=’+8:00’;</strong></li></ul></blockquote><p> <img src="https://img-blog.csdnimg.cn/87f6b7d700214a78b7cb8c7438dec308.png" alt="img"></p><p><strong>接着小王才查看一下！</strong></p><p> <img src="/post/47633/11cb08ea35e64030ad21c893b684e3e5-1686033007808-34.png" alt="img"></p><p><strong>成功！！</strong></p><p> <img src="https://img-blog.csdnimg.cn/1ace7c71b8e44b299b739b8af4bf37dc.png" alt="img"></p><p>接下来点击Database</p><p><strong>默认是system</strong></p><p><strong>我们需要插入一条sql语句</strong></p><blockquote><ul><li> <strong>set time_zone=’+8:00’;</strong></li></ul></blockquote><p> <img src="/post/47633/87f6b7d700214a78b7cb8c7438dec308-1686033015285-41.png" alt="img"></p><p><strong>接着小王才查看一下！</strong></p><p> <img src="/post/47633/11cb08ea35e64030ad21c893b684e3e5-1686033015285-43.png" alt="img"></p><p><strong>成功！！</strong></p><p> <img src="/post/47633/1ace7c71b8e44b299b739b8af4bf37dc-1686033015285-45.png" alt="img"></p><p>接下来点击Database</p><p><img src="/post/47633/ef541228f6564c9c8422c7c6fdeaf4e5.png" alt="img"></p><h2 id="IDEA操作事务"><a href="#IDEA操作事务" class="headerlink" title="IDEA操作事务"></a>IDEA操作事务</h2><ul><li><p>关闭自动提交</p></li><li><p>提交事务</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs SQL">package com.loh.utils;<br><br>import java.sql.Connection;<br>import java.sql.PreparedStatement;<br>import java.sql.ResultSet;<br>import java.sql.SQLException;<br><br>public class TestTransaction &#123;<br>    public <span class="hljs-keyword">static</span> void main(String[] args) &#123;<br>        Connection conn <span class="hljs-operator">=</span> <span class="hljs-keyword">null</span>;<br>        PreparedStatement st <span class="hljs-operator">=</span> <span class="hljs-keyword">null</span>;<br>        ResultSet rs <span class="hljs-operator">=</span> <span class="hljs-keyword">null</span>;<br><br>        try&#123;<br><br>            conn <span class="hljs-operator">=</span> JdbcUtils.getConnection();<br><br>            <span class="hljs-operator">/</span><span class="hljs-operator">/</span>关闭数据库自动提交<br>            conn.setAutoCommit(<span class="hljs-literal">false</span>);<br>            <br>            String sql1 <span class="hljs-operator">=</span> &quot;update user set `id` = &#x27;15&#x27; where id = &#x27;10&#x27;&quot; ;<br>            st<span class="hljs-operator">=</span>conn.prepareStatement(sql1);<br>            String sql2 <span class="hljs-operator">=</span> &quot;update user set `id` = &#x27;16&#x27; where id = &#x27;8&#x27;&quot; ;<br>            st<span class="hljs-operator">=</span>conn.prepareStatement(sql2);<br><br>            <span class="hljs-type">int</span> i<span class="hljs-operator">=</span>st.executeUpdate();<br><br>            <span class="hljs-operator">/</span><span class="hljs-operator">/</span>业务完成，提交事务<br>            conn.commit();<br>            <br>            if(i <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> )&#123;<br>                System.out.println(&quot;修改成功&quot;);<br>            &#125;<br>            <br>        &#125;catch (<span class="hljs-keyword">SQLException</span> e)&#123;<br>            try &#123;<br>            conn.rollback();<br>            &#125;catch (<span class="hljs-keyword">SQLException</span> e1)&#123;<br>                e1.printStackTrace();<br>            &#125;<br>        &#125;finally &#123;<br>            JdbcUtils.release(conn,st,<span class="hljs-keyword">null</span>);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><p><img src="/post/47633/image-20230607200251444.png"></p><p><img src="/post/47633/image-20230607200309790.png"></p><blockquote><p>DBCP</p></blockquote><p><img src="/post/47633/image-20230607201041820.png"></p><blockquote><p>C3P0</p></blockquote><p><img src="/post/47633/image-20230607201422290.png"></p><p><img src="/post/47633/image-20230607201441631.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>前端基础-JavaScript高级</title>
    <link href="https://bugdev.tk/post/8016/"/>
    <id>https://bugdev.tk/post/8016/</id>
    <published>2023-03-29T04:59:00.000Z</published>
    <updated>2024-06-11T06:37:40.836Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><h2 id="浏览器对象模型-BOM"><a href="#浏览器对象模型-BOM" class="headerlink" title="浏览器对象模型 (BOM)"></a>浏览器对象模型 (BOM)</h2><p>浏览器对象模型（<strong>B</strong>rowser <strong>O</strong>bject <strong>M</strong>odel (BOM)）尚无正式标准。</p><p>由于现代浏览器已经（几乎）实现了 JavaScript 交互性方面的相同方法和属性，因此常被认为是 BOM 的方法和属性。</p><hr><h2 id="Window-对象"><a href="#Window-对象" class="headerlink" title="Window 对象"></a>Window 对象</h2><p>所有浏览器都支持 window 对象。它表示浏览器窗口。</p><p>所有 JavaScript 全局对象、函数以及变量均自动成为 window 对象的成员。</p><p>全局变量是 window 对象的属性。</p><p>全局函数是 window 对象的方法。</p><p>甚至 HTML DOM 的 document 也是 window 对象的属性之一：</p><figure class="highlight dart"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">window</span>.<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;header&quot;</span>);<br></code></pre></td></tr></table></figure><p>与此相同：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">document.getElementById(<span class="hljs-string">&quot;header&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="Window-尺寸"><a href="#Window-尺寸" class="headerlink" title="Window 尺寸"></a>Window 尺寸</h3><p>有三种方法能够确定浏览器窗口的尺寸。</p><p>对于Internet Explorer、Chrome、Firefox、Opera 以及 Safari：</p><ul><li>window.innerHeight - 浏览器窗口的内部高度(包括滚动条)</li><li>window.innerWidth - 浏览器窗口的内部宽度(包括滚动条)</li></ul><p>对于 Internet Explorer 8、7、6、5：</p><ul><li>document.documentElement.clientHeight</li><li>document.documentElement.clientWidth</li></ul><p>或者</p><ul><li>document.body.clientHeight</li><li>document.body.clientWidth</li></ul><h3 id="其他-Window-方法"><a href="#其他-Window-方法" class="headerlink" title="其他 Window 方法"></a>其他 Window 方法</h3><p>一些其他方法：</p><ul><li>window.open() - 打开新窗口</li><li>window.close() - 关闭当前窗口</li><li>window.moveTo() - 移动当前窗口</li><li>window.resizeTo() - 调整当前窗口的尺寸</li></ul><h3 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h3><p><img src="/post/8016/image-20230520083758856.png"></p><h3 id="Screen"><a href="#Screen" class="headerlink" title="Screen"></a>Screen</h3><p><img src="/post/8016/image-20230520084108384.png"></p><h3 id="location"><a href="#location" class="headerlink" title="location"></a>location</h3><p><img src="/post/8016/image-20230520084515994.png"></p><h3 id="document"><a href="#document" class="headerlink" title="document"></a>document</h3><p>代表当前页面HTML DOM数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span>; <span class="hljs-comment">//获取title</span><br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title class_">ElementById</span>();<span class="hljs-comment">//获取网页元素</span><br><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>;<span class="hljs-comment">//获取cookie</span><br><span class="hljs-comment">//服务器设置httpOnly</span><br></code></pre></td></tr></table></figure><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><p>通过history可以操作页面的一些历史信息，包括前进后退等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">history.<span class="hljs-title function_">back</span>() <span class="hljs-comment">//后退</span><br>history.<span class="hljs-property">forward</span> <span class="hljs-comment">//前进</span><br></code></pre></td></tr></table></figure><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><h2 id="HTML-DOM-文档对象模型"><a href="#HTML-DOM-文档对象模型" class="headerlink" title="HTML DOM (文档对象模型)"></a>HTML DOM (文档对象模型)</h2><p>当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。</p><p><strong>HTML DOM</strong> 模型被构造为<strong>对象</strong>的树：</p><h2 id="HTML-DOM-树"><a href="#HTML-DOM-树" class="headerlink" title="HTML DOM 树"></a>HTML DOM 树</h2><p><img src="/post/8016/pic_htmltree.gif"></p><p>通过可编程的对象模型，JavaScript 获得了足够的能力来创建动态的 HTML。</p><ul><li>JavaScript 能够改变页面中的所有 HTML 元素</li><li>JavaScript 能够改变页面中的所有 HTML 属性</li><li>JavaScript 能够改变页面中的所有 CSS 样式</li><li>JavaScript 能够对页面中的所有事件做出反应</li></ul><h2 id="getElement"><a href="#getElement" class="headerlink" title="getElement"></a>getElement</h2><ul><li>通过 id 找到 HTML 元素  //ById</li><li>通过标签名找到 HTML 元素  //ByTargetName</li><li>通过类名找到 HTML 元素 //ByClassName</li></ul><h2 id="修改DOM节点和css"><a href="#修改DOM节点和css" class="headerlink" title="修改DOM节点和css"></a>修改DOM节点和css</h2><p><img src="/post/8016/image-20230520141449279.png"></p><h3 id="改变-HTML-输出流"><a href="#改变-HTML-输出流" class="headerlink" title="改变 HTML 输出流"></a>改变 HTML 输出流</h3><p>JavaScript 能够创建动态的 HTML 内容：</p><p><strong>今天的日期是： Sat May 20 2023 14:04:22 GMT+0800 (中国标准时间)</strong></p><p>在 JavaScript 中，document.write() 可用于直接向 HTML 输出流写内容。</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-title class_">Date</span>());</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="改变-HTML-内容"><a href="#改变-HTML-内容" class="headerlink" title="改变 HTML 内容"></a>改变 HTML 内容</h3><p>修改 HTML 内容的最简单的方法是使用 innerHTML 属性。</p><p>如需改变 HTML 元素的内容，请使用这个语法：</p><p>document.getElementById(<em>id</em>).innerHTML=<em>新的 HTML</em></p><p>本例改变了 </p><p>元素的内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS">&lt;html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;p1&quot;</span>).<span class="hljs-property">innerHTML</span>=<span class="hljs-string">&quot;新文本!&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="改变-HTML-属性"><a href="#改变-HTML-属性" class="headerlink" title="改变 HTML 属性"></a>改变 HTML 属性</h3><p>如需改变 HTML 元素的属性，请使用这个语法：</p><p>document.getElementById(<em>id</em>).<em>attribute=新属性值</em></p><p>本例改变了 <img> 元素的 src 属性：</p><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;image&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;smiley.gif&quot;</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;image&quot;</span>).<span class="hljs-property">src</span>=<span class="hljs-string">&quot;landscape.jpg&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><p><img src="/post/8016/image-20230520143303192.png"></p><h3 id="追加"><a href="#追加" class="headerlink" title="追加"></a>追加</h3><p><img src="/post/8016/image-20230520150914868.png"></p><h3 id="创建新标签"><a href="#创建新标签" class="headerlink" title="创建新标签"></a>创建新标签</h3><p><img src="/post/8016/image-20230520151151455.png"></p><h2 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h2><p>获取表单数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html">var x = document.getElementById(&#x27;id&#x27;)//获取表单DOM<br>x.value //获取输入值<br><br>//单选框获取html源码<br>//<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;man&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;boy&quot;</span>&gt;</span> man<br>//<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;woman&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;girl&quot;</span>&gt;</span>woman<br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> boy_raido = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;boy&#x27;</span>);<span class="hljs-comment">//获取DOM</span></span><br><span class="language-javascript">    boy_raido.<span class="hljs-property">checked</span><span class="hljs-comment">//返回bool值</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="表单数据加密"><a href="#表单数据加密" class="headerlink" title="表单数据加密"></a>表单数据加密</h3><p><img src="/post/8016/image-20230520201505801.png"></p><p><img src="/post/8016/image-20230520201523919.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>前端基础-JavaScript基础</title>
    <link href="https://bugdev.tk/post/34209/"/>
    <id>https://bugdev.tk/post/34209/</id>
    <published>2023-03-26T04:54:00.000Z</published>
    <updated>2024-06-11T06:37:51.147Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>JavaScript 是 Web 的编程语言。</p><p>所有现代的 HTML 页面都可以使用 JavaScript。</p><h2 id="JavaScript-是脚本语言"><a href="#JavaScript-是脚本语言" class="headerlink" title="JavaScript 是脚本语言"></a>JavaScript 是脚本语言</h2><p>JavaScript 是一种轻量级的编程语言。</p><p>JavaScript 是可插入 HTML 页面的编程代码。</p><h1 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h1><h2 id="内部标签"><a href="#内部标签" class="headerlink" title="内部标签"></a>内部标签</h2><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-comment">//js代码    </span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="外部引入"><a href="#外部引入" class="headerlink" title="外部引入"></a>外部引入</h2><p>先有一个js文件</p><p>html代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">&quot;路径&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><h1 id="调试代码"><a href="#调试代码" class="headerlink" title="调试代码"></a>调试代码</h1><p>浏览器F12</p><p><img src="/post/34209/%E6%8E%A7%E5%88%B6%E5%8F%B0.png"></p><p><code>console.log( ) </code>    //输出代码，等价于java的sout</p><h1 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h1><p>var 变量名 = 变量值</p><p>js只需要var来定义变量</p><ul><li>严格区分大小写</li><li>不能以数字开头</li></ul><h2 id="严格检查模式"><a href="#严格检查模式" class="headerlink" title="严格检查模式"></a>严格检查模式</h2><p>使用’use strict’;严格检查模式来避免JS的随意性出现的问题</p><ul><li>必须写在script第一行</li><li>局部变量都使用let定义</li></ul><p>“use strict” 指令在 JavaScript 1.8.5 (ECMAScript5) 中新增。</p><p>它不是一条语句，但是是一个字面量表达式，在 JavaScript 旧版本中会被忽略。</p><p>“use strict” 的目的是指定代码在严格条件下执行。</p><p>严格模式下你不能使用未声明的变量。</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>js不区分小数和整数</p><p>判断数据类型使用typeof</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">typeof</span> 数据<br></code></pre></td></tr></table></figure><h2 id="数值（Number）"><a href="#数值（Number）" class="headerlink" title="数值（Number）"></a>数值（Number）</h2><p>整数和小数（比如1和3.14）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">123</span> <span class="hljs-comment">//整数</span><br><span class="hljs-number">123.1</span><span class="hljs-comment">//浮点数</span><br><span class="hljs-number">1.123e3</span> <span class="hljs-comment">//科学计数法</span><br>-<span class="hljs-number">99</span> <span class="hljs-comment">//负数</span><br><span class="hljs-title class_">NaN</span><span class="hljs-comment">//not a number</span><br><span class="hljs-title class_">Infinity</span> <span class="hljs-comment">//无限大</span><br></code></pre></td></tr></table></figure><h2 id="字符串（String）"><a href="#字符串（String）" class="headerlink" title="字符串（String）"></a>字符串（String）</h2><p>字符组成的文本（比如“Hello World”）</p><h3 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h3><p>可以使用内置属性 <strong>length</strong> 来计算字符串的长度：</p><p><strong>实例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> txt = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;<br><span class="hljs-keyword">var</span> sln = txt.<span class="hljs-property">length</span>;<br></code></pre></td></tr></table></figure><hr><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><p>在 JavaScript 中，字符串写在单引号或双引号中。</p><p>因为这样，以下实例 JavaScript 无法解析：</p><p> “We are the so-called “Vikings” from the north.”</p><p>字符串 “We are the so-called “ 被截断。</p><p>如何解决以上的问题呢？可以使用反斜杠 () 来转义 “Vikings” 字符串中的双引号，如下:</p><p> “We are the so-called &quot;Vikings&quot; from the north.”</p><p> 反斜杠是一个<strong>转义字符</strong>。 转义字符将特殊字符转换为字符串字符：</p><p>转义字符 () 可以用于转义撇号，换行，引号，等其他特殊字符。</p><p>下表中列举了在字符串中可以使用转义字符转义的特殊字符：</p><table><thead><tr><th align="left">代码</th><th align="left">输出</th></tr></thead><tbody><tr><td align="left">&#39;</td><td align="left">单引号</td></tr><tr><td align="left">&quot;</td><td align="left">双引号</td></tr><tr><td align="left">\</td><td align="left">反斜杠</td></tr><tr><td align="left">\n</td><td align="left">换行</td></tr><tr><td align="left">\r</td><td align="left">回车</td></tr><tr><td align="left">\t</td><td align="left">tab(制表符)</td></tr><tr><td align="left">\b</td><td align="left">退格符</td></tr><tr><td align="left">\f</td><td align="left">换页符</td></tr></tbody></table><h3 id="字符串属性和方法"><a href="#字符串属性和方法" class="headerlink" title="字符串属性和方法"></a>字符串属性和方法</h3><p>原始值字符串，如 “John”, 没有属性和方法(因为他们不是对象)。</p><p>原始值可以使用 JavaScript 的属性和方法，因为 JavaScript 在执行方法和属性时可以把原始值当作对象。</p><p><strong>字符串方法我们将在下一章节中介绍。</strong></p><hr><h3 id="字符串属性"><a href="#字符串属性" class="headerlink" title="字符串属性"></a>字符串属性</h3><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">constructor</td><td align="left">返回创建字符串属性的函数</td></tr><tr><td align="left">length</td><td align="left">返回字符串的长度</td></tr><tr><td align="left">prototype</td><td align="left">允许您向对象添加属性和方法</td></tr></tbody></table><hr><h3 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h3><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">charAt()</td><td align="left">返回指定索引位置的字符</td></tr><tr><td align="left">charCodeAt()</td><td align="left">返回指定索引位置字符的 Unicode 值</td></tr><tr><td align="left">concat()</td><td align="left">连接两个或多个字符串，返回连接后的字符串</td></tr><tr><td align="left">fromCharCode()</td><td align="left">将 Unicode 转换为字符串</td></tr><tr><td align="left">indexOf()</td><td align="left">返回字符串中检索指定字符第一次出现的位置</td></tr><tr><td align="left">lastIndexOf()</td><td align="left">返回字符串中检索指定字符最后一次出现的位置</td></tr><tr><td align="left">localeCompare()</td><td align="left">用本地特定的顺序来比较两个字符串</td></tr><tr><td align="left">match()</td><td align="left">找到一个或多个正则表达式的匹配</td></tr><tr><td align="left">replace()</td><td align="left">替换与正则表达式匹配的子串</td></tr><tr><td align="left">search()</td><td align="left">检索与正则表达式相匹配的值</td></tr><tr><td align="left">slice()</td><td align="left">提取字符串的片断，并在新的字符串中返回被提取的部分</td></tr><tr><td align="left">split()</td><td align="left">把字符串分割为子字符串数组</td></tr><tr><td align="left">substr()</td><td align="left">从起始索引号提取字符串中指定数目的字符</td></tr><tr><td align="left">substring()</td><td align="left">提取字符串中两个指定的索引号之间的字符</td></tr><tr><td align="left">toLocaleLowerCase()</td><td align="left">根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射</td></tr><tr><td align="left">toLocaleUpperCase()</td><td align="left">根据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射</td></tr><tr><td align="left">toLowerCase()</td><td align="left">把字符串转换为小写</td></tr><tr><td align="left">toString()</td><td align="left">返回字符串对象值</td></tr><tr><td align="left">toUpperCase()</td><td align="left">把字符串转换为大写</td></tr><tr><td align="left">trim()</td><td align="left">移除字符串首尾空白</td></tr><tr><td align="left">valueOf()</td><td align="left">返回某个字符串对象的原始值</td></tr></tbody></table><h2 id="布尔值（Boolean）"><a href="#布尔值（Boolean）" class="headerlink" title="布尔值（Boolean）"></a>布尔值（Boolean）</h2><p>true（真）和false（假）两个特定值</p><h2 id="Undefined未定义"><a href="#Undefined未定义" class="headerlink" title="Undefined未定义"></a>Undefined未定义</h2><p>Undefined    表示“未定义”或不存在，即此处目前没有任何值</p><p>出现Undefined的情况：<br>1，当声明了变量但未赋值时，这个变量的值就是undefined<br>2，调用函数（方法）时，函数有形参，但未提供实参，则参数为undefined<br>3.函数没有返回值，默认返回undefined</p><h2 id="null空值"><a href="#null空值" class="headerlink" title="null空值"></a>null空值</h2><p>Null表示空缺，即此处应该有一个值，但目前为空</p><p>表示空值<br>使用Null类型值时注意以下几点<br>1）使用typeof操作符测试null返回object字符串。<br>2）undefined派生自null，所以等值比较返回值是true。未初始化的变量和赋值为null的变量相等</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;dada&quot;</span>]<br></code></pre></td></tr></table></figure><ul><li>数组下标越界会显示未定义</li></ul><p>**push() **方法可以向数组的末尾添加一个或者多个元素，并返回新的长度.</p><p>**pop() **方法用于删除并返回数组的最后一个元素。</p><p><strong>unshift()</strong> 方法可向数组的开头添加一个或更多元素，并返回新的长度。</p><p><strong>shift()</strong>  方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。</p><p><strong>isArray()</strong> 这个方法用来判断一个对象是不是数组，是的话返回true，否则返回false</p><p>**map()**方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。方法按照原始数组元素顺序依次处理元素。</p><ul><li><p>参数：currentValue当前元素的值</p></li><li><p>index当前元素的索引值</p></li><li><p>arr当前元素属于的数组对象</p></li></ul><p>**filter()**方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。不会对空数组进行检测。不会改变原始数组。</p><ul><li><p>参数：currentValue当前元素的值</p></li><li><p>index当前元素的索引值</p></li><li><p>arr当前元素属于的数组对象</p></li></ul><p>**every()**方法用于检测数组所有元素是否都符合指定条件（通过函数提供）。方法使用指定函数检测数组中的所有元素：如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测。如果所有元素都满足条件，则返回 true。不会对空数组进行检测。不会改变原始数组。</p><ul><li><p>参数：currentValue当前元素的值</p></li><li><p>index当前元素的索引值</p></li><li><p>arr当前元素属于的数组对象</p></li></ul><p>**some()**方法用于检测数组中的元素是否满足指定条件（函数提供）。方法会依次执行数组的每个元素：如果有一个元素满足条件，则表达式返回true , 剩余的元素不会再执行检测。如果没有满足条件的元素，则返回false。不会对空数组进行检测。不会改变原始数组。</p><ul><li><p>参数：currentValue当前元素的值</p></li><li><p>index当前元素的索引值</p></li><li><p>arr当前元素属于的数组对象</p></li></ul><p>**splice()**方法用于添加或删除数组中的元素。这种方法会改变原始数组。如果仅删除一个元素，则返回一个元素的数组。 如果未删除任何元素，则返回空数组。</p><ul><li>参数：index 必须，规定从何处添加/删除元素。该参数是开始插入和删除的数组元素的下标，必须是数字</li><li>howmany 可选，规定应该删除多少元素。必须是数字，但可以是“0”，如果为规定此参数，则删除从index开始到原数组结 尾的所有元素。</li><li>item…itemX 可选，要添加到数组的新元素</li></ul><p>**slice()**方法可从已有的数组中返回选定的元素。方法可提取字符串的某个部分，并以新的字符串返回被提取的部分。方法不会改变原始数组。</p><ul><li>参数：start 规定从何处开始选取。如果该参数为负数，则表示从原数组的倒数第几个元素开始提取，slice(-2) 表示提取原数组中 的倒数第二个元素到最后一个元素（包含最后一个元素）。</li><li>end() 规定从何处结束选取。没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果该参数为负数， 则它表示在原数组中的倒数第几个元素结束抽取</li></ul><p>**indexOf()**方法可返回某个指定的字符串值在字符串中首次出现的位置。如果没有找到匹配的字符串则返回 -1。indexOf() 方法区分大小写。</p><ul><li><p>参数：search value 必须，规定需要检查的字符串值</p></li><li><p>start 可选，规定在自负串开始检索的位置，如果省略，则将从字符串的首字符开始检索</p></li></ul><p><strong>includes()</strong> 方法用来判断一个数组是否包含一个指定的值，如果是返回 true，否则false。</p><ul><li><p>参数：searchElement 必须，需要查找的元素值</p></li><li><p>fromIndex 从该索引处开始查找 searchElement。如果为负值，则按升序从 array.length + fromIndex 的索引开始搜索。默 认为 0。</p></li></ul><p>**concat()**方法用于连接两个或多个数组。该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。</p><p>**join()**方法用于把数组中的所有元素放入一个字符串。该元素是通过指定的分隔符进行分隔的。</p><p>**split()**方法用于把一个字符串分割成字符串数组。方法不改变原始字符串。</p><ul><li><p>参数：separator 可选。字符串或正则表达式，从该参数指定的地方分割 string Object。</p></li><li><p>limit 可选。该参数可指定返回的数组的最大长度。</p></li></ul><p>**forEach()**方法用于调用数组的每个元素，并将元素传递给回调函数。</p><p>**sort()**方法用于对数组的元素进行排序。数组在原数组上进行排序，不生成副本。</p><p>**reverse()**方法用于颠倒数组中元素的顺序。</p><p>**find()**方法返回通过测试（函数内判断）的数组的第一个元素的值。方法为数组中的每个元素都调用一次函数执行：当数组中的元素在测试条件时返回 true 时, find() 返回符合条件的元素，之后的值不会再调用执行函数。如果没有符合条件的元素返回 undefined<br>。对于空数组，函数是不会执行的。 并没有改变数组的原始值。</p><p>**findIndex()**方法返回传入一个测试条件（函数）符合条件的数组第一个元素位置。 方法为数组中的每个元素都调用一次函数执行：当数组中的元素在测试条件时返回 true 时, 返回符合条件的元素的索引位置，之后的值不会再调用执行函数。如果没有符合条件的元素返回 -1<br>。对于空数组，函数是不会执行的。并没有改变数组的原始值。</p><p><strong>fill()</strong> 方法用于将一个固定值替换数组的元素。</p><ul><li>参数：value 必须，填充的值</li><li>start 可选，开始填充的位置</li><li>end 可选，停止填充的位置，默认为array.length</li></ul><p><strong>keys()、values()、entries()</strong><br>keys()是对键名的遍历、values()对键值的遍历、entries()是对键值对的遍历。</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> person = &#123;键<span class="hljs-number">1</span>：值<span class="hljs-number">1</span>,键<span class="hljs-number">2</span>：值<span class="hljs-number">2</span>,键<span class="hljs-number">2</span>：值<span class="hljs-number">2</span>&#125;<br></code></pre></td></tr></table></figure><p>对象使用键值对定义</p><p>对象（object）（引用）：各种值组成的集合</p><p><strong>动态增删</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">delete</span> 对象名.属性 <span class="hljs-comment">//删除</span><br><br>对象名.属性 = xxx <span class="hljs-comment">//增加</span><br></code></pre></td></tr></table></figure><p><strong>判断对象是否存在属性</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;属性名&#x27;</span> <span class="hljs-keyword">in</span> 对象名<br></code></pre></td></tr></table></figure><ul><li>JS中属性都是以字符串形式存储</li></ul><p><strong>判断属性是否为该对象独有的</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">对象名.<span class="hljs-title function_">hasownProperty</span>(<span class="hljs-string">&#x27;属性名&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&amp;&amp;<span class="hljs-comment">//与</span><br>||<span class="hljs-comment">//或</span><br>!<span class="hljs-comment">//非</span><br></code></pre></td></tr></table></figure><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">=<span class="hljs-comment">//赋值</span><br>==<span class="hljs-comment">//等于（当两个变量字面值一致时会判定等于,不区分类型）</span><br>===<span class="hljs-comment">//绝对等于（判断类型、值相等时为true）</span><br></code></pre></td></tr></table></figure><ul><li>NaN === NaN为false，NaN与所有数字都不相等，包括自己</li><li>通过isNa(NaN)方法判断是不是一个数</li></ul><h3 id="浮点数精度问题"><a href="#浮点数精度问题" class="headerlink" title="浮点数精度问题"></a>浮点数精度问题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>((<span class="hljs-number">1</span>/<span class="hljs-number">3</span>)===(<span class="hljs-number">1</span>-<span class="hljs-number">2</span>/<span class="hljs-number">3</span>)) <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p>使用绝对值函数abs来判断是否小于一定位数来判断两个数是否相等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>((<span class="hljs-number">1</span>/<span class="hljs-number">3</span>)===(<span class="hljs-number">1</span>-<span class="hljs-number">2</span>/<span class="hljs-number">3</span>))&lt;<span class="hljs-number">0.0000001</span>)<br></code></pre></td></tr></table></figure><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><p><strong>if…else</strong></p><p><strong>switch</strong></p><p><strong>while</strong></p><p><strong>for</strong></p><p>数组遍历</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">456</span>, <span class="hljs-number">15</span>, <span class="hljs-number">123</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> arr) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[i]);<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="/post/34209/image-20230518202630905.png"></p><h1 id="Set和Map"><a href="#Set和Map" class="headerlink" title="Set和Map"></a>Set和Map</h1><p><strong>简述：</strong><br>Set 和 Map 主要的应用场景在于 数据重组 和 数据储存。</p><p>Set 是一种叫做集合的数据结构，Map 是一种叫做字典的数据结构。</p><p><strong>集合 与 字典 的区别：</strong></p><ul><li><p>共同点：集合、字典 可以储存不重复的值</p></li><li><p>不同点：集合 是以 [value, value]的形式储存元素，字典 是以 [key, value] 的形式储存</p></li></ul><h3 id="集合（Set）："><a href="#集合（Set）：" class="headerlink" title="集合（Set）："></a><strong>集合（Set）：</strong></h3><ul><li><p>ES6 新增的一种新的数据结构，类似于数组，成员唯一（内部元素没有重复的值）。且使用键对数据排序即顺序存储。</p></li><li><p>Set 本身是一种构造函数，用来生成 Set 数据结构。</p></li><li><p>Set 对象允许你储存任何类型的唯一值，无论是原始值或者是对象引用。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>].<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> s.<span class="hljs-title function_">add</span>(x))<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> s) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<span class="hljs-comment">// 1 2 3 4</span><br>&#125;<br><span class="hljs-comment">// 去重数组的重复对象</span><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]<br>[... <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arr)]<span class="hljs-comment">// [1, 2, 3]</span><br></code></pre></td></tr></table></figure><ul><li>注意：向 Set 加入值的时候，不会发生类型转换，所以5和”5”是两个不同的值。Set 内部判断两个值是否不同，使用的算法叫做“Same-value-zero equality”，它类似于精确相等运算符（===），主要的区别是NaN等于自身，而精确相等运算符认为NaN不等于自身。</li></ul> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br><span class="hljs-keyword">let</span> a = <span class="hljs-title class_">NaN</span>;<br><span class="hljs-keyword">let</span> b = <span class="hljs-title class_">NaN</span>;<br>set.<span class="hljs-title function_">add</span>(a);<br>set.<span class="hljs-title function_">add</span>(b);<br>set <span class="hljs-comment">// Set &#123;NaN&#125;</span><br><br><span class="hljs-keyword">let</span> set1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()<br>set1.<span class="hljs-title function_">add</span>(<span class="hljs-number">5</span>)<br>set1.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;5&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([...set1])<span class="hljs-comment">// [5, &quot;5&quot;]</span><br></code></pre></td></tr></table></figure><p><strong>方法</strong></p><ul><li><p>add(value)：新增，相当于 array里的push。</p></li><li><p>delete(value)：存在即删除集合中value。</p></li><li><p>has(value)：判断集合中是否存在 value。</p></li><li><p>clear()：清空集合。</p></li></ul><p><strong>遍历方法：遍历方法（遍历顺序为插入顺序）</strong></p><ul><li>keys()：返回一个包含集合中所有键的迭代器。</li><li>values()：返回一个包含集合中所有值得迭代器。</li><li>entries()：返回一个包含Set对象中所有元素得键值对迭代器。</li><li>forEach(callbackFn, thisArg)：用于对集合成员执行callbackFn操作，如果提供了 thisArg 参数，回调中的this会是这个参数，没有返回值。</li></ul><p><img src="/post/34209/image-20230518202923870.png"></p><h3 id="WeakSet："><a href="#WeakSet：" class="headerlink" title="WeakSet："></a><strong>WeakSet：</strong></h3><p>WeakSet 对象允许你将弱引用对象储存在一个集合中。</p><p>WeakSet 与 Set 的区别：</p><p>WeakSet 只能储存对象引用，不能存放值，而 Set 对象都可以。<br>WeakSet 对象中储存的对象值都是被弱引用的，即垃圾回收机制不考虑 WeakSet 对该对象的应用，如果没有其他的变量或属性引用这个对象值，则这个对象将会被垃圾回收掉（不考虑该对象还存在于 WeakSet 中），所以，WeakSet 对象里有多少个成员元素，取决于垃圾回收机制有没有运行，运行前后成员个数可能不一致，遍历结束之后，有的成员可能取不到了（被垃圾回收了），WeakSet 对象是无法被遍历的（ES6 规定 WeakSet 不可遍历），也没有办法拿到它包含的所有元素。</p><ul><li>add(value)：在WeakSet 对象中添加一个元素value。</li><li>has(value)：判断 WeakSet 对象中是否包含value。</li><li>delete(value)：删除元素 value。</li></ul><h3 id="字典（Map）："><a href="#字典（Map）：" class="headerlink" title="字典（Map）："></a><strong>字典（Map）：</strong></h3><ul><li>是一组键值对的结构，具有极快的查找速度。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br><span class="hljs-keyword">const</span> o = &#123;<span class="hljs-attr">p</span>: <span class="hljs-string">&#x27;haha&#x27;</span>&#125;<br>m.<span class="hljs-title function_">set</span>(o, <span class="hljs-string">&#x27;content&#x27;</span>)<br>m.<span class="hljs-title function_">get</span>(o)<span class="hljs-comment">// content</span><br>m.<span class="hljs-title function_">has</span>(o)<span class="hljs-comment">// true</span><br>m.<span class="hljs-title function_">delete</span>(o)<span class="hljs-comment">// true</span><br>m.<span class="hljs-title function_">has</span>(o)<span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p><strong>操作方法：</strong></p><ul><li><p>set(key, value)：向字典中添加新元素。</p></li><li><p>get(key)：通过键查找特定的数值并返回。</p></li><li><p>has(key)：判断字典中是否存在键key。</p></li><li><p>delete(key)：通过键 key 从字典中移除对应的数据。</p></li><li><p>clear()：将这个字典中的所有元素删除。</p></li></ul><p><strong>遍历方法：</strong></p><ul><li>Keys()：将字典中包含的所有键名以迭代器形式返回。</li><li>values()：将字典中包含的所有数值以迭代器形式返回。</li><li>entries()：返回所有成员的迭代器。</li><li>forEach()：遍历字典的所有成员。</li></ul><p><img src="/post/34209/image-20230518202851930.png"></p><h3 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap:"></a>WeakMap:</h3><p>WeakMap 对象是一组键值对的集合，其中的键是弱引用对象，而值可以是任意。<br>注意，WeakMap 弱引用的只是键名，而不是键值。键值依然是正常引用。<br>WeakMap 中，每个键对自己所引用对象的引用都是弱引用，在没有其他引用和该键引用同一对象，这个对象将会被垃圾回收（相应的key则变成无效的），所以，WeakMap 的 key 是不可枚举的。</p><p><strong>方法：</strong></p><ul><li>has(key)：判断是否有 key 关联对象。</li><li>get(key)：返回key关联对象（没有则则返回 undefined）。</li><li>set(key)：设置一组key关联对象。</li><li>delete(key)：移除 key 的关联对象。</li></ul><p>总结:<br>Set：<br>成员唯一、无序且不重复。<br>[value, value]，键值与键名是一致的（或者说只有键值，没有键名）。<br>可以遍历，方法有：add、delete、has。<br>WeakSet：<br>成员都是对象。<br>成员都是弱引用，可以被垃圾回收机制回收，可以用来保存DOM节点，不容易造成内存泄漏。<br>不能遍历，方法有add、delete、has。<br>Map：<br>本质上是键值对的集合，类似集合。<br>可以遍历，方法很多可以跟各种数据格式转换。<br>WeakMap：<br>只接受对象作为键名（null除外），不接受其他类型的值作为键名。<br>键名是弱引用，键值可以是任意的，键名所指向的对象可以被垃圾回收，此时键名是无效的<br>不能遍历，方法有get、set、has、delete。</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="JavaScript-函数语法"><a href="#JavaScript-函数语法" class="headerlink" title="JavaScript 函数语法"></a>JavaScript 函数语法</h2><p>函数就是包裹在花括号中的代码块，前面使用了关键词 function：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> *functionname*()<br>&#123;<br>  *<span class="hljs-comment">// 执行代码*</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="调用带参数的函数"><a href="#调用带参数的函数" class="headerlink" title="调用带参数的函数"></a>调用带参数的函数</h2><p>在调用函数时，您可以向其传递值，这些值被称为参数。</p><p>这些参数可以在函数中使用。</p><p>您可以发送任意多的参数，由逗号 (,) 分隔：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">myFunction</span>(*argument1,argument2*)<br></code></pre></td></tr></table></figure><p>当您声明函数时，请把参数作为变量来声明：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunction</span>(<span class="hljs-params">***var1***,***var2***</span>)<br>&#123;<br>*代码*<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="带有返回值的函数"><a href="#带有返回值的函数" class="headerlink" title="带有返回值的函数"></a>带有返回值的函数</h2><p>有时，我们会希望函数将值返回调用它的地方。</p><p>通过使用 return 语句就可以实现。</p><p>在使用 return 语句时，函数会停止执行，并返回指定的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunction</span>(<span class="hljs-params"></span>)<br>&#123;<br>  <span class="hljs-keyword">var</span> x=<span class="hljs-number">5</span>;<br>  <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="arguments传递参数"><a href="#arguments传递参数" class="headerlink" title="arguments传递参数"></a>arguments传递参数</h2><p><img src="/post/34209/image-20230519083641250.png"></p><p><img src="/post/34209/image-20230519083756871.png"></p><h2 id="可变参数rest"><a href="#可变参数rest" class="headerlink" title="可变参数rest"></a>可变参数rest</h2><h3 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h3><p>在了解不定参数和rest语法之前我们先介绍下参数的概念。JavaScript的参数有形参(parameter)和实参(argument)，形参相当于函数中定义的变量，实参就是运行函数调用时传入的参数。简单的说，形参就是函数声明时的变量，实参是我们调用该函数时传入的具体参数。</p><p>例如下面代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">a,b</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a+b);<br>    &#125;<br>    <span class="hljs-title function_">f</span>(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>); <span class="hljs-comment">// 输出 5</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>代码中f(a, b)中的a和b就是形参，f(1,4)中的1和4就是实参。</p><h3 id="不定参数"><a href="#不定参数" class="headerlink" title="不定参数"></a>不定参数</h3><p>谈到不定参数，我们就必须要了解arguments对象。</p><p>arguments对象是一个类数组对象(但不是Array的实例)，因此可以使用中括号语法访问其中的元素(第一个参数是 arguments[0]，第二个参数是 arguments[1])。而要确定传进来多少个参数，可以访问arguments.length属性。</p><p>arguments对象是函数中默认就有的对象，它可以接收到多个不定数量的参数，并且以数组的形式存在。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">a,f,t,...rest</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rest);<br>    &#125;<br>    <span class="hljs-title function_">f</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>); <span class="hljs-comment">//输出[5,6]</span><br>    <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">...rest</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rest);<br>&#125;<br>    <span class="hljs-title function_">f</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);   <span class="hljs-comment">// 输出[1,3,4,5,6]</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>当不确定要传入多少参数时可以使用 …rest 表示，rest是一个数组，数组中的数据是没有对应形参的数据。</strong></p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>函数作用域。。。同Java</p><p>有同名变量时，函数会屏蔽外部变量</p><p><img src="/post/34209/image-20230519110814645.png"></p><p><img src="/post/34209/image-20230519110844899.png"></p><p><img src="/post/34209/image-20230519110921863.png"></p><p><img src="/post/34209/image-20230519111020377.png"></p><h3 id="提升作用域"><a href="#提升作用域" class="headerlink" title="提升作用域"></a>提升作用域</h3><p><img src="/post/34209/image-20230519104838614.png"></p><ul><li>所有变量定义都放在函数头部</li></ul><p><img src="/post/34209/image-20230519111140649.png"></p><h3 id="全局函数"><a href="#全局函数" class="headerlink" title="全局函数"></a>全局函数</h3><p><img src="/post/34209/image-20230519111208967.png"></p><p><img src="/post/34209/image-20230519110025537.png"></p><h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><p><img src="/post/34209/image-20230519110355491.png"></p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p><img src="/post/34209/image-20230519110731953.png"></p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p><img src="/post/34209/image-20230519112149328.png"></p><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p><img src="/post/34209/image-20230519112724368.png"></p><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><p><img src="/post/34209/image-20230519112743282.png"></p><h1 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h1><p><strong>基本使用</strong></p><p><img src="/post/34209/image-20230519171718402.png"></p><p><strong>转换</strong></p><p><img src="/post/34209/image-20230519171838467.png"></p><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><h2 id="什么是-JSON"><a href="#什么是-JSON" class="headerlink" title="什么是 JSON?"></a>什么是 JSON?</h2><ul><li>JSON 英文全称 <strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation</li><li>JSON 是一种轻量级的数据交换格式。</li><li>JSON是独立的语言 *****</li><li>JSON 易于理解。</li></ul><h2 id="JSON-实例"><a href="#JSON-实例" class="headerlink" title="JSON 实例"></a>JSON 实例</h2><p>以下 JSON 语法定义了 sites 对象: 3 条网站信息（对象）的数组:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<span class="hljs-string">&quot;sites&quot;</span>:[ &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Runoob&quot;</span>, <span class="hljs-string">&quot;url&quot;</span>:<span class="hljs-string">&quot;www.runoob.com&quot;</span>&#125;,     <br>           &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Google&quot;</span>, <span class="hljs-string">&quot;url&quot;</span>:<span class="hljs-string">&quot;www.google.com&quot;</span>&#125;,    <br>           &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Taobao&quot;</span>, <span class="hljs-string">&quot;url&quot;</span>:<span class="hljs-string">&quot;www.taobao.com&quot;</span>&#125; ]&#125;<br></code></pre></td></tr></table></figure><h2 id="JSON-语法规则"><a href="#JSON-语法规则" class="headerlink" title="JSON 语法规则"></a>JSON 语法规则</h2><ul><li>数据为 键/值 对。</li><li>数据由逗号分隔。</li><li>大括号保存对象</li><li>方括号保存数组</li></ul><h2 id="JSON-字符串转换为-JavaScript-对象"><a href="#JSON-字符串转换为-JavaScript-对象" class="headerlink" title="JSON 字符串转换为 JavaScript 对象"></a>JSON 字符串转换为 JavaScript 对象</h2><p>首先，创建 JavaScript 字符串，字符串为 JSON 格式的数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> text = <span class="hljs-string">&#x27;&#123; &quot;sites&quot; : [&#x27;</span> +<br><span class="hljs-string">&#x27;&#123; &quot;name&quot;:&quot;Runoob&quot; , &quot;url&quot;:&quot;www.runoob.com&quot; &#125;,&#x27;</span> +<br><span class="hljs-string">&#x27;&#123; &quot;name&quot;:&quot;Google&quot; , &quot;url&quot;:&quot;www.google.com&quot; &#125;,&#x27;</span> +<br><span class="hljs-string">&#x27;&#123; &quot;name&quot;:&quot;Taobao&quot; , &quot;url&quot;:&quot;www.taobao.com&quot; &#125; ]&#125;&#x27;</span>;<br></code></pre></td></tr></table></figure><p>然后，使用 JavaScript 内置函数 JSON.parse() 将字符串转换为 JavaScript 对象:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(text);<br></code></pre></td></tr></table></figure><p>最后，在你的页面中使用新的 JavaScript 对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> text = <span class="hljs-string">&#x27;&#123; &quot;sites&quot; : [&#x27;</span> +<br>    <span class="hljs-string">&#x27;&#123; &quot;name&quot;:&quot;Runoob&quot; , &quot;url&quot;:&quot;www.runoob.com&quot; &#125;,&#x27;</span> +<br>    <span class="hljs-string">&#x27;&#123; &quot;name&quot;:&quot;Google&quot; , &quot;url&quot;:&quot;www.google.com&quot; &#125;,&#x27;</span> +<br>    <span class="hljs-string">&#x27;&#123; &quot;name&quot;:&quot;Taobao&quot; , &quot;url&quot;:&quot;www.taobao.com&quot; &#125; ]&#125;&#x27;</span>;<br>    <br>obj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(text);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;demo&quot;</span>).<span class="hljs-property">innerHTML</span> = obj.<span class="hljs-property">sites</span>[<span class="hljs-number">1</span>].<span class="hljs-property">name</span> + <span class="hljs-string">&quot; &quot;</span> + obj.<span class="hljs-property">sites</span>[<span class="hljs-number">1</span>].<span class="hljs-property">url</span>;<br></code></pre></td></tr></table></figure><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="原型指定"><a href="#原型指定" class="headerlink" title="原型指定"></a>原型指定</h2><p>定义了一个对象，可以通过<code>__proto__</code>(注意是前后分别两个下划线)来指定原型对象，相当于继承</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//定义原型对象</span><br><span class="hljs-keyword">var</span> person = &#123;<br>            <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;xiao&quot;</span>,<br>            <span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,<br>            <span class="hljs-attr">run</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;run...&quot;</span>)<br>            &#125;<br>        &#125;<br><br><span class="hljs-comment">//新对象</span><br><span class="hljs-keyword">var</span> son = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;wang&quot;</span><br>&#125;<br><span class="hljs-comment">//指定原型对象</span><br>son.<span class="hljs-property">__proto__</span>= person;<span class="hljs-comment">//可以使用原型对象的方法</span><br></code></pre></td></tr></table></figure><h2 id="class继承"><a href="#class继承" class="headerlink" title="class继承"></a>class继承</h2><h3 id="es5方式"><a href="#es5方式" class="headerlink" title="es5方式"></a>es5方式</h3><p><img src="/post/34209/image-20230519200407195.png"></p><h3 id="es6方式"><a href="#es6方式" class="headerlink" title="es6方式"></a>es6方式</h3><ol><li>定义一个类、属性、方法</li></ol><p><img src="/post/34209/image-20230519200805498.png" alt="image-20230519200805498"></p><p>继承</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">NewStudent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Student</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name,grade</span>)&#123;<br>        <span class="hljs-variable language_">super</span>(name);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">grade</span> = grade;<br>    &#125;<br>    <br>    <span class="hljs-comment">//定义本类的方法</span><br>    <span class="hljs-title function_">hi</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hi&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> newstu = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewStudent</span>(<span class="hljs-string">&quot;li&quot;</span>,<span class="hljs-number">100</span>);<br><br></code></pre></td></tr></table></figure><p>本质还是原型</p><p><img src="/post/34209/image-20230519201552554.png"></p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><h3 id="prototype可以找到实现原型"><a href="#prototype可以找到实现原型" class="headerlink" title="prototype可以找到实现原型"></a>prototype可以找到实现原型</h3><p><img src="/post/34209/image-20230519202007217.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>前端基础-CSS</title>
    <link href="https://bugdev.tk/post/29974/"/>
    <id>https://bugdev.tk/post/29974/</id>
    <published>2023-03-10T04:49:00.000Z</published>
    <updated>2024-06-11T06:37:21.366Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="CSS的基本使用"><a href="#CSS的基本使用" class="headerlink" title="CSS的基本使用"></a>CSS的基本使用</h1><h2 id="CSS基本语法"><a href="#CSS基本语法" class="headerlink" title="CSS基本语法"></a>CSS基本语法</h2><p>一个CS5展性和属性<br>CSS样式由选择器和一条或多条以分号隔开的样式声明组成。每条声明的样式包含着一个CSS属性和属性<br>值。</p><p><img src="/post/29974/html+css11-1684235696669-30.jpg"></p><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs CSS">选择器名&#123;<br>属性:属性值;<br>....<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br><span class="hljs-attribute">background-color</span>:red;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CSS的引入"><a href="#CSS的引入" class="headerlink" title="CSS的引入"></a>CSS的引入</h2><h3 id="1-行内样式"><a href="#1-行内样式" class="headerlink" title="1.行内样式"></a>1.行内样式</h3><p>行内样式将样式定义在具体html元素的style属性中。以行内式写的CSS耦合度高，只适用于当前元素，在设<br>定某个元素的样式时比较常用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">p</span> style=&quot;<span class="hljs-attribute">color</span>:red;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">50px</span>;&quot;&gt;这是一段文本&lt;/<span class="hljs-selector-tag">p</span>&gt;<br></code></pre></td></tr></table></figure><p>在当前元素使用style属性的声明方式。</p><p>​        style是行内样式属性；</p><p>​        color是颜色属性；red是颜色属性值</p><p>​        font-size是字体大小属性；50px是字体大小属性值</p><h3 id="2-嵌入式"><a href="#2-嵌入式" class="headerlink" title="2.嵌入式"></a>2.嵌入式</h3><p>嵌入式通过在html页面内容开辟一段属于css的代码区域，通常做法为在<code>&lt;head&gt;</code>标签中嵌套<code>&lt;style&gt;</code>标签<br>在<code>&lt;style&gt;</code>中通过选择器的方式调用指定的元素并设置相关CSS。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style type=&quot;text/css&quot;&gt;<br><span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">color</span>:blue;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">40px</span>;&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="3-引入外联样式文件"><a href="#3-引入外联样式文件" class="headerlink" title="3.引入外联样式文件"></a>3.引入外联样式文件</h3><p>在实际开发当中，很多时候都使用引入外联样式文件，这种形式可以使html页面更加清晰，而且可以达到更好的重用效果。</p><p>链接式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;link rel=&quot;stylesheet&quot; href=&quot;CSS\style<span class="hljs-selector-class">.css</span>&quot;&gt;<br><br><span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">color</span>: green；font-size: <span class="hljs-number">30px</span>；&#125;<br></code></pre></td></tr></table></figure><p>导入式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br>import:<span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;CSS\style.css&quot;</span>)<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>链接式为css3引入方式，导入式为2.1缺点是不会同时渲染完成</p><h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><p>在CSS中，选择器是一种模式，用于选择需要添加样式的元素。<br>CSS选择器有很多，掌握常用的即可<br>基本选择器</p><h3 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h3><p>选择所有 <font color="red">*</font></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">*&#123;<br>....<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">*&#123;<br><span class="hljs-attribute">color</span>:orange;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><p>选择指定标签</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">标签名称&#123;</span><br><span class="hljs-comment">....</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123;<br>....<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><p>选择指定id</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#id</span>&#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分组选择器"><a href="#分组选择器" class="headerlink" title="分组选择器"></a>分组选择器</h3><p>选择指定分组</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">.class</span>&#123;<br><span class="hljs-string">...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>优先级 ：    行内    &gt;    id    &gt;    分组    &gt;    元素    &gt;    通用</strong></p><h2 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h2><p>CSS组合选择器说明了两个选择器直接的关系。CSS组合选择符包括各种简单选择符的组合方式。<br>在CSS中包含了四种组合方式：后代选取器（以空格分隔），子元素选择器（以大于号分隔），相邻兄弟选择器<br>（以加号分隔），普通兄弟选择器（以波浪线分隔）。</p><h3 id="后代选择器（派生选择器）"><a href="#后代选择器（派生选择器）" class="headerlink" title="后代选择器（派生选择器）"></a>后代选择器（派生选择器）</h3><p>用于选择指定标签元素下的后辈元素，以空格分隔</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS">选择器<span class="hljs-number">1</span> 选择器<span class="hljs-number">2</span>&#123;<br>.....<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.food</span> <span class="hljs-selector-tag">li</span>&#123;<br><span class="hljs-attribute">border</span>: lpx solid red;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">h1</span>&gt;食物&lt;/<span class="hljs-selector-tag">h1</span>&gt;<br>&lt;<span class="hljs-selector-tag">ul</span> class=&quot;food&quot;&gt;<br>&lt;<span class="hljs-selector-tag">li</span>&gt;水果<br>&lt;<span class="hljs-selector-tag">ul</span>&gt;<br>&lt;<span class="hljs-selector-tag">li</span>&gt;香蕉&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>&lt;<span class="hljs-selector-tag">li</span>&gt;苹果&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>&lt;<span class="hljs-selector-tag">li</span>&gt;梨&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>&lt;/<span class="hljs-selector-tag">ul</span>&gt;<br>&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>&lt;<span class="hljs-selector-tag">li</span>&gt;蔬菜<br>&lt;<span class="hljs-selector-tag">ul</span>&gt;<br>&lt;<span class="hljs-selector-tag">li</span>&gt;香蕉&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>&lt;<span class="hljs-selector-tag">li</span>&gt;苹果&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>&lt;<span class="hljs-selector-tag">li</span>&gt;梨&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>&lt;/<span class="hljs-selector-tag">ul</span>&gt;<br>&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>&lt;/<span class="hljs-selector-tag">ul</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h3><p>用于选择指定标签元素的所有第一代子元素，以大于号分隔</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">选择器1 选择器2</span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">.....</span><br><span class="hljs-template-variable">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#d</span> &gt; <span class="hljs-selector-tag">li</span>&#123;<br><span class="hljs-attribute">border</span>: lpx solid red;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a>相邻兄弟选择器</h3><p>可选择紧接在另一元素后的元素，且二者有相同父元素。以加号分隔</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">选择器1 选择器2</span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">.....</span><br><span class="hljs-template-variable">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#d</span> + <span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">border</span>: lpx solid red;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h3><p>nth-child()</p><p>nth-of-type()</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span>&#123;                     <span class="hljs-comment">/*link表示未访问过的超链接*/</span><br>&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span>&#123;                  <span class="hljs-comment">/*visited表示已访问过的超链接*/</span><br>&#125;<br><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:focus</span>&#123;                <span class="hljs-comment">/*focus表示当前拥有焦点的元素*/</span><br>&#125;<br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:hover</span>&#123;                  <span class="hljs-comment">/*hover表示鼠标指针停留的元素*/</span><br>&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span>&#123;                   <span class="hljs-comment">/*active表示被用户输入激活的元素*/</span><br>&#125;<br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:first</span>-child&#123;            <span class="hljs-comment">/*first-child表示第一个元素，此句表示第一个div元素*/</span><br>&#125;<br><span class="hljs-selector-tag">div</span> <span class="hljs-selector-pseudo">:first</span>-child&#123;           <span class="hljs-comment">/*空格表示后代元素，此句表示div元素的第一个后代元素*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p>类选择加id选择器组合用法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.class</span> 标签名<span class="hljs-selector-attr">[id=xxx]</span>&#123;<br>    xxxx:xxxx;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/post/29974/image-20230517100038453.png"></p><h2 id="CSS常用属性设置"><a href="#CSS常用属性设置" class="headerlink" title="CSS常用属性设置"></a>CSS常用属性设置</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>CSS背景属性用于定义HTML元素的背景效果</p><h4 id="background-color"><a href="#background-color" class="headerlink" title="background-color"></a>background-color</h4><p>设置元素的背景颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br><span class="hljs-attribute">background-color</span>:<span class="hljs-number">#ff0000</span>；<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="background-image"><a href="#background-image" class="headerlink" title="background-image"></a>background-image</h4><p>设置元素的背景图像，默认情况下，背景图像进行平铺重复显示，以覆盖整个元素实体</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br><span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;paper.gif&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="background-repeat-重复"><a href="#background-repeat-重复" class="headerlink" title="background-repeat 重复"></a>background-repeat 重复</h4><p>设置是否及如何重复背景图像</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br><span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">img/logo.jpg</span>);<br><span class="hljs-attribute">background-repeat</span>:no-repeat;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>repeat-x 横向平铺   repeat-y 纵向平铺</strong></p><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><h4 id="color"><a href="#color" class="headerlink" title="color"></a>color</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br><span class="hljs-attribute">color</span>:blue；<br>&#125;<br><span class="hljs-selector-tag">h1</span>&#123;<br><span class="hljs-attribute">color</span>:<span class="hljs-number">#00ff00</span>；<br>&#125;<br><span class="hljs-selector-tag">h2</span>&#123;<br><span class="hljs-attribute">color</span>:<span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="text-align-对齐"><a href="#text-align-对齐" class="headerlink" title="text-align 对齐"></a>text-align 对齐</h4><p>​    设置文本对齐方式，center（居中），left（左对齐），right（有对齐）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br><span class="hljs-attribute">text-align</span>:center;<br>&#125;<br>hi &#123;<br><span class="hljs-attribute">text-align</span><span class="hljs-selector-pseudo">:right</span>;<br>&#125;<br><span class="hljs-selector-tag">h2</span> &#123;<br><span class="hljs-attribute">text-align</span><span class="hljs-selector-pseudo">:right</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="text-decortion-划线"><a href="#text-decortion-划线" class="headerlink" title="text-decortion 划线"></a>text-decortion 划线</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">text-decoration</span>: overline;上划线<br><span class="hljs-attribute">text-decoration</span>: underline;下划线<br><span class="hljs-attribute">text-decoration</span>: line-through;中划线<br><span class="hljs-attribute">text-decoration</span>: overline line-through underline;同时上中下 <br><span class="hljs-attribute">text-decoration</span>: none;去除划线<br></code></pre></td></tr></table></figure><h4 id="text-indent-缩进"><a href="#text-indent-缩进" class="headerlink" title="text-indent 缩进"></a>text-indent 缩进</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">text-ident:<span class="hljs-number">4em</span>;   <span class="hljs-selector-tag">em</span>为一个文字高度<br></code></pre></td></tr></table></figure><h4 id="line-height-行高"><a href="#line-height-行高" class="headerlink" title="line-height 行高"></a>line-height 行高</h4><h4 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css">文字阴影语法以及相关属性:<br> <br>text-shadow:h-shadow v-shadow blur color;<br> <br>参数详解:<br> <br>h-shadow：阴影的水平距离<br>v-shadow: 阴影的垂直距离<br>    blur: 阴影的模糊半径<br>   color: 阴影的颜色<br></code></pre></td></tr></table></figure><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><h4 id="font-family"><a href="#font-family" class="headerlink" title="font-family"></a>font-family</h4><p>文本字体，该属性设置文本的字体。<br>font-family属性应该设置几个字体名称作为一种“后备机制，如果浏览器不支持第一种字体，他将尝试下一种<br>字体，所以尽量将不常见的字体靠前，将最常见的字体放置在最后，作为替补。<br>注意：<br>1）只有当字体名中含有空格或#、$之类的符号时（如NewYork），才需要在font-family声明中加引号：</p><p><img src="/post/29974/html+css12.jpg"></p><p><img src="/post/29974/html+css13.jpg"></p><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p>border、padding、margin三个属性构成了盒子模型。</p><p><img src="/post/29974/html+css15.jpg"></p><h3 id="border-边框"><a href="#border-边框" class="headerlink" title="border 边框"></a>border 边框</h3><p>设置所有的边框属性。<br>1）可同时设置边框的宽度、样式、颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">table</span>,<span class="hljs-selector-tag">th</span>,<span class="hljs-selector-tag">td</span> &#123;<br><span class="hljs-attribute">border</span>: lpx solid black;<br>&#125;<br><span class="hljs-selector-tag">table</span> &#123;<br><span class="hljs-attribute">width</span>:<span class="hljs-number">100%</span>；height:<span class="hljs-number">50px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2）使用border-width、border-style、border-color单独设置</p><p><img src="/post/29974/html+css16.jpg"></p><p><img src="/post/29974/html+css17.jpg"></p><p>border-radius圆角边框</p><h3 id="padding-内边距"><a href="#padding-内边距" class="headerlink" title="padding 内边距"></a>padding 内边距</h3><p>设置元素所有内边距的宽度，或者设置各边上内边距的宽度。<br>如果在表的内容中控制文本到边框的内边距，使用td和th元素的填充属性</p><p><img src="/post/29974/html+css18.jpg"></p><h3 id="margin-外边距"><a href="#margin-外边距" class="headerlink" title="margin 外边距"></a>margin 外边距</h3><p><img src="/post/29974/html+css19-1684197628118-27.jpg"></p><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><p><img src="/post/29974/html+css14.jpg"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">block <span class="hljs-comment">/*变成块级元素（前后有换行）*/</span><br>inline <span class="hljs-comment">/*变成行内元素（前后无换行）*/</span><br>inline-block <span class="hljs-comment">/*变成行内块级元素*/</span><br><span class="hljs-attribute">none</span><span class="hljs-comment">/*隐藏*/</span><br></code></pre></td></tr></table></figure><h3 id="Float"><a href="#Float" class="headerlink" title="Float"></a>Float</h3><p>float的属性值有none、left、right。</p><p>1.只有横向浮动，并没有纵向浮动。</p><p>2.会将元素的display属性变更为block。</p><p>3.浮动元素的后一个元素会围绕着浮动元素（典型运用是文字围绕图片）</p><p>4.浮动元素的前一个元素不会受到任何影响（如果你想让两个块状元素并排显示，必须让两个块状元素都应用<br>float）。</p><p>清除浮动both：清除浮动</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bnf"><span class="hljs-attribute">&lt;div style=&quot;clear:both“&gt;</span><span class="hljs-attribute">&lt;/div&gt;</span><br></code></pre></td></tr></table></figure><p><strong>clear</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">clear</span>:both;<span class="hljs-comment">/*清除所有浮动*/</span><br><span class="hljs-attribute">clear</span><span class="hljs-selector-pseudo">:left</span>;<span class="hljs-comment">/*清除左侧浮动*/</span><br><span class="hljs-attribute">clear</span><span class="hljs-selector-pseudo">:right</span>;<span class="hljs-comment">/*清除右侧浮动*/</span><br><span class="hljs-attribute">clear</span>:none;<br></code></pre></td></tr></table></figure><h4 id="overflow溢出"><a href="#overflow溢出" class="headerlink" title="overflow溢出"></a>overflow溢出</h4><p>控制子元素在溢出父元素内容边框时的显示方式</p><p>overflow属性有以下值：</p><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">visible</td><td align="left">默认值。内容不会被修剪，会呈现在元素框之外。</td></tr><tr><td align="left">hidden</td><td align="left">内容会被修剪，并且其余内容是不可见的。</td></tr><tr><td align="left">scroll</td><td align="left">内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</td></tr><tr><td align="left">auto</td><td align="left">如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</td></tr><tr><td align="left">inherit</td><td align="left">规定应该从父元素继承 overflow 属性的值。</td></tr></tbody></table><h4 id="父级元素塌陷问题"><a href="#父级元素塌陷问题" class="headerlink" title="父级元素塌陷问题"></a>父级元素塌陷问题</h4><ol><li>增加父级元素高度</li><li>增加一个空的div，然后清除所有浮动</li><li>在父级元素中增加一个overflow</li><li>父类添加一个伪类</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#father</span><span class="hljs-selector-pseudo">:after</span>&#123;<br>    <span class="hljs-attribute">content</span>:<span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-comment">/*增加一个空内容块*/</span><br>    <span class="hljs-attribute">display</span>：block;<br>    <span class="hljs-attribute">clear</span>:both;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/post/29974/image-20230517195728723.png"></p><h2 id="定位-position"><a href="#定位-position" class="headerlink" title="定位 position"></a>定位 position</h2><h3 id="相对定位-position-relative"><a href="#相对定位-position-relative" class="headerlink" title="相对定位 position:relative"></a>相对定位 position:relative</h3><h3 id="绝对定位-position-absolute"><a href="#绝对定位-position-absolute" class="headerlink" title="绝对定位 position:absolute"></a>绝对定位 position:absolute</h3><p>绝对定位时：</p><ol><li>父元素没有定位时，绝对定位相对于浏览器定位</li><li>父元素有定位时，绝对定位相对于父元素定位</li></ol><p>并对top(上)、bottom（下）、left（左）、right（右）进调整</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">position</span>:relative;<br><span class="hljs-attribute">top</span>:正负数值px;<br></code></pre></td></tr></table></figure><h3 id="固定定位position-fixed"><a href="#固定定位position-fixed" class="headerlink" title="固定定位position:fixed"></a>固定定位position:fixed</h3><p>相对于浏览器定位，且一直不变</p><h2 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h2><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p>z-index 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。</p><p><strong>注释：</strong>元素可拥有负的 z-index 属性值。</p><p><strong>注释：</strong>Z-index 仅能在定位元素上奏效（例如 position:absolute;）！</p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>该属性设置一个定位元素沿 z 轴的位置，z 轴定义为垂直延伸到显示区的轴。如果为正数，则离用户更近，为负数则表示离用户更远。</p><h3 id="属性值"><a href="#属性值" class="headerlink" title="属性值"></a>属性值</h3><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">auto</td><td align="left">默认。堆叠顺序与父元素相等。</td></tr><tr><td align="left"><em>number</em></td><td align="left">设置元素的堆叠顺序。</td></tr><tr><td align="left">inherit</td><td align="left">规定应该从父元素继承 z-index 属性的值。</td></tr></tbody></table><h2 id="opcity透明度"><a href="#opcity透明度" class="headerlink" title="opcity透明度"></a>opcity透明度</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>前端基础-Html</title>
    <link href="https://bugdev.tk/post/31935/"/>
    <id>https://bugdev.tk/post/31935/</id>
    <published>2023-02-02T17:26:00.000Z</published>
    <updated>2024-06-11T06:37:32.291Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><p>HTML 是用来描述网页的一种语言。</p><ul><li>HTML 指的是超文本标记语言: <strong>Hyper Text  Markup Language</strong></li><li>HTML 不是一种编程语言，而是一种<strong>标记</strong>语言</li><li>标记语言是一套<strong>标记标签</strong> (markup tag)</li><li>HTML 使用标记标签来<strong>描述</strong>网页</li><li>HTML 文档包含了HTML <strong>标签</strong>及<strong>文本</strong>内容</li><li>HTML文档也叫做 <strong>web 页面</strong></li></ul><h2 id="W3C标准"><a href="#W3C标准" class="headerlink" title="W3C标准"></a>W3C标准</h2><p><img src="/post/31935/image-20230512161640750.png"></p><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><p><img src="/post/31935/02A7DD95-22B4-4FB9-B994-DDB5393F7F03.jpg"></p><ul><li><code>&lt;!DOCTYPE html&gt; </code>声明为 HTML5 文档</li><li><code>&lt;html&gt;</code> 元素是 HTML 页面的根元素</li><li><code>&lt;head&gt;</code> 元素包含了文档的元（meta）数据，如 <code>&lt;meta charset=&quot;utf-8&quot;&gt;</code>定义网页编码格式为 <strong>utf-8</strong>。</li><li><code>&lt;title&gt;</code> 元素描述了文档的标题</li><li><code>&lt;body&gt;</code> 元素包含了可见的页面内容</li><li><code>&lt;h1&gt;</code> 元素定义一个大标题</li><li><code>&lt;p&gt;</code> 元素定义一个段落</li></ul><p><strong>注：</strong>在浏览器的页面上使用键盘上的 F12 按键开启调试模式，就可以看到组成标签。</p><h3 id="可视化结构"><a href="#可视化结构" class="headerlink" title="可视化结构"></a>可视化结构</h3><p><img src="/post/31935/image-20230512162842845.png"></p><h3 id="html的lang属性：声明网页所使用的语言供浏览器抓取"><a href="#html的lang属性：声明网页所使用的语言供浏览器抓取" class="headerlink" title="html的lang属性：声明网页所使用的语言供浏览器抓取"></a><strong>html的lang属性：声明网页所使用的语言供浏览器抓取</strong></h3><h3 id="body的页面结构"><a href="#body的页面结构" class="headerlink" title="body的页面结构"></a>body的页面结构</h3><p><img src="/post/31935/image-20230512203548971.png"></p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="注释-lt-注释内容-gt-，快捷键ctrl"><a href="#注释-lt-注释内容-gt-，快捷键ctrl" class="headerlink" title="注释     &lt;!--注释内容--&gt;，快捷键ctrl+/"></a>注释     <code>&lt;!--注释内容--&gt;</code>，快捷键ctrl+/</h3><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><h3 id="标题-gt-H标签"><a href="#标题-gt-H标签" class="headerlink" title="标题 &gt; H标签"></a>标题 &gt; H标签</h3><p>//<code>&lt;h1&gt;</code> <code>&lt;/h1&gt;</code>~`</p><h6><code> </code></h6>`依次从大到小<p></p><p>不建议在页面中写多个h1标签，h1标签可以被搜索引擎获取到，如果有多个，可能会进入搜索引擎的黑名单。</p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>HELLO<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>HELLO<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>HELLO<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>HELLO<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>HELLO<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>HELLO<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="段落-gt-P标签"><a href="#段落-gt-P标签" class="headerlink" title="段落 &gt; P标签"></a>段落 &gt; P标签</h3><p><code>&lt;p&gt;</code>标签定义段落。P元素会自动在其前后创建一些空白。浏览器会自动添加这些空间，您也可以在样式表中<br>规定。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>align</td><td>lef、right、center、justify</td><td>规定段落中文本的对齐方式，以后可以用样式取代它</td></tr></tbody></table><h3 id="水平线-gt-hr标签"><a href="#水平线-gt-hr标签" class="headerlink" title="水平线 &gt; hr标签"></a>水平线 &gt; hr标签</h3><ul><li>width宽度     1.百分比    2.px</li><li>align对齐方式    left    right    center(默认)</li><li>size    水平线粗细</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;50%&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;left&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;5&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;5px&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;right&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;10&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="换行-gt-br标签"><a href="#换行-gt-br标签" class="headerlink" title="换行 &gt; br标签"></a>换行 &gt; br标签</h3><p>​    br标签为换行符号，<code>&lt;br&gt;</code>标签是空标签（意味着它没有结束标签</p><p>​    注意：<code>&lt;br&gt;</code>标签只是简单地开始新的一行，而当浏览器遇到<br>通常会在相邻的段落之间插入一些标签时，垂直的间距。请使用<code>&lt;br&gt;</code>来输入空行，而不是分割段落</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>  or <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="字体样式标签"><a href="#字体样式标签" class="headerlink" title="字体样式标签"></a>字体样式标签</h3><h4 id="粗体-gt-strong"><a href="#粗体-gt-strong" class="headerlink" title="粗体 &gt; strong"></a>粗体 &gt; strong</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>内容<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="斜体-gt-em"><a href="#斜体-gt-em" class="headerlink" title="斜体 &gt; em"></a>斜体 &gt; em</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>内容<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="链接-gt-a标签"><a href="#链接-gt-a标签" class="headerlink" title="链接  &gt;  a标签"></a>链接  &gt;  a标签</h3><p>​    <code>&lt;a&gt;</code>标签定义超链接，用于从一张页面链接到另一张页面。</p><p>​    <code>&lt;a&gt;</code>元素最重要的属性是<strong>href属性</strong>，它指示要链接的目标位置，同时没有href属性a标签内的内容与普通文本没有区别，也就失去了超链接的功能。</p><p>​    若是想要跳转到当前页面，那么href的值为#。被链接页面通常显示在当前浏览器窗口中，除非您规定了另一个目标（target属性）</p><p>target属性</p><ul><li>_self    当前窗口</li><li>_blank 新开空白窗口</li><li>_parent 子窗口</li><li>_top 顶级窗口</li></ul><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>href</td><td>url</td><td>规定div元素中的内容的对齐方式，以后可以用样式取代它</td></tr><tr><td>target</td><td>self    当前窗口 <br>blank 新开空白窗口 <br>parent 子窗口<br>top 顶级窗口<br>Framename作为锚点的a标签的name值</td><td>规定在何处打开链接文档。<br>blank：开启新页面显示页面；<br>Self:当前页面显示跳转到页面，默认值。<br>_top：用于有frameset布局的页面，想要覆盖整个页面显示。<br>Framename：这里framename与上边的值不同，具体以为frame起了什么样的名字为准，该值指示要连接的页面跳转后将在相应名称的框架中显示。</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">_blank</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>锚点的实现</strong><br>利用a标签的name属性：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>一般标签的id属性：div id=”” a id=””等,</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">”top</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>铺点定位</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#top&quot;</span>&gt;</span>返回首部<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="格式化标签"><a href="#格式化标签" class="headerlink" title="格式化标签"></a>格式化标签</h3><h4 id="font"><a href="#font" class="headerlink" title="font"></a>font</h4><p>​    规定文本的字体(face)、字体尺寸(size)、字体颜色(color)</p><h4 id="pre"><a href="#pre" class="headerlink" title="pre"></a>pre</h4><p>定义预格式化的文本。<strong>被包围在pre元素中的文本通常会保留空格和换行符</strong>。而文本也会呈现为等宽字体</p><h4 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h4><p><code>&lt;b&gt;</code>（粗文本）、<code>&lt;strong&gt;</code>(粗文本)、<code>&lt;i&gt;</code>（斜体文本）、<code>&lt;u&gt;</code>（下划线文本）、<code>&lt;del&gt;</code>（中划线文本）、<code>&lt;sup&gt;</code>（上标文本）、<code>&lt;sub&gt;</code>（下标文本）</p><h3 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h3><p>图片链接</p><p>​        img元素向网页中嵌入一幅图像。</p><p>​        注意：从技术上讲，<code>&lt;img&gt;</code>标签并不会在网页中插入图像，而是从网页上链接图像。<code>&lt;img&gt;</code>标签创建的是被引用图像的占位空间。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>必须属性</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>alt</td><td>text</td><td>规定图像的替代文本，一般在图片无法正常显示占位的文字</td></tr><tr><td>src</td><td>url</td><td>规定显示图像的URL。</td></tr></tbody></table><p><img src="/post/31935/html+css01.jpg"></p><h2 id="元素类型"><a href="#元素类型" class="headerlink" title="元素类型"></a>元素类型</h2><p>HTML中标签元素三种不同类型：块状元素，行内元素，行内块状元素</p><h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3><p>元素都从新的一行开始，并且其后的元素也另起一行；元素的高度、宽度、行高以及顶和底边距都可设置，元素宽度在不设置的情况是它本身父容器的100%（和父元素的宽度一致），除非设定一个宽度。</p><h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><p>和其他元素都在一行上；元素的高度、宽度及顶部和底部边距不可设置；元素的宽度就是它包含的文字或图片的宽度，不可改变。</p><h3 id="行内块状元素"><a href="#行内块状元素" class="headerlink" title="行内块状元素"></a>行内块状元素</h3><p>和其他元素都在一行上；元素的高度、宽度、行高以及顶和底边距都可设置。</p><h2 id="div和span"><a href="#div和span" class="headerlink" title="div和span"></a>div和span</h2><h3 id="div"><a href="#div" class="headerlink" title="div"></a>div</h3><p><code>&lt;div&gt;</code>是一个块级元素，通常与css配合使用，用于布局。<br><code>&lt;div&gt;</code>标签可以把文档分割为独立的、不同的部分。它可以用作严格的组织工具，并且不使用任何格式与其关联。</p><p><code>&lt;div&gt;</code>是一个块级元素。这意味着它的内容自动地开始一个新行。实际上，换行是<code>&lt;div&gt;</code>固有的唯一格式表现。可以通过<code>&lt;div&gt;</code>的class或id应用额外的样式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>content<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>常用属性</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>align</td><td>left、right、center</td><td>规定div元素中的内容的对齐方式，以后可以用样式取代它</td></tr></tbody></table><h3 id="span"><a href="#span" class="headerlink" title="span"></a>span</h3><p>span默认占内容长度位数</p><p><code>&lt;span&gt;</code>标签被用来组合文档中的行内元素，span没有固定的格式表现。当对它应用样式时，它才会产生视觉上的变化。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>content<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p> <strong>空格 <code>&amp;nbsp;</code></strong></p><p><strong>大于<code>&amp;gt</code></strong></p><p><strong>小于<code>&amp;lt</code></strong></p><p><strong>版权符 <code>&amp;copy;</code></strong></p><p>在HTML中，某些字符是预留的</p><p>在HTML中不能使用小于号（&lt;）和大于号（&gt;），这是因为浏览器会误认为它们是标签。</p><p>如果希望正确地显示预留字符，我们必须在HTML源代码中使用字符实体（characterentities）。</p><p>实体名称对大小写敏感！</p><p><img src="/post/31935/image-20230515202013127.png"></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>由<code>&lt;ol&gt;</code> <code>&lt;/ol&gt;</code>和<code>&lt;li&gt;</code> <code>&lt;/li&gt;</code>标签组成。</p><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>由&lt;<code>u1&gt;</code> <code> &lt;/u1&gt;</code>和<code>&lt;1i&gt;</code> <code>&lt;/1i&gt;</code>标签组成。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&lt;/]i&gt;<br>    &lt;]i&gt;&lt;/1i&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    &lt;1i&gt;好好学习&lt;/1i&gt;<br>    &lt;1i&gt;天天向上<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>常用属性</p><table><thead><tr><th>type属性值</th><th>描述规定列表的项目符号类型。可以使用样式取代。</th></tr></thead><tbody><tr><td>disc</td><td>disc实心圆（默认)</td></tr><tr><td>circle</td><td>circle：空心圆</td></tr><tr><td>square</td><td>Square</td></tr><tr><td>Sqare</td><td>Sqare：方块</td></tr></tbody></table><h3 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h3><p><code>&lt;dl&gt;</code> <code>&lt;/dl&gt;</code>自定义列表</p><p><code>&lt;dt&gt;</code> <code>&lt;/dt&gt;</code> 自定义列表标题</p><p><code>&lt;dd&gt;</code> <code>&lt;/dd&gt;</code> 小列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>en<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>b<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>c<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>d<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p><code>&lt;table&gt;&lt;/table&gt;</code>标签定义HTML表格。</p><p><code>&lt;tr&gt;&lt;/tr&gt;</code>标签定义表格的行。tr元素包含一个或多个th或td元素</p><p><code>&lt;td&gt;&lt;/td&gt;</code>标签定义HTML表格中的标准单元格</p><p><code>&lt;th&gt;&lt;/th&gt;</code>定义表格内的表头单元格。th元素内部的文本通常会呈现为居中的粗体文本，而td元素内的文本通常是左对齐的普通文本。</p><p>简单的HTML表格由table元素以及一个或多个tr、th、或td元素组成。<br>理解：table相当于一个表格的外框，tr为行，td为一个一个单元格，th为有标题作用的单元格，th中的内容同时有加粗的效果。</p><p><img src="/post/31935/html+css02.jpg"></p><p><img src="/post/31935/image-20230512201913512.png"></p><p><img src="/post/31935/image-20230512202229116.png"></p><h2 id="媒体元素"><a href="#媒体元素" class="headerlink" title="媒体元素"></a>媒体元素</h2><p>视频、音频</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--媒体元素标签 路径  控制开关自动播放--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;路径&quot;</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">autopaly</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;路径&quot;</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">autopaly</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="iframe内联框架"><a href="#iframe内联框架" class="headerlink" title="iframe内联框架"></a>iframe内联框架</h2><p><img src="/post/31935/image-20230512205057532.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--内联框架自定义地址--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://www.bilibili.com&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;3px&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;1200px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;900px&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--使用a标签target属性打开内联框架--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mainName&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;3px&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;1200px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;900px&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.bilibili.com&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;mainName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><p><img src="/post/31935/image-20230512205305326.png"></p><h4 id="form"><a href="#form" class="headerlink" title="form"></a>form</h4><p>​        <code>&lt;form&gt;</code>标签用于为用户输入创建HTML表单。<br>​        表单能够包含input元素，比如文本字段、复选框、单选框、提交按钮等等。还可以包含textarea等元素。<br>​        表单用于向服务器传输数据。form元素是块级元素，其前后会产生折行。</p><p><img src="/post/31935/image-20230515101955089.png"></p><p>补充<img src="/post/31935/html+css04.jpg"></p><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><p><code>        &lt;input&gt;</code>标签用于搜集用户信息。</p><p>​        根据不同的type属性值，输入字段拥有很多种形式。输入字段可以是文本字段、复选框、单选按钮、按钮等<br>等。</p><p><img src="/post/31935/html+css05.jpg"></p><p>hidden隐藏</p><h5 id="required为必填属性"><a href="#required为必填属性" class="headerlink" title="required为必填属性"></a>required为必填属性</h5><p>​                            <strong>date 日期框</strong>            </p><p>​                            <strong>disable 禁用按钮</strong></p><p><img src="/post/31935/html+css06.jpg"></p><h4 id="textarea-文本区"><a href="#textarea-文本区" class="headerlink" title="textarea 文本区"></a>textarea 文本区</h4><p>控件。文本区中可容纳无限数量的文本，可以通过cols和rows属性来规定该标签定义多行的文本输入，textarea的尺寸。cols规定文本区内的可见宽度。rows规定文本区内的可见行数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>&gt;</span>content<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="label-标签"><a href="#label-标签" class="headerlink" title="label 标签"></a>label 标签</h4><p>​        <code>&lt;label&gt;</code>标签为input元素定义标注（标记）。</p><p>​        label元素不会呈现任何的特殊效果。</p><p>​        label标签的for属性应当与相关元素的id属性相同，此时点击label标签会自动为元素聚焦</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span>用户名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h4 id="button-按钮"><a href="#button-按钮" class="headerlink" title="button 按钮"></a>button 按钮</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮&lt;/button<br></code></pre></td></tr></table></figure><p><img src="/post/31935/html+css07.jpg"></p><h4 id="select下拉框"><a href="#select下拉框" class="headerlink" title="select下拉框"></a>select下拉框</h4><h5 id="lt-select-gt-属性"><a href="#lt-select-gt-属性" class="headerlink" title="&lt;select&gt;属性"></a><code>&lt;select&gt;</code>属性</h5><p>用于定义下拉列表</p><p><img src="/post/31935/html+css08.jpg"></p><h5 id="option属性"><a href="#option属性" class="headerlink" title="option属性"></a>option属性</h5><p><img src="/post/31935/html+css09.jpg"></p><h3 id="表单验证方式"><a href="#表单验证方式" class="headerlink" title="表单验证方式"></a>表单验证方式</h3><p>placeholder 提示（用于输入框）</p><p>required 非空判断</p><p>pattern 正则表达式</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java开发-3大设计模式</title>
    <link href="https://bugdev.tk/post/59472/"/>
    <id>https://bugdev.tk/post/59472/</id>
    <published>2022-12-08T05:54:00.000Z</published>
    <updated>2024-06-11T06:25:28.429Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h2><ul><li><p>构造方法私有化</p></li><li><p>声明一个本类对象</p></li><li><p>给外部提供一个静态方法获取对象实例</p></li></ul><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><ul><li>类加载后创建对象，程序结束后回收该对象</li><li>占用内存时间长，效率高</li></ul><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C0401SingleMode</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">C0401SingleMode</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">C0401SingleMode</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">C0401SingleMode</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> C0401SingleMode <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><ul><li>占用内存时间短</li><li>效率低</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C0401SingleMode</span> &#123;<br>    <span class="hljs-comment">//懒汉式单例类.在第一次调用的时候实例化自己</span><br>    <span class="hljs-comment">//私有化构造方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">C0401SingleMode</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-comment">//声明引用对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> C0401SingleMode single;<br>    <span class="hljs-comment">//给定一个静态方法，getInstance</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> C0401SingleMode <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//判断对象为空，new一个对象</span><br>        <span class="hljs-keyword">if</span> (single == <span class="hljs-literal">null</span>)&#123;<br>            single = <span class="hljs-keyword">new</span> <span class="hljs-title class_">C0401SingleMode</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> single;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><strong>工具类（只有功能方法，没有属性）</strong></li><li><strong>工具类频繁使用</strong></li><li><strong>节省资源避免重复创建对象</strong></li></ol><p><em><strong>私有化构造+静态方法</strong></em>实现单例较消耗内存</p><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><ul><li>由工厂对象决定创建哪一种产品类的实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C0402FactorMode</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//不使用工厂模式时，需要通过new接口的子类对象来使用方法，耦合高，容易出错</span><br>        <span class="hljs-type">Product</span> <span class="hljs-variable">Phone</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br>        Phone.work();<br><br>        <span class="hljs-type">Product</span> <span class="hljs-variable">Phone1</span> <span class="hljs-operator">=</span> ProductFactory.getProduct(<span class="hljs-string">&quot;Phone&quot;</span>);<br>        Phone1.work();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//工厂类,</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductFactory</span>&#123;<br>    <span class="hljs-comment">//方法getProduct,根据传参need判断,返回Product接口的对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Product <span class="hljs-title function_">getProduct</span><span class="hljs-params">(String need)</span>&#123;<br>        <span class="hljs-comment">//判断代码,根据字符串值判断返回的对象</span><br>        <span class="hljs-keyword">switch</span> (need)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Phone&quot;</span>:<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Computer&quot;</span> : <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Computer</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//定义一个接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Product</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-comment">//实现接口类Phone</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Product</span>&#123;<br>    <span class="hljs-comment">//重写接口方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Phone working&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//实现接口类Computer</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Computer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Product</span>&#123;<br>    <span class="hljs-comment">//重写接口方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Computer working&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="静态代理模式"><a href="#静态代理模式" class="headerlink" title="静态代理模式"></a>静态代理模式</h2><ol><li>定义接口</li><li>接口实现类重写接口方法</li><li>定义代理类实现接口<ol><li>私有化接口对象属性</li><li>定义返回值为接口对象的显式构造器、并指定传参为接口类型的对象，指定传参对象作为构造器指定对象（即调用传参对象）</li></ol></li><li>new 接口对象，new代理模式对象并把接口对象作为传参</li><li>调用方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C0403ProxyMode</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Action</span> <span class="hljs-variable">userAction</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserAction</span>();<br>    <span class="hljs-comment">//把对象userAction传给了ActionProxy的构造器</span><br>    <span class="hljs-type">ActionProxy</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionProxy</span>(userAction);<br>    target.doAction();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ActionProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Action</span>&#123;<br>    <span class="hljs-comment">//定义一个属性，Action类型属性target</span><br>    <span class="hljs-keyword">private</span> Action target;<br>    <span class="hljs-comment">//无参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ActionProxy</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-comment">//有参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ActionProxy</span><span class="hljs-params">(Action target)</span> &#123;<br>        <span class="hljs-comment">//把传进来的target参数付给this对象</span><br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br>    <span class="hljs-comment">//重写接口方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAction</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//两个Time记录时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">stratTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-comment">//调用了this.target的doAction方法，实际上</span><br>        <span class="hljs-built_in">this</span>.target.doAction();<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;is used time:&quot;</span>+(endTime-stratTime));<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//实现接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Action</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAction</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-comment">//接口实现类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserAction</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Action</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAction</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;working&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java开发-冒泡排序</title>
    <link href="https://bugdev.tk/post/61797/"/>
    <id>https://bugdev.tk/post/61797/</id>
    <published>2022-12-06T05:52:00.000Z</published>
    <updated>2024-06-11T06:43:03.050Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="冒泡排序思想"><a href="#冒泡排序思想" class="headerlink" title="冒泡排序思想"></a>冒泡排序思想</h3><blockquote><ul><li>基本思想: 冒泡排序，类似于水中冒泡，较大的数沉下去，较小的数慢慢冒起来（假设从小到大），即为较大的数慢慢往后排，较小的数慢慢往前排。</li><li>直观表达，<strong>每一趟遍历，将一个最大的数移到序列末尾</strong>。</li></ul></blockquote><h3 id="算法描述（从小到大排序）"><a href="#算法描述（从小到大排序）" class="headerlink" title="算法描述（从小到大排序）"></a>算法描述（从小到大排序）</h3><ol><li>比较相邻的元素，如果前一个比后一个大，交换之。</li><li>第一趟：第1个和第2个元素比较，随后第2个和第3个比较，这样直到倒数第2个和最后1个，将最大的数移动到最后一位。</li><li>第二趟：重复上面步骤，将第二大的数移动至倒数第二位<br>……<br>因此需要<strong>n-1</strong>趟；</li></ol><h3 id="动图实现"><a href="#动图实现" class="headerlink" title="动图实现"></a>动图实现</h3><p>![](Java SE\image-冒泡1.gif)</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: BubbleSortMain</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Numen_fan</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2019/3/4 下午9:15</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 冒泡排序</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> com.jiajia.ArrayUtil.*;  <span class="hljs-comment">// 按包名导入</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BubbleSortMain</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">8</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>&#125;;<br>        bubbleSort(arr);<br><br>        ArrayUtil.print(arr);<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 冒泡排序</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-keyword">if</span>(arr == <span class="hljs-literal">null</span> || arr.length &lt; <span class="hljs-number">2</span> )&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>      <span class="hljs-comment">// 控制趟数，不牵涉i位置的元素变动（重点）</span><br>      <span class="hljs-comment">// 之所以-1，举例：两个元素，只需要1趟即可。</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++)  &#123; <br>             <span class="hljs-comment">// 每一趟的元素比较，注意 -1, 两个元素的数组推导一下就懂了。</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - i -<span class="hljs-number">1</span>; j++)  &#123;  <br>                <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>])  &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[j];<br>                    arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                    arr[j + <span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//数组</span><br><span class="hljs-type">int</span>[] arrs =&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">65</span>,<span class="hljs-number">189</span>,<span class="hljs-number">16</span>,<span class="hljs-number">156</span>,<span class="hljs-number">147</span>,<span class="hljs-number">65</span>,<span class="hljs-number">23</span>,<span class="hljs-number">456</span>&#125;;<br><span class="hljs-comment">//最小数下标        </span><br><span class="hljs-type">int</span> minIndex ;<br><span class="hljs-comment">//控制循环轮数        </span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arrs.length-<span class="hljs-number">1</span>; i++) &#123;<br>    <span class="hljs-comment">//先把每一轮最小下标定义为i，i递增则随之减少剩余需要排序数        </span><br>    minIndex = i;          <br>    <span class="hljs-comment">//控制每一轮的排序</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i+<span class="hljs-number">1</span>; j &lt; arrs.length; j++) &#123;               <br>        <span class="hljs-keyword">if</span> (arrs[minIndex]&gt;arrs[j])&#123;          <br>            minIndex = j;     <br>        &#125;     <br>    &#125;     <br>    <span class="hljs-keyword">if</span> (minIndex != i) &#123;       <br>        arrs[minIndex] = arrs[minIndex]+arrs[i];    <br>        arrs[i] =arrs[minIndex]-arrs[i];<br>        arrs[minIndex] = arrs[minIndex]-arrs[i];<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java开发之异常处理</title>
    <link href="https://bugdev.tk/post/27375/"/>
    <id>https://bugdev.tk/post/27375/</id>
    <published>2022-11-19T05:43:00.000Z</published>
    <updated>2024-06-11T06:25:21.098Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h2 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h2><p><img src="/post/27375/image-%E5%BC%82%E5%B8%B81.1.png"></p><h2 id="异常体系结构"><a href="#异常体系结构" class="headerlink" title="异常体系结构"></a>异常体系结构</h2><p><img src="/post/27375/image-%E5%BC%82%E5%B8%B81.2.png"></p><p><img src="/post/27375/image-%E5%BC%82%E5%B8%B81.3.png"></p><p><img src="/post/27375/image-%E5%BC%82%E5%B8%B81.4.png"></p><h2 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h2><p><img src="/post/27375/image-%E5%BC%82%E5%B8%B81.5.png"></p><p>try catch finally</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-comment">//功能代码</span><br>&#125;<span class="hljs-keyword">catch</span>(异常类型 自定义名)&#123;<br>    <span class="hljs-comment">//捕获到类型异常所需执行的语句</span><br>&#125;<span class="hljs-keyword">catch</span>(异常类型 自定义名)&#123;<br>    <span class="hljs-comment">//捕获到类型异常所需执行的语句</span><br>&#125;<span class="hljs-keyword">finally</span>&#123;<br>    <span class="hljs-comment">//无论出不出异常都会执行</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>catch异常，大类应该放在后面</li><li>finally无论出不出异常都会执行</li><li>ctrl+alt+t</li></ul><ul><li>throw 手动抛出异常</li><li>throws 方法抛出异常</li></ul><p>异常抛出处理</p><p><img src="/post/27375/image-%E5%BC%82%E5%B8%B81.6.png"></p><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p><img src="/post/27375/image-20230315141723800.png"></p><p>自定义异常类</p><p><img src="/post/27375/image-%E5%BC%82%E5%B8%B81.7.png"></p><p>测试方法捕获异常并抛出给主方法的catch，catch</p><p><img src="/post/27375/image-%E5%BC%82%E5%B8%B81.8.png"></p><p><img src="/post/27375/image-%E5%BC%82%E5%B8%B81.9.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java开发之IO流</title>
    <link href="https://bugdev.tk/post/57204/"/>
    <id>https://bugdev.tk/post/57204/</id>
    <published>2022-11-09T05:41:00.000Z</published>
    <updated>2024-06-11T06:25:11.213Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><p>流是内存与存储设备间传输数据的通道</p><p>分类</p><p>按流向</p><ul><li>输入流</li><li>输出流</li></ul><p>按单位</p><ul><li><p>字节流，字节为单位，可以读写所有数据</p></li><li><p>字符流，字符为单位，只能读写文本数据</p></li></ul><p>按功能</p><ul><li>节点流：具有实际传输数据的读写功能</li><li>过滤流：在节点流的基础上增强功能</li></ul><h3 id="流分类"><a href="#流分类" class="headerlink" title="流分类"></a>流分类</h3><p><img src="/post/57204/407c7111171142cca38e88605ae8d9ea.png"></p><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><p>父类：抽象类</p><p>InputStream：字节输入流</p><p>OutputStream：字节输出流</p><h3 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h3><p><strong><code>int</code> <code> available()</code></strong> </p><p>返回可以在没有阻塞的情况下从此输入流中读取（或跳过）的字节数的估计值，当检测到流结束时，可能为 0 或 0。 </p><p><strong><code>void</code> <code>close()</code></strong> </p><p>关闭此输入流并释放与该流关联的所有系统资源。 </p><p><strong><code>void</code> <code>mark(int readlimit)</code></strong> </p><p>标记此输入流中的当前位置。 </p><p><strong><code>boolean</code> <code>markSupported()</code></strong> </p><p>测试此输入流是否支持<code>mark</code>和<code>reset</code>方法。 </p><p><strong><code>static  InputStream</code> <code>nullInputStream()</code></strong> </p><p>返回一个不读取字节的新<code>InputStream</code> 。 </p><p><strong><code>abstract  int</code> <code>read()</code></strong> </p><p>从输入流中读取数据的下一个字节。 </p><p><strong><code>int</code> <code>read(byte[] b)</code></strong> </p><p>从输入流中读取一些字节并将它们存储到缓冲区数组<code>b</code>中。 </p><p><strong><code>int</code> <code>read(byte[] b,  int off, int len)</code></strong> </p><p>从输入流中读取多达<code>len</code>字节的数据到字节数组中。 </p><p><strong><code>byte[]</code> <code>readAllBytes()</code></strong> </p><p>从输入流中读取所有剩余字节。 </p><p><strong><code>int</code> <code>readNBytes(byte[] b, int off,  int len)</code></strong> </p><p>从输入流中读取请求的字节数到给定的字节数组中。 </p><p><strong><code>byte[]</code> <code>readNBytes(int len)</code></strong> </p><p>从输入流中读取最多指定数量的字节。 </p><p><strong><code>void</code> <code>reset()</code></strong> </p><p>将此流重新定位到上次对该输入流调用<code>mark</code>方法时的位置。 </p><p><strong><code>long</code> <code>skip(long n)</code></strong> </p><p>跳过并丢弃此输入流中的<code>n</code>字节数据。 </p><p><strong><code>void</code> <code>skipNBytes(long n)</code></strong> </p><p>跳过并丢弃此输入流中正好<code>n</code>字节的数据。 </p><p><strong><code>long</code> <code>transferTo(OutputStream out)</code></strong> </p><p>从此输入流中读取所有字节，并按照读取顺序将字节写入给定的输出流。</p><h3 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h3><p><strong><code>void</code></strong> <strong><code>close()</code></strong> </p><p>关闭此输出流并释放与此流关联的所有系统资源。 </p><p><strong><code>void</code> <code>flush()</code></strong></p><p>刷新此输出流并强制写出任何缓冲的输出字节。 </p><p><strong><code>static  OutputStream</code> <code>nullOutputStream()</code></strong> </p><p>返回一个新的<code>OutputStream</code>丢弃所有字节。 </p><p><strong><code>void</code> <code>write(byte[] b)</code></strong> </p><p>将指定字节数组中的<code>b.length</code>字节写入此输出流。 </p><p><strong><code>void</code> <code>write(byte[] b, int off,  int len)</code></strong> </p><p>从偏移量<code>off</code>开始的指定字节数组中写入<code>len</code>字节到此输出流。 </p><p><strong><code>abstract  void</code> <code>write(int b)</code></strong> </p><p>将指定字节写入此输出流。</p><p><img src="/post/57204/image-20230413141235985.png" alt="image-20230413141235985"></p><h3 id="文件字节流"><a href="#文件字节流" class="headerlink" title="文件字节流"></a>文件字节流<img src="/post/57204/image-20230413141320108.png" alt="image-20230413141320108"></h3><h3 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h3><p><img src="/post/57204/image-20230413202638974.png" alt="image-20230413202638974"></p><p><strong>BufferedInputStream/BufferedOutputStream构造需要一个底层流</strong></p><h3 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h3><p><img src="/post/57204/image-20230415195556684.png" alt="image-20230415195556684"></p><p>ObjectOutputStream/ObjectInputStream构造需要一个底层流</p><p>序列化的类要实现Serializable接口</p><p>seriaVersionUID保证序列化/反的类是同一个</p><p>使用transient修饰属性，这个属性将不能被序列化</p><p>静态属性也不能被序列化</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs java">WoStudent w1= (WoStudent) ois.readObject();<br></code></pre></td></tr></table></figure><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p><img src="/post/57204/image-20230417195023502.png" alt="image-20230417195023502"></p><h3 id="文件字符流"><a href="#文件字符流" class="headerlink" title="文件字符流"></a>文件字符流</h3><p><img src="/post/57204/image-20230417195155959.png"></p><h3 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h3><h3 id="PrintReader"><a href="#PrintReader" class="headerlink" title="PrintReader"></a>PrintReader</h3><h3 id="PrintWrite"><a href="#PrintWrite" class="headerlink" title="PrintWrite"></a>PrintWrite</h3><h3 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h3><p>桥转换流：InputStreamReader/OutputStreamWriter</p><ul><li>可将字节流转换为字符流</li><li>可设置字符的编码方式</li></ul><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><p><img src="/post/57204/image-20230418103744637.png"></p><h3 id="dir"><a href="#dir" class="headerlink" title="dir"></a>dir</h3><p>遍历删除</p><p>遍历指定文件类型</p><h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><p><img src="/post/57204/image-20230419195157336.png" alt="image-20230419195157336"></p><p><img src="/post/57204/image-20230418202358487.png" alt="image-20230418202358487"></p><p><img src="/post/57204/image-20230418202426853.png" alt="image-20230418202426853"></p><p><img src="/post/57204/image-20230418202453741.png" alt="image-20230418202453741"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>02-JavaSE高级</title>
    <link href="https://bugdev.tk/post/62980/"/>
    <id>https://bugdev.tk/post/62980/</id>
    <published>2022-09-11T05:38:00.000Z</published>
    <updated>2024-06-11T06:24:49.779Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Java-SE-Pro"><a href="#Java-SE-Pro" class="headerlink" title="Java SE Pro"></a>Java SE Pro</h1><h2 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h2><p><img src="/post/62980/image-%E5%8C%85%E6%9C%BA%E5%88%B6.png"></p><h3 id="idea层级展开"><a href="#idea层级展开" class="headerlink" title="idea层级展开"></a>idea层级展开</h3><p><img src="/post/62980/image-%E5%8C%85%E6%9C%BA%E5%88%B62.png"></p><h2 id="Javadoc"><a href="#Javadoc" class="headerlink" title="Javadoc"></a>Javadoc</h2><p>Javadoc的作用是用来生成文档</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs java">javadoc -encoding UTF-<span class="hljs-number">8</span> -charset UTF-<span class="hljs-number">8</span> <br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">javadoc -encoding UTF-8 -charset UTF-8 </span><br><span class="hljs-comment">生成文档  设置编码为UTF-8   设置字符编码为UTF-8</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h2><p><img src="/post/62980/image-Scanner1.png"></p><p>通过Scanner类的next() 与nextLine() 方法获取有效输入字符，在读取前一般需要使用hasNext() 与hasNextLine() 判断是否还有输入的数据。</p><h3 id="next"><a href="#next" class="headerlink" title="next()"></a>next()</h3><p><img src="/post/62980/image-Scanner1.1.png"></p><h3 id="nextLine"><a href="#nextLine" class="headerlink" title="nextLine()"></a>nextLine()</h3><p><img src="/post/62980/image-Scanner1.2.png"></p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p><img src="/post/62980/image-%E9%80%92%E5%BD%92.png"></p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="什么是方法"><a href="#什么是方法" class="headerlink" title="什么是方法"></a>什么是方法</h3><p><img src="/post/62980/image-%E6%96%B9%E6%B3%951.png"></p><p><strong>原则</strong></p><p><img src="/post/62980/image-%E6%96%B9%E6%B3%951.1.png"></p><blockquote><ul><li>静态方法static，预加载，静态方法可直接通过类名.方法名调用，非静态需要实例化类对象，再通过类对象.方法名调用</li><li>无返回值可return不带值结束。</li><li>方法名驼峰命名法。</li></ul></blockquote><h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><ul><li><strong>重载是在一个类中，有相同函数名，但形参不同的函数。</strong></li></ul><ul><li><strong>方法重载的规则</strong><ul><li>方法名必须相同</li><li>参数列表必须不同（个数不同、类型不同、排列顺序不同等）</li><li>方法的返回类型可以相同也可以不相同</li><li>仅返回值类型不同的不是方法的重载</li></ul></li></ul><ul><li>实现理论<ul><li><strong>方法名称相同时，编译器根据调用方法方法的参数个数、参数类型等去逐个匹配，选择对应的方法，若失败则编译器报错</strong></li></ul></li></ul><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><ul><li>从JDK1.5开始，JAVA支持传递同类型的可变参数给一个方法</li><li>在方法声明中，在指定参数类型后加一个省略号（…）。</li><li>一个方法中只能指定一个可变参数，且必须是方法的最后一个参数，任何普通的参数必须在它前面声明。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printMax</span><span class="hljs-params">(<span class="hljs-type">double</span>...numbers)</span>&#123;<br>        <span class="hljs-comment">//判断传入double数组长度为0时，输出语句并终止</span><br>        <span class="hljs-keyword">if</span> (numbers.length == <span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;No argument passed&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//定义变量为第一个数</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> numbers[<span class="hljs-number">0</span>];<br>        <span class="hljs-comment">//进行排序</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; numbers.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (numbers[i]&gt;result)&#123;<br>                result = numbers[i];<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-comment">//输出结果</span><br>        System.out.println(<span class="hljs-string">&quot;The max value is &quot;</span> + result);<br>    &#125;<br></code></pre></td></tr></table></figure><p>​       </p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组就是存储数据长度固定的容器，保证多个数据的数据类型要一致</p><p><strong>静态初始化（指定内容）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//example</span><br><span class="hljs-type">int</span> [] a =&#123;<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">20</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>动态初始化（指定长度）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">数组存储的数据类型[ ] 数组名字 = <span class="hljs-keyword">new</span> 数组存储的数据类型[数组长度];<br>数组存储的数据类型 数组名字[ ] = <span class="hljs-keyword">new</span> 数组存储的数据类型[数组长度];<br></code></pre></td></tr></table></figure><p><img src="/post/62980/image-%E6%95%B0%E7%BB%841.png"></p><p><strong>特点</strong></p><p><img src="/post/62980/image-%E6%95%B0%E7%BB%841.1.png"></p><p><strong>总结</strong></p><p><img src="/post/62980/image-%E6%95%B0%E7%BB%841.2.png"></p><h3 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h3><p><a href="https://blog.csdn.net/weixin_42753193/article/details/123066175">https://blog.csdn.net/weixin_42753193/article/details/123066175</a></p><p><img src="/post/62980/image-%E6%95%B0%E7%BB%841.3.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//sort</span><br><span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3145</span>,<span class="hljs-number">15</span>,<span class="hljs-number">12</span>,<span class="hljs-number">48564</span>&#125;<br>Arrays.sort(a);<br><br><span class="hljs-comment">//fill</span><br><span class="hljs-comment">//参数框内容(填充数组 起始下标 终止下标 填充内容)</span><br>Arrays.fill(a,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1532</span>)<br><br></code></pre></td></tr></table></figure><ul><li><strong>toString</strong>输出</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//以String类型打印输出a</span><br>System.Out.println(Arrays.toString(a))<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
