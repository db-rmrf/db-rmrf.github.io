<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>nginx配置反向代理</title>
    <link href="/post/51543/"/>
    <url>/post/51543/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>nginx 的配置文件 /etc/nginx/nginx.conf</p><p><strong>编辑前先backup</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 备份配置文件<br>cp nginx.conf nginx.conf.bak<br><br><br><span class="hljs-regexp">//</span> 编辑Nginx配置文件<br>vim <span class="hljs-regexp">/etc/</span>nginx/nginx.conf<br><span class="hljs-regexp">//</span> 在配置文件的http&#123;&#125;中添加如下配置<br>server &#123;<br><span class="hljs-comment"># 端口号</span><br>listen       <span class="hljs-number">80</span>;<br><span class="hljs-comment"># 域名</span><br>server_name  codingme.net;<br><span class="hljs-comment"># web目录</span><br>root /webroot;<br><span class="hljs-comment"># 默认首页</span><br>index index.html<br>error_page   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /<span class="hljs-number">50</span>x.html;<br>location / &#123;<br>&#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="配置反向代理"><a href="#配置反向代理" class="headerlink" title="配置反向代理"></a>配置反向代理</h3><p>什么是反向代理呢？<a href="/post/32921/">参考</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 编辑Nginx配置文件<br>vim <span class="hljs-regexp">/etc/</span>nginx/nginx.conf<br><span class="hljs-regexp">//</span> 在配置文件的http&#123;&#125;中添加如下配置<br> server &#123;<br>        listen       <span class="hljs-number">80</span>;<br>        server_name  codingme.net;<br>        location / &#123;<br><span class="hljs-comment"># Tomcat访问路径</span><br>            proxy_pass http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8080</span>/;<br>        &#125;<br>        error_page   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /<span class="hljs-number">50</span>x.html;<br>        location = /<span class="hljs-number">50</span>x.html &#123;<br>            root   html;<br>        &#125;        <br>    &#125;  <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ops</tag>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx的简单使用</title>
    <link href="/post/32921/"/>
    <url>/post/32921/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Nginx简介和三大功能"><a href="#Nginx简介和三大功能" class="headerlink" title="Nginx简介和三大功能"></a>Nginx简介和三大功能</h1><p>Nginx (engine x)是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP（邮件）服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Pam6Πep）开发的，第一个公开的版本0.1.0发布于2004年6月1日。2011年6月1日，nginx 1.0.4发布。</p><p>其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网页等。在全球活跃的网站中有12.18%的使用比例，大约为2220万个网站。</p><p>Nginx是一个安装非常简单、配置文件非常简洁（且能支持perl语法）、Bug非常少的服务。Nginx 启动特别容易，并且几乎可以做到7*24不间断运行，即使运行数个月也不需要重新启动。你还能不间断服务的情况下进行软件版本的升级。</p><p>nginx的代码是完全使用C语言开发。官方数据测试表明能够支持高达 50,000 个并发连接数的响应</p><h2 id="正向代理和反向代理"><a href="#正向代理和反向代理" class="headerlink" title="正向代理和反向代理"></a>正向代理和反向代理</h2><p>正向代理：代理客户端</p><p>正向代理类似一个跳板机，代理访问外部资源<br>比如我们国内访问谷歌，直接访问访问不到，我们可以通过一个正向代理服务器，请求发到代理服，代理服务器能够访问谷歌，这样由代理去谷歌取到返回数据，再返回给我们，这样我们就能访问谷歌了</p><ul><li>访问原来无法访问的资源，如google</li><li>可以做缓存，加速访问资源</li><li>对客户端访问授权，上网进行认证</li><li>代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息</li></ul><p>反向代理：代理服务器</p><p>反向代理（Reverse Proxy）实际运行方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器</p><ul><li>保证内网的安全，阻止web攻击，大型网站，通常将反向代理作为公网访问地址，Web服务器是内网`</li><li>负载均衡，通过反向代理服务器来优化网站的负载</li></ul><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>权重轮询实现</p><p>Nginx提供的负载均衡策略有两种：内置策略和拓展策略。内置策略为轮询，Ip hash。拓展策略</p><p>iphash 对客户端请求的ip进行hash操作，然后根据hash结果来将同一个客户端的ip请求分发给同一台服务器进行处理，可以解决session不共享的问题。（redis也能实现，也推荐使用redis）</p><h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><p>动静分离，在我们的软件开发中，有一些请求需要后台处理，有些请求不需要经过后台处理的（如：css、html、jsp、js等等文件），这些不需要经过后台处理的文件称之为静态文件。让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作。提高资源响应的速度。</p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><figure class="highlight jboss-cli"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">/usr/local/nginx/sbin/</span><br><span class="hljs-string">./nginx</span><br><span class="hljs-string">./nginx</span> -s stop<br><span class="hljs-string">./nginx</span> -s <span class="hljs-keyword">quit</span><br><span class="hljs-string">./nginx</span> -s <span class="hljs-keyword">reload</span><br>ps aux|grep nginx 查看进程<br></code></pre></td></tr></table></figure><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>这个就没必要说了。yum，或者官网下载push上去</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ops</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker的使用</title>
    <link href="/post/50597/"/>
    <url>/post/50597/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="docker是什么"><a href="#docker是什么" class="headerlink" title="docker是什么"></a>docker是什么</h1><p><strong>docker是虚拟化技术的一种</strong></p><p>docker：轻量化的容器技术</p><p>运行机制：基于内核，把运行环境和依赖的库、运行的软件打包成镜像，docker镜像互相独立</p><p>特点：快速交付、部署、节省资源、简单、便捷</p><h2 id="docker的历史"><a href="#docker的历史" class="headerlink" title="docker的历史"></a>docker的历史</h2><p>Docker 最初是 dotCloud 公司创始人 Solomon Hykes 在法国期间发起的一个公司内部项目，它是基于 dotCloud 公司多年云服务技术的一次革新，并于 <a href="https://en.wikipedia.org/wiki/Docker_(software)">2013 年 3 月以 Apache 2.0 授权协议开源</a>，主要项目代码在 <a href="https://github.com/moby/moby">GitHub</a> 上进行维护。Docker 项目后来还加入了 Linux 基金会，并成立推动 <a href="https://www.opencontainers.org/">开放容器联盟（OCI）</a>。</p><p>Docker 自开源后受到广泛的关注和讨论，至今其 GitHub 项目已经超过 4 万 6 千个星标和一万多个 fork。甚至由于 Docker 项目的火爆，在 2013 年底，<a href="https://blog.docker.com/2013/10/dotcloud-is-becoming-docker-inc/">dotCloud 公司决定改名为 Docker</a>。Docker 最初是在 Ubuntu 12.04 上开发实现的；Red Hat 则从 RHEL 6.5 开始对 Docker 进行支持；Google 也在其 PaaS 产品中广泛应用 Docker。</p><p>Docker 使用 Google 公司推出的 <a href="https://golang.org/">Go 语言</a> 进行开发实现，基于 Linux 内核的 <a href="https://zh.wikipedia.org/wiki/Cgroups">cgroup</a>，<a href="https://en.wikipedia.org/wiki/Linux_namespaces">namespace</a>，以及<a href="https://en.wikipedia.org/wiki/Aufs">AUFS</a> 类的 <a href="https://en.wikipedia.org/wiki/Union_mount">Union FS</a> 等技术，对进程进行封装隔离，属于 <a href="https://en.wikipedia.org/wiki/Operating-system-level_virtualization">操作系统层面的虚拟化技术</a>。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。最初实现是基于 <a href="https://linuxcontainers.org/lxc/introduction/">LXC</a>，从 0.7 版本以后开始去除 LXC，转而使用自行开发的 <a href="https://github.com/docker/libcontainer">libcontainer</a>，从 1.11 开始，则进一步演进为使用 <a href="https://github.com/opencontainers/runc">runC</a> 和 <a href="https://github.com/containerd/containerd">containerd</a>。</p><h1 id="docker组成"><a href="#docker组成" class="headerlink" title="docker组成"></a>docker组成</h1><p><strong>镜像（lmage）：</strong></p><p>docker镜像就像是一个模板，可以通过这个模板创建容器服务，tomcat镜像run＞tomcat01容器（提供服务器）。通过这个镜可以创建多个容器（最终服务行或者项目运行在容器中）。</p><p><strong>容额（container）：</strong></p><p>Docker利用容器技术，独立返行一个或一个组应用，通过镜像来创建的。启动，停止，删除，基本命令！</p><p>目前可以把容器理解为就一个简易LINUX系统</p><p><strong>仓库（repository）：</strong></p><p>仓理就是存放镜像的地方！</p><p>仓库分为公有仓库和私有仓库！</p><h1 id="docker的底层原理"><a href="#docker的底层原理" class="headerlink" title="docker的底层原理"></a>docker的底层原理</h1><p>Docker是一个Client-Server结构的系统，Docker的守护进程运行在主机上。通过Socket从客户端访问<br>docker server接收到docker-Clent的指令，就会执行指令</p><p><img src="/post/50597/image-20220412180139850.png"></p><p><strong>docker为什么比VM快！</strong></p><p><img src="/post/50597/image-20220412180515290.png"></p><p>Docker有着比虚拟机更少的抽象层</p><p>docker利用宿主机的内核，vm则需要guest os</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><p>Docker需要一个64位系统的红帽系统，内核的版本必须大于3.10。可以用下面的命令来检查是否满足docker的要求。</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="language-bash">查看内核版本</span><br><span class="hljs-meta">$ </span><span class="language-bash"><span class="hljs-built_in">uname</span> -r</span> <br>3.10.0-229.el7.x86_64 <br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="language-bash">系统版本</span><br>[root@dockerhost ~]# cat /etc/os-release <br>NAME=&quot;CentOS Linux&quot;<br>VERSION=&quot;7 (Core)&quot;<br>ID=&quot;centos&quot;<br>ID_LIKE=&quot;rhel fedora&quot;<br>VERSION_ID=&quot;7&quot;<br>PRETTY_NAME=&quot;CentOS Linux 7 (Core)&quot;<br>ANSI_COLOR=&quot;0;31&quot;<br>CPE_NAME=&quot;cpe:/o:centos:centos:7&quot;<br>HOME_URL=&quot;https://www.centos.org/&quot;<br>BUG_REPORT_URL=&quot;https://bugs.centos.org/&quot;<br><br>CENTOS_MANTISBT_PROJECT=&quot;CentOS-7&quot;<br>CENTOS_MANTISBT_PROJECT_VERSION=&quot;7&quot;<br>REDHAT_SUPPORT_PRODUCT=&quot;centos&quot;<br>REDHAT_SUPPORT_PRODUCT_VERSION=&quot;7&quot;<br><br></code></pre></td></tr></table></figure><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="language-bash">卸载旧的版本</span><br>sudo yum remove docker \<br>                  docker-client \<br>                  docker-client-latest \<br>                  docker-common \<br>                  docker-latest \<br>                  docker-latest-logrotate \<br>                  docker-logrotate \<br>                  docker-engine <br>                  <br>                  <br><span class="hljs-meta">#</span><span class="language-bash">安装依赖</span>                 <br>sudo yum install -y yum-utils<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="language-bash">设置镜像仓库</span><br>sudo yum-config-manager \<br>    --add-repo \<br>    https://download.docker.com/linux/centos/docker-ce.repo#官方默认为国外源<br><br><br>sudo yum-config-manager \<br>    --add-repo \<br>    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo#阿里云<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="language-bash">更新yum索引</span><br>[root@dockerhost ~]# yum makecache fast<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="language-bash">安装docker相关 （ce是社区版 ee为企业版）</span><br>sudo yum install docker-ce docker-ce-cli containerd.io<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="language-bash">启动</span><br>sudo systemctl start docker<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="language-bash">验证</span><br>sudo docker run hello-world<br>[root@dockerhost ~]# docker version <br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="language-bash">查看下载镜像</span><br>[root@dockerhost ~]# docker images <br>REPOSITORY    TAG       IMAGE ID       CREATED        SIZE<br>hello-world   latest    feb5d9fea6a5   6 months ago   13.3kB<br></code></pre></td></tr></table></figure><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker version #版本<br>docker --help #帮助<br>docker info #显示docker详细信息<br></code></pre></td></tr></table></figure><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><h3 id="docker-images-查看本地镜像"><a href="#docker-images-查看本地镜像" class="headerlink" title="docker images    查看本地镜像"></a><strong>docker images    查看本地镜像</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@dockerhost ~]# docker images <br>REPOSITORY    TAG       IMAGE ID       CREATED        SIZE<br>hello-world   latest    feb5d9fea6a5   6 months ago   13.3kB<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="language-bash">解释</span><br>REPOSLORY镜像的仓库源<br>TAG镜像的标等<br>IMAGE ID镜像id<br>CREATED创建时间<br>SIZE大小<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="language-bash">可选项</span><br>-a，--all#列出所有镜像<br>-q，--quiet#列出镜像id<br></code></pre></td></tr></table></figure><p><strong>docker search 查找</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@dockerhost ~]# docker search busybox<br>NAME                                DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED<br>busybox                             Busybox base image.                             2569      [OK]       <br>radial/busyboxplus                  Full-chain, Internet enabled, busybox made f…   48                   [OK]<br>                 <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="language-bash">可选项</span><br>Usage:  docker search [OPTIONS] TERM<br><br>Search the Docker Hub for images<br><br>Options:<br>  -f, --filter filter   Filter output based on conditions provided<br>      --format string   Pretty-print search using a Go template<br>      --limit int       Max number of search results (default 25)<br>      --no-trunc        Don&#x27;t truncate output<br></code></pre></td></tr></table></figure><h3 id="docker-pull-拉取"><a href="#docker-pull-拉取" class="headerlink" title="docker pull 拉取"></a><strong>docker pull 拉取</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull [OPTIONS] NAME[:TAG|@DIGEST]<br></code></pre></td></tr></table></figure><h3 id="docker-rmi-删除"><a href="#docker-rmi-删除" class="headerlink" title="docker rmi 删除"></a><strong>docker rmi 删除</strong></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@dockerhost ~]<span class="hljs-comment"># docker rmi -f 容器id #删除指定容器</span><br>[root@dockerhost ~]<span class="hljs-comment"># docker rmi -f 容器id  容器id 容器id #删除多个</span><br>[root@dockerhost ~]<span class="hljs-comment"># docker rmi -f $(docker images -aq) #删除全部</span><br></code></pre></td></tr></table></figure><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull centos<br></code></pre></td></tr></table></figure><p><strong>创建容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="language-bash">参数</span><br>--nanme=&quot;name&quot;容器名，区别容器<br>-d后台方式运行<br>-it交互方式运行进入容器查看内容<br>-p指定容器端口 -p 8080<br>-pip:主机端口:容器端口<br>-p主机端口:容器端口<br>-p容器端口<br>-p随机指定端口<br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="language-bash">创建容器并启动</span><br>[root@dockerhost ~]# docker run --name docker-cent -it centos /bin/bash<br>[root@90841170aaad /]# ls     <br>bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<br></code></pre></td></tr></table></figure><h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a><strong>退出容器</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="language-bash">退出</span><br>[root@90841170aaad /]# exit#停止容器并退出<br>ctrl + P + Q#不停止退出<br></code></pre></td></tr></table></figure><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a><strong>删除容器</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">doncker rm 容器id   #删除指定容器，不能删除运行状态容器<br>docker rm -f $(docker ps -aq)#删除所有<br>docker ps -a -q|xargs docker rm#删除所有<br></code></pre></td></tr></table></figure><h3 id="启动和停止"><a href="#启动和停止" class="headerlink" title="启动和停止"></a><strong>启动和停止</strong></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker start 容器<span class="hljs-built_in">id</span><span class="hljs-comment">#启动</span><br>docker restart 容器<span class="hljs-built_in">id</span><span class="hljs-comment">#重启</span><br>docker stop 容器<span class="hljs-built_in">id</span><span class="hljs-comment">#停止</span><br>docker <span class="hljs-built_in">kill</span> 容器<span class="hljs-built_in">id</span><span class="hljs-comment">#强制杀进程</span><br></code></pre></td></tr></table></figure><h1 id="常用其它命令"><a href="#常用其它命令" class="headerlink" title="常用其它命令"></a>常用其它命令</h1><h3 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a><strong>后台运行</strong></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d 镜像<br><span class="hljs-comment">#注意，后台运行容器时，容器必须有前台服务进程，否则会被kill</span><br></code></pre></td></tr></table></figure><h3 id="查看logs"><a href="#查看logs" class="headerlink" title="查看logs"></a><strong>查看logs</strong></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker logs [OPTIONS] CONTAINER<br><br><span class="hljs-comment">#参数:</span><br>      --details        Show extra details provided to logs<br>  -f, --follow         Follow <span class="hljs-built_in">log</span> output<br>      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m <span class="hljs-keyword">for</span> 42 minutes)<br>  -n, --<span class="hljs-built_in">tail</span> string    Number of lines to show from the end of the logs (default <span class="hljs-string">&quot;all&quot;</span>)<br>  -t, --timestamps     Show timestamps<br>      --until string   Show logs before a timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m <span class="hljs-keyword">for</span> 42 minutes)<br></code></pre></td></tr></table></figure><h3 id="查看进程id"><a href="#查看进程id" class="headerlink" title="查看进程id"></a><strong>查看进程id</strong></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker top 容器<span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure><h3 id="查看元数据"><a href="#查看元数据" class="headerlink" title="查看元数据"></a><strong>查看元数据</strong></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker inspect [OPTIONS] NAME|ID [NAME|ID...]<br><br>Options:<br>  -f, --format string   Format the output using the given Go template<br>  -s, --size            Display total file sizes <span class="hljs-keyword">if</span> the <span class="hljs-built_in">type</span> is container<br>      --<span class="hljs-built_in">type</span> string     Return JSON <span class="hljs-keyword">for</span> specified <span class="hljs-built_in">type</span><br></code></pre></td></tr></table></figure><h3 id="进入正在运行的容器"><a href="#进入正在运行的容器" class="headerlink" title="进入正在运行的容器"></a><strong>进入正在运行的容器</strong></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#1.交互模式进入容器开启新的bashshell</span><br>docker <span class="hljs-built_in">exec</span> -it 容器<span class="hljs-built_in">id</span> bashshell<br><br><span class="hljs-comment">#2.进入容器当前shell</span><br>docker attach 容器<span class="hljs-built_in">id</span>  <br></code></pre></td></tr></table></figure><h3 id="从容器内copy到主机"><a href="#从容器内copy到主机" class="headerlink" title="从容器内copy到主机"></a><strong>从容器内copy到主机</strong></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker <span class="hljs-built_in">cp</span> 容器<span class="hljs-built_in">id</span>:容器路径 主机路径<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker报错Error response from daemon: driver failed programming external connectivity on endpoint</title>
    <link href="/post/47716/"/>
    <url>/post/47716/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>报错提示：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# docker run -d -p 3344:80 centos:httpd /bin/sh -c /usr/local/bin/start.sh<br>d5b2bd5a7bc4895a973fe61efd051847047d26385f65c278aaa09e4fa31c4d76<br>docker: Error response from daemon: driver failed programming external connectivity on endpoint quirky_allen (6bda693d1143657e46bee0300276aa05820da2b21a3d89441e820d1a274c48b6): (iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 0/0 --dport 3344 -j DNAT --to-destinatio<br></code></pre></td></tr></table></figure><p><strong>原因</strong></p><p>docker服务启动时定义的自定义链DOCKER由于firewall 被清掉</p><p>firewall的底层是使用iptables进行数据过滤，建立在iptables之上，这可能会与 Docker 产生冲突。</p><p>docker容器的底层原理决定在启动docker的时候会在iptables中注册一个链，通过防火墙的链也可以找到其注册的信息，主要注册这些链，是docker中的容器为了暴露端口而使用的</p><p>这时当 <code>firewalld</code> 启动或者重启的时候，将会从 iptables 中移除 <code>DOCKER</code> 的规则，从而影响了 Docker 的正常工作</p><p><strong>解决</strong></p><p>重启docker容器即可解决该问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl restart docker<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单的家庭局域网虚拟组网方式（zerotier）</title>
    <link href="/post/42068/"/>
    <url>/post/42068/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里引述一下什么是zerotier？</p><p>来自官网的一段：ZeroTier is a smart Ethernet switch for planet Earth.</p><p>It’s a distributed network hypervisor built atop a cryptographically secure global peer to peer network. It provides advanced network virtualization and management capabilities on par with an enterprise SDN switch, but across both local and wide area networks and connecting almost any kind of app or device.</p><p>This manual describes the design and operation of ZeroTier and its associated services, apps, and libraries. Its intended audience includes IT professionals, network administrators, information security experts, and developers.</p><p>The first section (2) of this guide explains ZeroTier’s design and operation at a high level and is written for those with at least an intermediate knowledge of topics like TCP/IP and Ethernet networking. It’s not required reading for most users, but understanding how things work in detail helps clarify everything else and helps tremendously with troubleshooting should anything go wrong.</p><p>The remaining sections deal more concretely with deployment and administration.</p><h2 id="Software-Defined-Network"><a href="#Software-Defined-Network" class="headerlink" title="Software Defined Network"></a>Software Defined Network</h2><p>这里牵扯到SDN的概念：SDN字面意思是<strong>软件定义网络</strong>，其试图摆脱硬件对网络架构的限制，这样便可以像升级、安装软件一样对网络进行修改，便于更多的APP（应用程序）能够快速部署到网络上。</p><p>如果把现有的网络看成手机，那SDN的目标就是做出一个网络界的Android系统，可以在手机上安装升级，同时还能安装更多更强大的手机APP。</p><p>过去30年里，IP网络一直是全分布式的，战功卓著，解决了各种客户需求，今天SDN是为了未来更好更快的实现用户需求。并不是有什么需求通过传统方法不能做到，只是SDN做得更快、更好、更简单。</p><p>SDN的本质是网络软件化，提升网络可编程能力，是一次网络架构的重构，而不是一种新特性、新功能。SDN将比原来网络架构更好、更快、更简单的实现各种功能特性。</p><p>简单来说zerotier就是一个sdn工具，它的底层基于<strong>udp传输</strong>，如果是对于有时延有要求的小型企业，这里应该首先选择思科或华为的<strong>企业级SDN</strong>方案去部署，甚至直接选择<strong>专线</strong>为基础去组建局域网。</p><p>当然我们是<strong>家庭局域网</strong>，对于国内的<strong>qos限速</strong>这里我们不去考虑（qos限速：一般来说运营商处理庞大的跨境数据时，会进行网络排序，对普通用户而言，一般的udp流量排名优先级很低，在实际过程中表现为时延高、转发速度慢，甚至有可能被丢包），而且普通用户不太可能用的跨境组网，对于一般国内的网络资源来说，速度其实不会很低。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>因为具体情况不一，这里不贴详细配置，附上一个参考的，<a href="https://post.smzdm.com/p/apxkx2m7/">参考配置</a></p><p>简单来说就是对于普通用户只需要将软路由等设备作为zerotier的子网网关，通过nat网络进行代理服务</p><p>考虑到官网服务的在中国大陆的特殊性，部署私有根节点的解决方案也在上面有提及</p>]]></content>
    
    
    <categories>
      
      <category>Network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>network project</title>
    <link href="/post/39856/"/>
    <url>/post/39856/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="ab59e1b0dcb612de2ce1c7338d9de0f235c116b29b0d00070e3ef3150deb6daf">fd8d1bf829fa52bdbab6091ca2743008d5f39dd7f181b164c120e0a02513072a340b83c41d8452a9ad703ca4dcacada86d604bde2dd1b35476eb4e4e0cc27847e659166620161694538c10a0a0793827e7acc9e0844460ca6ae3a36eec31ee35ce6c5dfce7f88efb22dfbc708191c648ae8e760552855553adf97d9fc31b9680ab1a315edba8c6d37da25fc55a294f4ff9a15b72ba0e2ecd5b878a4421063ad2f9c1d2e96e31706ded786b1db8dec05d4b7da754dfd94e10a1c251caa664dcf01e1357c0f3efc25f2ca7c43c8a3a334b5ad339d2bd7b0e53fad5b88f6e339c5405a4c7a0a576ec1f47e505a20298be0207f28d04b70176a3362ae49f90abb52d2343c6e4dc4b6f4bd8be2acb015ddb97c32576a3ecd6b68f77cfae0400b7e594aa9a727be7fd2aec76cf48a6e6a3483a9bcc6a231f8855127be811857a063c10f6f8588dd071f7c333b96f8f41c818c0639d68bb08092ec2b3bbf9c352536de72caf63db357eba85c051b55dc60e3c9d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Private</tag>
      
      <tag>project</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>servelet实现</title>
    <link href="/post/32235/"/>
    <url>/post/32235/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="实现Servlet规范，"><a href="#实现Servlet规范，" class="headerlink" title="实现Servlet规范，"></a>实现Servlet规范，</h1><p>即继承HttpServlet类</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xxxx.servelet;<br><br><span class="hljs-keyword">import</span> java.servelet.http.HttpServelet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Servlet01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServelet</span>&#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="重写service方法"><a href="#重写service方法" class="headerlink" title="重写service方法"></a>重写service方法</h2><p><img src="/post/32235/Servlet02.jpg"></p><h3 id="Servlet的其他实现方式"><a href="#Servlet的其他实现方式" class="headerlink" title="Servlet的其他实现方式"></a>Servlet的其他实现方式</h3><ul><li><p>继承GennerServlet类</p></li><li><p>实现Servlet类</p><p>重写doget方法</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HCIA速通-网络工程师-9-企业网络架构4</title>
    <link href="/post/22316/"/>
    <url>/post/22316/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="IPsec-VPN"><a href="#IPsec-VPN" class="headerlink" title="IPsec VPN"></a>IPsec VPN</h1><p><img src="/post/22316/image-20220331202106621.png"></p><h2 id="IPsec架构"><a href="#IPsec架构" class="headerlink" title="IPsec架构"></a>IPsec架构</h2><p><img src="/post/22316/image-20220331225543923.png"></p><ul><li>IPsec不是一个单纯的协议，它通过AH和ESP两个安全协议实现IP数据报的安全传输</li><li>IKE协议提供密钥协商，建立和维护安全联盟SA等服务</li></ul><h3 id="安全联盟SA"><a href="#安全联盟SA" class="headerlink" title="安全联盟SA"></a>安全联盟SA</h3><p><img src="/post/22316/image-20220331225923209.png"></p><ul><li>安全联盟定了iPSec对等体间将使用的数据封装模式、认证和加密算法、密钥等参数</li><li>安全联盟是单向的、两个对等体之间的双向通信，至少需要两个SA</li></ul><h3 id="传输模式"><a href="#传输模式" class="headerlink" title="传输模式"></a>传输模式</h3><p><img src="/post/22316/image-20220403174742404.png"></p><ul><li>在传输模式下，AH或ESP报头位于IP报头与传输层报头之间</li></ul><h3 id="隧道模式"><a href="#隧道模式" class="headerlink" title="隧道模式"></a>隧道模式</h3><p><img src="/post/22316/image-20220403175142770.png"></p><p>生成另外一个新的IP报头，并封装在AH或ESP之间</p><h3 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h3><p><img src="/post/22316/image-20220403175915247.png"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><img src="/post/22316/image-20220403180003825.png"></p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p><img src="/post/22316/image-20220403180312128.png"></p><ul><li>对等体安全提议参数须一致</li></ul><p><img src="/post/22316/image-20220403180225727.png"></p><p><img src="/post/22316/image-20220403180451360.png"></p><h1 id="GRE"><a href="#GRE" class="headerlink" title="GRE"></a>GRE</h1><p><img src="/post/22316/image-20220406191352546.png"></p><p><img src="/post/22316/image-20220406191629025.png"></p><p><img src="/post/22316/image-20220406191701948.png"></p><p><img src="/post/22316/image-20220406191739831.png"></p><h1 id="SNMP"><a href="#SNMP" class="headerlink" title="SNMP"></a>SNMP</h1><p><img src="/post/22316/image-20220406192614712.png"></p><h1 id="Esight"><a href="#Esight" class="headerlink" title="Esight"></a>Esight</h1><p>。。。。</p>]]></content>
    
    
    <categories>
      
      <category>Network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HCIA速通-网络工程师-8-企业网络架构3</title>
    <link href="/post/17533/"/>
    <url>/post/17533/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h1><p><img src="/post/17533/image-20220329223732932.png"></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="静态nat"><a href="#静态nat" class="headerlink" title="静态nat"></a>静态nat<img src="/post/17533/image-20220329224028593.png"></h3><ul><li><strong>私有地址和公有地址一对一映射</strong></li><li><strong>一个公网ip只分配给唯一且固定的内网主机</strong></li></ul><h3 id="动态nat"><a href="#动态nat" class="headerlink" title="动态nat"></a>动态nat</h3><p><img src="/post/17533/image-20220329224207108.png"></p><ul><li><strong>基于地址池实现地址转换</strong></li></ul><h3 id="napt"><a href="#napt" class="headerlink" title="napt"></a>napt</h3><p><img src="/post/17533/image-20220329224420934.png"></p><ul><li><strong>网络地址端口转换napt允许多个内部地址映射成同一公有地址的不同端口</strong></li></ul><h3 id="esay-ip"><a href="#esay-ip" class="headerlink" title="esay ip"></a>esay ip</h3><p><img src="/post/17533/image-20220329224608792.png"></p><ul><li><strong>允许将多个内部地址映射到网关出接口地址上的不同端口</strong></li></ul><h3 id="nat服务器"><a href="#nat服务器" class="headerlink" title="nat服务器"></a>nat服务器</h3><p><img src="/post/17533/image-20220329224802984.png"></p><ul><li><strong>通过配置nat服务器，可以使外网用户访问内网服务器</strong></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="静态nat-1"><a href="#静态nat-1" class="headerlink" title="静态nat"></a>静态nat</h3><p><img src="/post/17533/image-20220329225153324.png"></p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p><img src="/post/17533/image-20220329225240459.png"></p><h3 id="动态nat-1"><a href="#动态nat-1" class="headerlink" title="动态nat"></a>动态nat</h3><p><img src="/post/17533/image-20220329225303691.png"></p><p>acl表示允许作nat的地址</p><h4 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h4><p><img src="/post/17533/image-20220329225411561.png"></p><h3 id="napt-1"><a href="#napt-1" class="headerlink" title="napt"></a>napt</h3><p><img src="/post/17533/image-20220329225303691.png"></p><p><strong>注意</strong>：<strong>no-pat参数不要输入</strong></p><h3 id="esay-ip-1"><a href="#esay-ip-1" class="headerlink" title="esay ip"></a>esay ip</h3><p><img src="/post/17533/image-20220329225702848.png"></p><h4 id="验证-2"><a href="#验证-2" class="headerlink" title="验证"></a>验证</h4><p><img src="/post/17533/image-20220329225949378.png"></p><h3 id="nat-server"><a href="#nat-server" class="headerlink" title="nat server"></a>nat server</h3><p><img src="/post/17533/image-20220329230017281.png"></p><h1 id="WWAN"><a href="#WWAN" class="headerlink" title="WWAN"></a>WWAN</h1><p><img src="/post/17533/image-20220331194225599.png"></p><p>配置</p><p><img src="/post/17533/image-20220331194739103.png"></p><p>ppoe<img src="/post/17533/image-20220331194803731.png"></p><p>配置nat角色<img src="/post/17533/image-20220331194840256.png"></p><h1 id="访问控制列表"><a href="#访问控制列表" class="headerlink" title="访问控制列表"></a>访问控制列表</h1><p><img src="/post/17533/image-20220331195031730.png"></p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p><img src="/post/17533/image-20220331195514408.png"></p><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><h4 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本<img src="/post/17533/image-20220331195717243.png"></h4><h4 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h4><p><img src="/post/17533/image-20220331195806483.png"></p><h1 id="AAA"><a href="#AAA" class="headerlink" title="AAA"></a>AAA</h1><p><img src="/post/17533/image-20220331200402469.png"></p><p><img src="/post/17533/image-20220331200836967.png"></p><p><img src="/post/17533/image-20220331201103593.png"></p><p><img src="/post/17533/image-20220331201120889.png"></p><p><img src="/post/17533/image-20220331201139759.png"></p>]]></content>
    
    
    <categories>
      
      <category>Network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HCIA速通-网络工程师-7-企业网络架构2</title>
    <link href="/post/31555/"/>
    <url>/post/31555/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>特辑专属BGM-Hacknet原声集</strong></p>    <div id="aplayer-GPEdRNpa" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="8058662392" data-server="tencent" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="140px" data-preload="auto" data-theme="#555"></div> <h1 id="HDLC"><a href="#HDLC" class="headerlink" title="HDLC"></a>HDLC</h1><p><img src="/post/31555/image-20220328201940419.png"></p><p>串行链路传输方式</p><p>HDLC帧格式</p><p><img src="/post/31555/image-20220328204651361.png"></p><ul><li>信息帧、监控帧、无编号帧</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><img src="/post/31555/image-20220328204757358.png"></p><h2 id="HDLC接口地址借用"><a href="#HDLC接口地址借用" class="headerlink" title="HDLC接口地址借用"></a>HDLC接口地址借用</h2><p><img src="/post/31555/image-20220328204834838.png"></p><h1 id="PPP"><a href="#PPP" class="headerlink" title="PPP"></a>PPP</h1><p>PPP协议是一种在串行链路上传输IP数据包的一种方法，是一个协议的集合，不是单一的协议，支持建立链路的链路控制协议LCP以及一系列的NCP 0x0021时，数据部分是IP数据报。 0xC021时,数据部分是LCP数据（链路控制协议）</p><h2 id="PPP组件"><a href="#PPP组件" class="headerlink" title="PPP组件"></a>PPP组件</h2><p><img src="/post/31555/image-20220328205145932.png"></p><h2 id="PPP链路建立过程"><a href="#PPP链路建立过程" class="headerlink" title="PPP链路建立过程"></a>PPP链路建立过程</h2><p><img src="/post/31555/image-20220328205215587.png"></p><h2 id="PPP帧格式"><a href="#PPP帧格式" class="headerlink" title="PPP帧格式"></a>PPP帧格式</h2><p><img src="/post/31555/image-20220328205323131.png"></p><h2 id="LCP报文"><a href="#LCP报文" class="headerlink" title="LCP报文"></a>LCP报文</h2><p><img src="/post/31555/image-20220328205348562.png"></p><h3 id="协商参数"><a href="#协商参数" class="headerlink" title="协商参数"></a>协商参数</h3><p><img src="/post/31555/image-20220328205421988.png"></p><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><p><img src="/post/31555/image-20220328205640691.png"></p><h2 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h2><h3 id="PAP"><a href="#PAP" class="headerlink" title="PAP"></a>PAP</h3><p>①PAP提供了一种简单的方法让对端使用2次握手来建立自己的身份，这个仅在初始连接建立时完成。<br> ②连接建立后，被认证者反复向认证者发送一对用户名和密码，直到认证被确认或连接中断。<br> ③安全性不高，密码在链路上明文传输，没有重放、反复尝试、错误攻击的保护。</p><p><img src="/post/31555/image-20220328210229044.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>RTA配置<br>&lt;Huawei&gt;system-view<br><span class="hljs-regexp">//</span>进入aaa<br>[Huawei]AAA<br><span class="hljs-regexp">//</span>配置用户pppau的密码为paptext<br>[Huawei-aaa]local-user pppau password cipher paptext<br><span class="hljs-regexp">//</span>配置用户的服务类型为ppp<br>[Huawei-aaa]local-user pppau service-type ppp<br><span class="hljs-regexp">//</span>进入接口<br>[Huawei]interface Serial <span class="hljs-number">1</span><span class="hljs-regexp">/0/</span><span class="hljs-number">0</span><br><span class="hljs-regexp">//</span>配置端口协议<br>[Huawei-Serial1<span class="hljs-regexp">/0/</span><span class="hljs-number">0</span>]link-protocol ppp <br><span class="hljs-regexp">//</span>配置ppp认证方式和密码<br>[Huawei-Serial1<span class="hljs-regexp">/0/</span><span class="hljs-number">0</span>]ppp authentication-mode pap <br>password simple paptext<br><span class="hljs-regexp">//</span>配置ip地址<br>[Huawei-Serial1<span class="hljs-regexp">/0/</span><span class="hljs-number">0</span>]ip address <span class="hljs-number">10.1</span>.<span class="hljs-number">1.1</span> <span class="hljs-number">30</span><br><br><span class="hljs-regexp">//</span>RTB配置<br>[Huawei]interface Serial <span class="hljs-number">1</span><span class="hljs-regexp">/0/</span><span class="hljs-number">0</span><br><span class="hljs-regexp">//</span>配置协议<br>[Huawei-Serial1<span class="hljs-regexp">/0/</span><span class="hljs-number">0</span>]link-protocol ppp <br><span class="hljs-regexp">//</span>配置用户和密码<br>[Huawei-Serial1<span class="hljs-regexp">/0/</span><span class="hljs-number">0</span>]ppp pap local-user pppau password simple paptext<br><span class="hljs-regexp">//</span>配置ip<br>[Huawei-Serial1<span class="hljs-regexp">/0/</span><span class="hljs-number">0</span>]ip address <span class="hljs-number">10.1</span>.<span class="hljs-number">1.2</span> <span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><h4 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h4><p><img src="/post/31555/image-20220329201208048.png"></p><h3 id="CHAP"><a href="#CHAP" class="headerlink" title="CHAP"></a>CHAP</h3><p>①chap使用3次握手周期性验证对端的身份，这是在链路建立的开始就完成的，在链路建立完成后的任何时间都可以重复发送再验证。<br>②链路阶段建立完成后，认证者发送一个“质询”给被认证者，被认证者通过一次HASH计算（质询+密码）生成的值发送给认证者，认证者把自己hash出来的值与此对比，如果一致，则接受，否则拒接。<br>③两端才知道密码，而且密码不会在链路上传输。</p><p><img src="/post/31555/image-20220328210309572.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>配置用户pppau的密码为chap<br>[Huawei-aaa]local-user pppau password cipher chap<br>Info: Add a new user.<br><span class="hljs-regexp">//</span>配置用户的服务类型为ppp<br>[Huawei-aaa]local-user pppau service-type ppp <br>[Huawei]interface Serial <span class="hljs-number">1</span><span class="hljs-regexp">/0/</span><span class="hljs-number">0</span><br>[Huawei-Serial1<span class="hljs-regexp">/0/</span><span class="hljs-number">0</span>]link-protocol ppp <br>[Huawei-Serial1<span class="hljs-regexp">/0/</span><span class="hljs-number">0</span>]ppp authentication-mode chap <br><span class="hljs-regexp">//</span>配置chap的用户为pppau<br>[Huawei-Serial1<span class="hljs-regexp">/0/</span><span class="hljs-number">0</span>]ppp chap user pppau<br><span class="hljs-regexp">//</span>添加ip<br>[Huawei-Serial1<span class="hljs-regexp">/0/</span><span class="hljs-number">0</span>]ip address <span class="hljs-number">10.1</span>.<span class="hljs-number">1.1</span> <span class="hljs-number">30</span><br><br>RTB配置<br>aaa<br><span class="hljs-regexp">//</span>注意<br> local-user chap password cipher nzNG<span class="hljs-string">&#x27;RXtq&#x27;</span><span class="hljs-number">939</span>O4.`(ZGYrz<span class="hljs-comment">#</span><br> local-user chap service-type ppp<br><span class="hljs-comment">#</span><br>interface Serial0<span class="hljs-regexp">/0/</span><span class="hljs-number">0</span><br> link-protocol ppp<br> ppp chap user chap<br> ip address <span class="hljs-number">12.1</span>.<span class="hljs-number">1.2</span> <span class="hljs-number">255.255</span>.<span class="hljs-number">255.252</span><br><span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><h1 id="帧中继"><a href="#帧中继" class="headerlink" title="帧中继"></a>帧中继</h1><p><a href="https://blog.csdn.net/qq_43482132/article/details/97108002">https://blog.csdn.net/qq_43482132/article/details/97108002</a></p><h1 id="PPPOE"><a href="#PPPOE" class="headerlink" title="PPPOE"></a>PPPOE</h1><p><img src="/post/31555/image-20220329204649123.png"></p><h2 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a>报文格式</h2><p><img src="/post/31555/image-20220329205330630.png"></p><ul><li>以Ethernet格式封装</li></ul><h2 id="会话过程"><a href="#会话过程" class="headerlink" title="会话过程"></a>会话过程</h2><p><img src="/post/31555/image-20220329205429849.png"></p><h2 id="报文类型"><a href="#报文类型" class="headerlink" title="报文类型"></a>报文类型</h2><p><img src="/post/31555/image-20220329205615511.png"></p><h2 id="client配置"><a href="#client配置" class="headerlink" title="client配置"></a>client配置</h2><p><img src="/post/31555/image-20220329205752056.png"></p><p>dialer接口限制断开</p><p><img src="/post/31555/image-20220329205911713.png"></p><h2 id="server配置"><a href="#server配置" class="headerlink" title="server配置"></a>server配置</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk">[Huawei]sysname pppoe server<br><span class="hljs-regexp">//</span>新建ip池<br>[pppoe server]ip pool pppoe<br><span class="hljs-regexp">//</span>配置IP池地址<br>[pppoe server-ip-pool-pppoe]network <span class="hljs-number">10.1</span>.<span class="hljs-number">12.0</span> mask <span class="hljs-number">24</span><br><span class="hljs-regexp">//</span>创建虚拟接口<br>[pppoe server]interface Virtual-Template <span class="hljs-number">1</span><br><span class="hljs-regexp">//</span>配置虚拟接口地址<br>[pppoe server-Virtual-Template1]ip address <span class="hljs-number">10.1</span>.<span class="hljs-number">12.2</span> <span class="hljs-number">24</span><br><span class="hljs-regexp">//</span>配置ppp认证方式<br>[pppoe server-Virtual-Template1]ppp authentication-mode chap <br><span class="hljs-regexp">//</span>配置绑定地址池<br>[pppoe server-Virtual-Template1]remote address pool pppoe<br><span class="hljs-regexp">//</span>进入接口<br>[pppoe server]interface GigabitEthernet <span class="hljs-number">0</span><span class="hljs-regexp">/0/</span><span class="hljs-number">0</span><br><span class="hljs-regexp">//</span>绑定虚拟接口<br>[pppoe server-GigabitEthernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">0</span>]pppoe-server bind virtual-template <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>eNSP的AR路由器启动失败问题</title>
    <link href="/post/24714/"/>
    <url>/post/24714/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>我的系统版本：win11</strong></p><p><strong>ensp版本是 : v100r003c00spc100</strong></p><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p>今天打开电脑出现了ar设备不能启动的问题，具体症状为ar设备启动失败，无限循环#启动中，交换机启动正常。</p><p><img src="/post/24714/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RvdWJsZWRTUw==,size_16,color_FFFFFF,t_70.png"></p><p>随机Search了一下网页，大致解决方案都是防火墙未允许ensp通过，但是我的防火墙是允许了ensp通过的<img src="/post/24714/image-20220329181051666.png" alt="image-20220329181051666"></p><p>于是以为防火墙出问题了，又把防火墙关闭了，依旧重复该问题。</p><p>还有一种方法是在virtualbox全局里的IP地址配置需要正确，我看了一下发现是正确的。<img src="/post/24714/image-20220329181241501.png" alt="image-20220329181241501"></p><p>看到官网要求虚拟机版本要求是5.0~5.2，想着重装一下虚拟机能不能解决（原版本是：5.2.44-139111），</p><p><img src="/post/24714/image-20220328214001943.png">找了几个5.2以下版本均不兼容win11，无奈重新装回原版本，好歹原来还能打开，又打开ensp重新注册设备，无果，又重新注册，这次我注意到一行小字<img src="/post/24714/image-20220329182119817.png"></p><p><strong>删除设备</strong>，可是在哪里删呢？一番查找，我打开了虚拟机。</p><p><img src="/post/24714/image-20220329182241924.png"></p><p>这是已经删除过了的截图，（原来打开会提示有多个虚拟机）原来我重复注册了设备导致了虚拟机冲突，接下来就是解决该问题，右键镜像<img src="/post/24714/image-20220329182706317.png"></p><p>删除所有，或者是释放资源然后进行删除，打开ensp重新注册设备，完美解决！！！</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>po一些相关网页</p><p><a href="https://blog.csdn.net/doubledSS/article/details/104786939">https://blog.csdn.net/doubledSS/article/details/104786939</a></p><p><a href="https://blog.csdn.net/qq_35428201/article/details/90599186">https://blog.csdn.net/qq_35428201/article/details/90599186</a></p><h2 id="防火墙问题"><a href="#防火墙问题" class="headerlink" title="防火墙问题"></a>防火墙问题</h2><p>未允许ensp通过防火墙，在windows防火墙里允许ensp通过或关闭防火墙</p><h2 id="版本问题"><a href="#版本问题" class="headerlink" title="版本问题"></a>版本问题</h2><p>ensp每个版本对虚拟机，nacap、wireshark版本要求都不相同，注意安装对应版本</p><h2 id="设备注册问题"><a href="#设备注册问题" class="headerlink" title="设备注册问题"></a>设备注册问题</h2><p>虚拟机设备被重复注册了，或者对硬盘文件修改导致了出错，请先到virtualbox里释放并删除虚拟机资源再进行重新注册</p>]]></content>
    
    
    <categories>
      
      <category>Soft ware</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Problem</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HCIA速通-网络工程师-6-企业网络架构1</title>
    <link href="/post/43795/"/>
    <url>/post/43795/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>特辑专属BGM-Hacknet原声集</strong></p>    <div id="aplayer-vukMvlnY" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="8058662392" data-server="tencent" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="140px" data-preload="auto" data-theme="#555"></div> <h1 id="链路聚合"><a href="#链路聚合" class="headerlink" title="链路聚合"></a>链路聚合</h1><p>链路聚合 （英语： Link Aggregation ）是一个 计算机网络 术语，指将多个物理端口汇聚在一起，形成一个逻辑端口，以实现出/入流量 吞吐量 在各成员端口的负荷分担，交换机根据用户配置的端口负荷分担策略决定 网络封包 从哪个成员端口发送到对端的交换机。. 当交换机检测到其中一个成员端口的链路发生故障时，就停止在此端口上发送封包，并根据负荷分担策略在剩下的链路中重新计算报文的发送端口，故障端口恢复后再次担任收发端口。. 链路聚合在增加链路带宽、实现链路传输弹性和工程冗余等方面是一项很重要的技术。</p><ul><li><p><strong>链路聚合一般部署在核心节点，以便提升整个网络的数据吞吐量</strong></p></li><li><p><strong>特点：提高链路带宽，增强网络可用性，支持负载分担</strong></p></li><li><p><strong>手工负载分担模式（无协议交互），所以活动接口都参与数据转发，分担负载流量</strong></p></li><li><p><strong>LACP模式支持链路备份</strong></p></li><li><p><strong>ETH-Trunk链路两端相连接口数量、速率、双工方式、流控方式必须一致</strong></p></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="二层"><a href="#二层" class="headerlink" title="二层"></a>二层</h3><figure class="highlight gradle"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs gradle">[Huawei]<span class="hljs-keyword">interface</span> Eth-Trunk <span class="hljs-number">1</span><br>[Huawei]<span class="hljs-keyword">interface</span> GigabitEthernet <span class="hljs-number">0</span><span class="hljs-regexp">/0/</span><span class="hljs-number">1</span><br>[Huawei-GigabitEthernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">1</span>]eth-trunk <span class="hljs-number">1</span><br>[Huawei]<span class="hljs-keyword">interface</span> GigabitEthernet <span class="hljs-number">0</span><span class="hljs-regexp">/0/</span><span class="hljs-number">2</span><br>[Huawei-GigabitEthernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">1</span>]eth-trunk <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>第二种方式</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[Huawei]<span class="hljs-keyword">interface</span> Eth-Trunk <span class="hljs-number">1</span><br>[Huawei-Eth-Trunk1]trunkport GigabitEthernet <span class="hljs-number">0</span><span class="hljs-regexp">/0/</span><span class="hljs-number">1</span><br>[Huawei-Eth-Trunk1]trunkport GigabitEthernet <span class="hljs-number">0</span><span class="hljs-regexp">/0/</span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p><strong>第三种方式</strong>（连续端口）</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[Huawei]<span class="hljs-keyword">interface</span> Eth-Trunk <span class="hljs-number">1</span><br>[Huawei-Eth-Trunk1]trunkport GigabitEthernet <span class="hljs-number">0</span><span class="hljs-regexp">/0/</span><span class="hljs-number">1</span> to <span class="hljs-number">0</span><span class="hljs-regexp">/0/</span><span class="hljs-number">2</span> <br></code></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">[Huawei-GigabitEthernet0/0/2]display interface Eth-Trunk 1<br>Eth-Trunk1 current state : UP<br>Line protocol current state : UP<br>Description:<br>Switch Port, PVID :    1, Hash arithmetic : According to SIP-XOR-DIP,Maximal BW:<br><span class="hljs-code"> 2G, Current BW: 2G, The Maximum Frame Length is 9216</span><br>IP Sending Frames&#x27; Format is PKTFMT_ETHNT_2, Hardware address is 4c1f-cc3b-3c34<br>Current system time: 2022-03-22 22:07:37-08:00<br><span class="hljs-code">    Input bandwidth utilization  :    0%</span><br><span class="hljs-section">    Output bandwidth utilization :    0%</span><br><span class="hljs-section">-----------------------------------------------------</span><br><span class="hljs-section">PortName                      Status      Weight</span><br><span class="hljs-section">-----------------------------------------------------</span><br>GigabitEthernet0/0/1          UP          1<br><span class="hljs-section">GigabitEthernet0/0/2          UP          1</span><br><span class="hljs-section">-----------------------------------------------------</span><br>The Number of Ports in Trunk : 2<br>The Number of UP Ports in Trunk : 2<br></code></pre></td></tr></table></figure><h3 id="三层"><a href="#三层" class="headerlink" title="三层"></a>三层</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">[Huawei]interface Eth-Trunk <span class="hljs-number">1</span><br><span class="hljs-regexp">//</span>创建trunk<br>[Huawei-Eth-Trunk1]undo portswitch<br><span class="hljs-regexp">//</span>将三层接口转换为二层<br>[Huawei-Eth-Trunk1]trunkport GigabitEthernet <span class="hljs-number">0</span><span class="hljs-regexp">/0/</span><span class="hljs-number">0</span> to <span class="hljs-number">0</span><span class="hljs-regexp">/0/</span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="LACP模式"><a href="#LACP模式" class="headerlink" title="LACP模式"></a>LACP模式</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[Huawei]<span class="hljs-keyword">interface</span> Eth-Trunk <span class="hljs-number">1</span><br>[Huawei-Eth-Trunk1]mode lacp-<span class="hljs-keyword">static</span> <br>[Huawei-Eth-Trunk1]trunkport GigabitEthernet <span class="hljs-number">0</span><span class="hljs-regexp">/0/</span><span class="hljs-number">1</span> to <span class="hljs-number">0</span><span class="hljs-regexp">/0/</span><span class="hljs-number">3</span><br><br></code></pre></td></tr></table></figure><h4 id="设置trunk最大转发链路数量"><a href="#设置trunk最大转发链路数量" class="headerlink" title="设置trunk最大转发链路数量"></a><strong>设置trunk最大转发链路数量</strong></h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[Huawei-Eth-Trunk1]</span>max active-linknumber <span class="hljs-number">2</span><br><span class="hljs-comment">//设置为2条链路，unselect端口成为备份，端口down时自动开启</span><br><span class="hljs-string">[Huawei]</span>lacp priority <span class="hljs-number">100</span><br><span class="hljs-comment">//修改lacp优先级</span><br><span class="hljs-string">[Huawei-Eth-Trunk1]</span>lacp preempt enable<br><span class="hljs-comment">//开启抢占</span><br><span class="hljs-string">[Huawei-Eth-Trunk1]</span>lacp preempt delay <span class="hljs-number">10</span><br><span class="hljs-comment">//抢占时延改为10sec</span><br></code></pre></td></tr></table></figure><ul><li><strong>system porosity 和id决定active端</strong></li><li><strong>active端决定转发端口</strong></li></ul><h1 id="VLAN"><a href="#VLAN" class="headerlink" title="VLAN"></a>VLAN</h1><p>VLAN能隔离广播域</p><p>报文格式</p><p><img src="/post/43795/image-20220323001026465.png"></p><p>通过Tag区分不同VLAN</p><p>PVID表示缺省下所属VLAN（1）</p><h2 id="三种端口类型"><a href="#三种端口类型" class="headerlink" title="三种端口类型"></a>三种端口类型</h2><p><strong>Access类型：端口只能属于1个VLAN，一般用于连接计算机；</strong> </p><p><strong>Trunk类型：端口可以属于多个VLAN，可以接收和发送多个VLAN的报文，一般用于交换机之间连接；</strong> </p><p><strong>Hybrid类型：端口可以属于多个VLAN，可以接收和发送多个VLAN的报文，可以用于交换机之间连接，也可以用于连接用户的计算机。</strong></p><p><strong>Hybrid端口可以允许多个VLAN的报文发送时不打标签，而Trunk端口只允许缺省VLAN的报文发送时不打标签。</strong></p><p><strong>三种类型的端口可以共存在一台设备上，但Trunk端口和Hybrid端口之间不能直接切换，只能先设为Access端口，再设置为其他类型端口。例如：Trunk端口不能直接被设置为Hybrid端口，只能先设为Access端口，再设置为Hybrid端口。</strong></p><p><strong>Access端口只能属于1个VLAN，所以它的缺省VLAN就是它所在的VLAN，不用设置；Hybrid端口和Trunk端口可以属于多个VLAN，所以需要设置端口的缺省VLAN ID。</strong></p><h3 id="VLAN-ACCESS端口"><a href="#VLAN-ACCESS端口" class="headerlink" title="VLAN ACCESS端口"></a>VLAN ACCESS端口</h3><p>收：收到一个报文，判断是否有VLAN信息：如果没有则打上端口的PVID，并进行交换转发，如果有则直接丢弃(缺省)</p><p>发：将报文的VLAN信息剥离，直接发送出去</p><h3 id="VLAN-Trunk端口"><a href="#VLAN-Trunk端口" class="headerlink" title="VLAN Trunk端口"></a>VLAN Trunk端口</h3><p>收：收到一个报文，判断是否有VLAN信息：如果没有则打上端口的PVID，并进行交换转发，如果有判断该trunk端口是否允许该VLAN的数据进入：如果可以则转发，否则丢弃</p><p>发：比较端口的PVID和将要发送报文的VLAN信息，如果两者相等则剥离VLAN信息，再发送，如果不相等则直接发送</p><h3 id="VLAN-Hybird端口"><a href="#VLAN-Hybird端口" class="headerlink" title="VLAN Hybird端口"></a>VLAN Hybird端口</h3><p>收：收到一个报文，判断是否有VLAN信息：如果没有则打上端口的PVID，并进行交换转发，如果有则判断该hybrid端口是否允许该VLAN的数据进入：如果可以则转发，否则丢弃(此时端口上的untag配置是不用考虑的，untag配置只对发送报文时起作用)</p><p>发：1，判断该VLAN在本端口的属性(dispinterface即可看到该端口对哪些VLAN是untag，哪些VLAN是tag)</p><p>​        2，如果是untag则剥离VLAN信息，再发送，如果是tag则直接发送</p><h3 id="修改链路类型"><a href="#修改链路类型" class="headerlink" title="修改链路类型"></a>修改链路类型</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">[Huawei-Ethernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">1</span>]port link-type access<span class="hljs-regexp">/trunk/</span>hybird <br></code></pre></td></tr></table></figure><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><p><img src="/post/43795/image-20220323191617001.png"></p><p>设计vlan10 20互不相通</p><p>pc1、3为vlan10</p><p>pc2、4、server为vlan20</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-comment">//配置配置pc1、3为vlan10</span><br>[Huawei]vlan batch <span class="hljs-number">10</span> <span class="hljs-number">20</span><br>[Huawei]<span class="hljs-keyword">interface</span> Ethernet <span class="hljs-number">0</span><span class="hljs-regexp">/0/</span><span class="hljs-number">1</span><br>[Huawei-Ethernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">1</span>]port link-type access <br>[Huawei-Ethernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">1</span>]port de<br>[Huawei-Ethernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">1</span>]port <span class="hljs-keyword">default</span> vlan <span class="hljs-number">10</span><br><br><span class="hljs-comment">//配置pc2、4、server为vlan20</span><br>[Huawei]<span class="hljs-keyword">interface</span> Ethernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">2</span><br>[Huawei-Ethernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">2</span>]port link-type access<br>[Huawei-Ethernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">2</span>]port <span class="hljs-keyword">default</span> vlan <span class="hljs-number">20</span><br><br><span class="hljs-comment">//配置交换机之间的TRUNK和允许通过的vlan</span><br>[Huawei]<span class="hljs-keyword">interface</span> Ethernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">10</span><br>[Huawei-Ethernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">10</span>]port link-type trunk <br>[Huawei-Ethernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">10</span>]port trunk allow-pass vlan <span class="hljs-number">10</span> <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">pc1、<span class="hljs-number">3</span>链路配置（<span class="hljs-number">2</span>、server类似）<br><span class="hljs-regexp">//</span>配置链路类型<br>[Huawei-Ethernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">1</span>]port link-type hybrid <br><span class="hljs-regexp">//</span>配置允许通过hybird时要加上的vlan tag<br>[Huawei-Ethernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">1</span>]port hybrid pvid  vlan <span class="hljs-number">10</span><br>配置允许通过时要去掉的vlan tag<br>[Huawei-Ethernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">1</span>]port hybrid untagged vlan <span class="hljs-number">10</span> <span class="hljs-number">100</span><br><br><br><span class="hljs-regexp">//</span>配置交换机之间<br>[Huawei-Ethernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">10</span>]port link-type hybrid <br>[Huawei-Ethernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">10</span>]port hybrid tagged vlan <span class="hljs-number">10</span> <span class="hljs-number">20</span> <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><h3 id="基于mac地址配置"><a href="#基于mac地址配置" class="headerlink" title="基于mac地址配置"></a>基于mac地址配置</h3><p><img src="/post/43795/image-20220323161837774.png"></p><h3 id="基于网段配置"><a href="#基于网段配置" class="headerlink" title="基于网段配置"></a>基于网段配置</h3><p><img src="/post/43795/image-20220323161918481.png"></p><h3 id="基于协议配置"><a href="#基于协议配置" class="headerlink" title="基于协议配置"></a>基于协议配置</h3><p><img src="/post/43795/image-20220323161951906.png"></p><h3 id="基于策略配置"><a href="#基于策略配置" class="headerlink" title="基于策略配置"></a>基于策略配置</h3><p><img src="/post/43795/image-20220323161959280.png"></p><h3 id="voice-vlan"><a href="#voice-vlan" class="headerlink" title="voice vlan"></a>voice vlan</h3><p><img src="/post/43795/image-20220323202234900.png"></p><h1 id="garp"><a href="#garp" class="headerlink" title="garp"></a>garp</h1><p>GARP（Generic Attribute Registration Protocol）<br>-称是通用属性注册协议<br>-协议主要用于一种属性传递扩散的机制<br>-为处于同一个交换网的交换机提供了一种分发，传播，注册（vlan属性，组播地址等）的手段</p><h2 id="garp报文结构"><a href="#garp报文结构" class="headerlink" title="garp报文结构"></a>garp报文结构</h2><p><img src="/post/43795/image-20220323213808293.png"></p><h2 id="gvrp"><a href="#gvrp" class="headerlink" title="gvrp"></a>gvrp</h2><p>GVRP (Generic VLAN Redistration Protocol）<br>-是GARP的一种高级应用，用于注册和注销VLAN属性<br>-通过GVRP协议，一台设备上的VLAN信息会迅速传播到整个交换网<br>-GVRP实现动态分发，注册和传播VLAN属性，从而达到网络管理员的手工配置量及保证VLAN配置正确的目的。</p><h3 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">//交换机之间链路改为trunk模式</span><br><span class="hljs-selector-attr">[接口]</span><span class="hljs-selector-tag">port</span> <span class="hljs-selector-tag">link-type</span> <span class="hljs-selector-tag">trunk</span><br><span class="hljs-comment">//允许所有vlan通过</span><br><span class="hljs-selector-attr">[接口]</span><span class="hljs-selector-tag">port</span> <span class="hljs-selector-tag">trunk</span> <span class="hljs-selector-tag">allow-pass</span> <span class="hljs-selector-tag">vlan</span> <span class="hljs-keyword">all</span> <br><span class="hljs-comment">//系统下开启gvrp</span><br><span class="hljs-selector-attr">[系统]</span><span class="hljs-selector-tag">gvrp</span><br><span class="hljs-comment">//给接口开启gvrp</span><br><span class="hljs-selector-attr">[接口]</span><span class="hljs-selector-tag">gvrp</span><br></code></pre></td></tr></table></figure><h1 id="VLAN间路由"><a href="#VLAN间路由" class="headerlink" title="VLAN间路由"></a>VLAN间路由</h1><h2 id="单臂路由"><a href="#单臂路由" class="headerlink" title="单臂路由"></a><strong>单臂路由</strong></h2><p><img src="/post/43795/image-20220324001605928.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>配置vlan<br>[Huawei]interface Eth0<span class="hljs-regexp">/0/</span><span class="hljs-number">11</span><br>[Huawei-Ethernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">11</span>]port link-type access <br>[Huawei-Ethernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">11</span>]port default vlan <span class="hljs-number">20</span><br><br><span class="hljs-regexp">//</span>配置交换机间trunk<br>[Huawei]interface Eth0<span class="hljs-regexp">/0/</span><span class="hljs-number">20</span><br>[Huawei-Ethernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">20</span>]port link-type trunk <br>[Huawei-Ethernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">20</span>]port trunk allow-pass vlan <span class="hljs-number">10</span> <span class="hljs-number">20</span><br><br><span class="hljs-regexp">//</span>单臂路由进入子接口配置<br>[Huawei]interface GigabitEthernet <span class="hljs-number">0</span><span class="hljs-regexp">/0/</span><span class="hljs-number">0.10</span><br><span class="hljs-regexp">//</span>配置vid<br>[Huawei-GigabitEthernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">0.10</span>]dot1q termination vid <span class="hljs-number">10</span><br><span class="hljs-regexp">//</span>开启arp广播<br>[Huawei-GigabitEthernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">0.10</span>]arp broadcast enable<br>[Huawei-GigabitEthernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">0.10</span>]ip address <span class="hljs-number">10.1</span>.<span class="hljs-number">1.254</span> <span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><h2 id="三层交换"><a href="#三层交换" class="headerlink" title="三层交换"></a><strong>三层交换</strong></h2><p><img src="/post/43795/image-20220324001829839.png" alt="image-20220324001829839"></p><p><img src="/post/43795/image-20220324001901399.png" alt="image-20220324001901399"></p><h1 id="WLAN"><a href="#WLAN" class="headerlink" title="WLAN"></a>WLAN</h1><p>WLAN是Wireless Local Area Network的简称，指应用无线通信技术将计算机设备互联起来，构成可以互相通信和实现资源共享的网络体系。无线局域网本质的特点是不再使用通信电缆将计算机与网络连接起来，而是通过无线的方式连接，从而使网络的构建和终端的移动更加灵活。</p><h2 id="主要标准"><a href="#主要标准" class="headerlink" title="主要标准"></a>主要标准</h2><p><img src="/post/43795/image-20220328200100916.png"></p>]]></content>
    
    
    <categories>
      
      <category>Network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于高级企业网络的笔记</title>
    <link href="/post/25704/"/>
    <url>/post/25704/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="常见的高级企业网络架构"><a href="#常见的高级企业网络架构" class="headerlink" title="常见的高级企业网络架构"></a>常见的高级企业网络架构</h1><p><img src="/post/25704/image-20220322194626616.png"></p><ul><li>核心层与汇聚层交换机链路聚合，提高容量</li><li>成对机器出现，互作备份</li><li>eSight直连核心层监控整个网络状态</li><li>DMZ同时对内部与外部提供服务</li><li>数据中心交互提供备份</li><li>边缘路由旁路接入防火墙，向外对整个网络提供防护（ddos）</li><li>接入层旁路应接入管理服务，作接入控制，作流量策略过滤</li></ul>]]></content>
    
    
    <categories>
      
      <category>Network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HCIA速通-网络工程师-5-传输协议（SSH部分转载）</title>
    <link href="/post/47492/"/>
    <url>/post/47492/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>特辑专属BGM-Hacknet原声集</strong></p>    <div id="aplayer-iSDErdxt" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="8058662392" data-server="tencent" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="140px" data-preload="auto" data-theme="#555"></div> <h1 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h1><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>FTP文件传输协议（File Transfer Protocol），用于Internet上的<strong>控制文件的双向传输</strong>，是一个应用程序。<strong>工作在TCP/IP协议族的应用层，其传输层协议是TCP协议，目的在于提高文件传输的共享性和可靠性，是基于客户/服务器模式工作的。</strong></p><p>1.启动FTP<br>客户通过FTP客户端软件，发起FTP交互式命令，告诉服务器，服务器上的FTP服务会接收到这个命令，并解析发来命令，然后发出回复信息，客户端对服务器说：“我想和你聊会天，可以吗？”</p><p>2.建立控制连接<br>客户端TCP层会根据服务器的IP地址，向服务器提供FTP服务的21端口发出主动建立连接的请求，服务器接收到请求后，经过三次握手，客户端与服务器端就建立了一个TCP连接，就好比是我们在A地和B地之间传输货物，首先应该建立一条运送货物的通道。这个TCP连接称为控制连接，用户发出的FTP命令和服务器的回应都是依靠该连接来传送的，在用户退出前一直存在。</p><p>3.建立数据连接，并进行文件传输<br>到目前为止，客户端和服务器端已经建立了聊天的通道，聊天过程中，对方觉得很投机，想互赠礼物（将客户端和服务器端进行文件的传输比喻为互赠礼物）怎么办，这个时候我们就需要一条通道来进行礼物的传输（将数据连接比喻为数据连接），那么是如何赠送礼物的？<br>（1）客户端通过控制连接发送一个上传文件的命令，会自己分配一个临时的TCP端口号。<br>（2）客户端通过控制连接向服务器发送一个命令告诉服务器自己的IP地址和临时端口号，然后发送一条上传文件的命令。（就好客户端要赠送礼物给服务器时，不只发送一个送礼物的命令，在这之前还要发送一条自我介绍的命令，即IP地址和端口号，来告诉服务器和他聊天的是哪一个客户）<br>（3）服务器接收到客户端的IP地址和临时端口号后，以这个IP地址和端口号为目标，使用服务器上的20端口（数据端口），向客户端发出主动建立连接的请求。<br>（4）客户端收到请求后，通过三次握手后就与服务器之间建立了另外一条TCP连接数据连接（好比礼物传输的通道）。<br>（5）客户端在自己的文件系统中选择要上传（赠送礼物）的文件。<br>（6）客户端将文件写入到文件传输的进程中（即网络流中）。<br>（7）文件传输完成后，由服务器主动关闭该数据的连接。</p><p>4.关闭FTP<br>当用户退出FTP时，客户端发送退出命令，之后控制连接被关闭，FTP服务结束。</p><h3 id="主动模式"><a href="#主动模式" class="headerlink" title="主动模式"></a>主动模式</h3><p>FTP客户端从任意的非特殊的端口（N &gt; 1023）连入到FTP服务器的命令端口–21端口。然后客户端在N+1（N+1 &gt;= 1024）端口监听，并且通过N+1（N+1 &gt;= 1024）端口发送命令给FTP服务器。服务器会反过来连接用户本地指定的数据端口，比如20端口。</p><p>主动模式的FTP的 主要问题实际上落在客户端。FTP 的客户端并不会主动连接到服务器的数据端口，而是是告诉服务器它正在监听哪个端口，然后服务器发起连接到客户端上指定的端口。但是，<strong>这样的连接有时候会被客户端的防火墙阻止</strong>。</p><h3 id="被动模式"><a href="#被动模式" class="headerlink" title="被动模式"></a>被动模式</h3><p>为了解决服务器主动发起到客户端连接会被阻止的问题，另一种更完善的工作模式出现了，它就是 FTP 的被动模式，缩写作 PASV，它工作的前提是客户端明确告知 FTP 服务器它使用被动模式。</p><p>在被动模式的 FTP 中，客户端启动到服务器的两个连接，<strong>解决了防火墙阻止从服务器到客户端的传入数据端口连接的问题</strong>。FTP 连接建立后，客户端在本地打开两个随机的非系统端口 N 和 N + 1(N &gt; 1023)。第一个端口连接服务器上的 21 端口，但是客户端这次将会发出 PASV 命令，也就是不允许服务器连接回其数据端口。这样，服务器随后会打开一个随机的非系统端口 P (P &gt; 1023)，并将 P 发送给客户端作为 PASV 命令的响应。然后客户端启动从端口 N+1 到端口 P 的连接来传输数据。</p><h3 id="FTP传输模式"><a href="#FTP传输模式" class="headerlink" title="FTP传输模式"></a>FTP传输模式</h3><p> <img src="/post/47492/1.png"></p><h2 id="路由配置FTP"><a href="#路由配置FTP" class="headerlink" title="路由配置FTP"></a>路由配置FTP</h2><p><img src="/post/47492/image-20220321231545254.png"></p><p><strong>配置用户名密码，服务类型 ftp目录 级别</strong></p><p><img src="/post/47492/image-20220321233151618.png"></p><h3 id="FTP-Client"><a href="#FTP-Client" class="headerlink" title="FTP Client"></a>FTP Client</h3><p><img src="/post/47492/image-20220321233319182.png"></p><h1 id="Telnet"><a href="#Telnet" class="headerlink" title="Telnet"></a>Telnet</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="Password认证"><a href="#Password认证" class="headerlink" title="Password认证"></a>Password认证</h3><p><img src="/post/47492/image-20220321233802137.png"></p><p><strong>CLlient</strong></p><p><img src="/post/47492/image-20220321234243833.png"></p><h3 id="AAA认证"><a href="#AAA认证" class="headerlink" title="AAA认证"></a>AAA认证</h3><figure class="highlight less"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-attr">[Huawei]</span><span class="hljs-selector-tag">user-interface</span> <span class="hljs-selector-tag">vty</span> <span class="hljs-number">0</span> <span class="hljs-number">4</span><br><span class="hljs-selector-attr">[Huawei-ui-vty0-4]</span><span class="hljs-selector-tag">authentication-mode</span> <span class="hljs-selector-tag">aaa</span><br><span class="hljs-selector-attr">[HUAWEI-ui-vty0-4]</span> <span class="hljs-selector-tag">protocol</span> <span class="hljs-selector-tag">inbound</span> <span class="hljs-selector-tag">telnet</span>  <span class="hljs-comment">//配置VTY用户界面支持的协议为Telnet</span><br></code></pre></td></tr></table></figure><p><strong>创建用户</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[HUAWEI] aaa<br>[HUAWEI-aaa] local-<span class="hljs-keyword">user</span> <span class="hljs-title">user1</span> password cipher Huawei@<span class="hljs-number">1234</span>  //创建本地用户user1并配置密码<br>[HUAWEI-aaa] local-<span class="hljs-keyword">user</span> <span class="hljs-title">user1</span> service-<span class="hljs-keyword">type</span> telnet  //配置本地用户user1的接入类型为Telnet，该用户只能使用Telnet方式登录<br>[HUAWEI-aaa] local-<span class="hljs-keyword">user</span> <span class="hljs-title">user1</span> privilege level <span class="hljs-number">15</span>  //配置本地用户user1的用户级别为<span class="hljs-number">15</span>，该用户登录后可以执行<span class="hljs-number">0</span>~<span class="hljs-number">15</span>级的命令<br>[HUAWEI-aaa] quit<br></code></pre></td></tr></table></figure><h1 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h1><p>下文转载自：<a href="https://www.cnblogs.com/nadr/p/15129704.html">https://www.cnblogs.com/nadr/p/15129704.html</a></p><p>(1).添加Router（需要有 GigabitEthernet接口）和一个Cloud，使用eNSP模拟器中的云端口与真机中虚拟出的loopback适配器端口映射，实现真机与模拟器环境的互通，以便使用终端仿真软件来实现ssh登录。云端口配置如下:</p><p><img src="/post/47492/2476630-20210811200928875-1161305719-16478797968501.png"> <img src="/post/47492/2476630-20210811200752582-191947297-16478797968522.png"></p><p>(2).在路由器和Cloud之间添加连线，并为路由器接口配置IP地址，。测一下与真机连通性。</p><p>启动路由器并配置IP地址：</p><p><img src="/post/47492/2476630-20210811200608528-804967546-16478797968523.png"></p><p>（3）启动stelnet服务功能  # stelnet server enable</p><p><img src="/post/47492/2476630-20210811201843280-1065177071-16478797968524.png"></p><p>（4）进行虚拟终端配置界面   #user-interface vty 0 4</p><p>  配置认证方式为密码认证   #authentication-mode aaa  </p><p>指定VTY用户界面所支持的协议有三个，参数分别为ssh（只支持SSH协议）、telnet（只支持telnet协议）和all（支持所有协议，包括SSH和Telnet）    #protocol inbound ssh</p><p><img src="/post/47492/2476630-20210811202148391-878718523-16478797968535.png"></p><p>（5）进入aaa认证配置界面    #aaa</p><p>配置允许登录的用户名user，密码为密文形式的******    #local-user user  password cipher ******</p><p><img src="/post/47492/2476630-20210811202830348-1284207099-16478797968536.png"></p><p>（6）配置用户user的级别    #local-user user privilege level 15</p><p>配置用户user的服务类型为ssh  #local-user user service-type ssh</p><p>用来配置SSH用户缺省采用密码认证，华为说明手册中说该项属于缺省设置，但在实验过程中发现路由器是缺省设置的，交换机需要手动配置一下，有待进一步核实  #ssh user user authentication-type  password</p><p><img src="/post/47492/2476630-20210811203048083-845226869-16478797968537.png"></p><p>（7）生成本地RSA密钥对  # rsa local-key-pair create   #回车确认使用默认值</p><p><img src="/post/47492/2476630-20210811202726461-1315250761-16478797968548.png"></p><p>2.结果验证</p><p>  使用Xshell终端软件登录</p><p>启用终端仿真软件，新建会话，输入名称（IP地址），点击“链接”按钮，在弹出的安全提示对话框中，点击“接受并保存”：</p><p><img src="/post/47492/2476630-20210811203902868-175093019-16478797968549.png"><img src="/post/47492/2476630-20210811204045892-1884126878-164787979685410.png"></p><p> 输入用户名点击确定，继续输入密码点击确定：</p><p><img src="/post/47492/2476630-20210811204214100-895046390-164787979685511.png"></p><p><img src="/post/47492/2476630-20210811204346486-1108632714-164787979685512.png"></p><p>链接成功。</p><p> <img src="/post/47492/2476630-20210811204458820-1165789342-164787979685613.png"></p>]]></content>
    
    
    <categories>
      
      <category>Network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HCIA速通-网络工程师 -4-路由协议</title>
    <link href="/post/27144/"/>
    <url>/post/27144/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>特辑专属BGM-Hacknet原声集</strong></p>    <div id="aplayer-kYUiXkBP" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="8058662392" data-server="tencent" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="140px" data-preload="auto" data-theme="#555"></div> <h1 id="AS"><a href="#AS" class="headerlink" title="AS"></a>AS</h1><p><img src="/post/27144/image-20220319150804198.png"></p><p><strong>路由器-路由表</strong></p><p><strong>交换机-CAM表</strong></p><p><strong>路由选路-最长掩码匹配—》路由优先级—》开销Cost（相同时等价路由）</strong></p><h2 id="IP路由表"><a href="#IP路由表" class="headerlink" title="IP路由表"></a>IP路由表</h2><p><img src="/post/27144/image-20220319154858001.png"></p><ul><li><strong>路由表中包含了路由可达的目的网络，目的网络在路由表中不存在的数据包会被丢弃</strong></li></ul><h2 id="路由优先级"><a href="#路由优先级" class="headerlink" title="路由优先级"></a>路由优先级</h2><table><thead><tr><th>路由类型</th><th>Direct</th><th>OSPF</th><th>Static</th><th>RIP</th></tr></thead><tbody><tr><td>优先级</td><td>0</td><td>10</td><td>60</td><td>100</td></tr></tbody></table><h1 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由"></a>静态路由</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><strong>目的网段地址 掩码 出口 下一跳地址</strong></p><p><img src="/post/27144/image-20220319161508814.png"></p><figure class="highlight gradle"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-comment">//三种配置方式</span><br>[RTB]ip route-<span class="hljs-keyword">static</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">1.0</span> <span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span> <span class="hljs-number">10.0</span>.<span class="hljs-number">12.1</span><br>[RTB]ip route-<span class="hljs-keyword">static</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">1.0</span> <span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span> Serial <span class="hljs-number">1</span><span class="hljs-regexp">/0/</span><span class="hljs-number">0</span><br>[RTB]ip route-<span class="hljs-keyword">static</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">1.0</span> <span class="hljs-number">24</span> Serial <span class="hljs-number">1</span><span class="hljs-regexp">/0/</span><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="路由备份"><a href="#路由备份" class="headerlink" title="路由备份"></a>路由备份</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">IP route-<span class="hljs-keyword">static</span> 网段 掩码 出口 下一跳nexthop preference 优先级数值 <br></code></pre></td></tr></table></figure><h2 id="缺省路由"><a href="#缺省路由" class="headerlink" title="缺省路由"></a>缺省路由</h2><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">[RTB]ip route-static <span class="hljs-number">0.0.0。0</span> <span class="hljs-number">0.0.0.0</span> <span class="hljs-number">10.0.12.2</span><br>[RTB]ip route-static <span class="hljs-number">0.0.0。0</span> <span class="hljs-number">0.0.0.0</span> <span class="hljs-number">10.0.12.2</span> g <span class="hljs-number">0</span>/<span class="hljs-number">0</span>/<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ul><li><strong>缺省路由时目的地址和掩码为0的特殊路由</strong></li><li><strong>如果报文目的地址无法匹配路由表任何一项，路由会按照缺省路由来转发报文</strong></li></ul><h1 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h1><p><strong>动态学习建立路由表，能够根据网络变化做出调整</strong></p><p><img src="/post/27144/image-20220320173700046.png"></p><p><strong>路由选择算法步骤</strong></p><ul><li><strong>向其他路由宣告路由信息</strong>（会在路由信息里加上通过自己路由的跳数开销）</li><li><strong>接受其它路由器的路由信息</strong></li><li><strong>根据收到的路由信息计算目的网络最优路径</strong></li><li><strong>对网络拓扑变化实时反应，生成新的路由表并把拓扑变化信息向其他路由宣告</strong></li></ul><p><strong>网络收敛完成后每个路由都会有一张完整路由表</strong></p><h2 id="RIP协议"><a href="#RIP协议" class="headerlink" title="RIP协议"></a>RIP协议</h2><p><strong>适用于小型网络</strong></p><p><img src="/post/27144/image-20220320173136839.png"></p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ul><li>路由运行rip后，首先发送路由更新请求，收到请求的路由会发送自己的rip路由进行响应</li><li>稳定后，路由会周期发送路由更新信息</li><li>路由老化时间：180 sec</li><li>路由更新时间：30 sec</li><li>rip通过跳数作为度量值衡量到达目的地址距离</li><li>缺省下，直连网络跳数为0，当发送路由会把度量值加1，超过15跳不可达</li></ul><h3 id="rip版本区别"><a href="#rip版本区别" class="headerlink" title="rip版本区别"></a>rip版本区别</h3><p><img src="/post/27144/image-20220320201340433.png"></p><p><strong>通过udp端口520发送报文</strong></p><h4 id="v1版本报文格式"><a href="#v1版本报文格式" class="headerlink" title="v1版本报文格式"></a>v1版本报文格式</h4><p><img src="/post/27144/image-20220320202014740.png"></p><h4 id="v2报文格式"><a href="#v2报文格式" class="headerlink" title="v2报文格式"></a>v2报文格式</h4><p><img src="/post/27144/image-20220320202229873.png"></p><h4 id="rip环路问题"><a href="#rip环路问题" class="headerlink" title="rip环路问题"></a>rip环路问题</h4><p><img src="/post/27144/image-20220320202859823.png"></p><p>当B通往10.0.0.0的链路出现问题，而又为及时通报给A路由时，此时接收到A路由通往该地址的路由信息时会把A的地址当成通往10.0.0.0的地址，从而在A和B之间形成环路</p><h5 id="避免出现环路的机制"><a href="#避免出现环路的机制" class="headerlink" title="避免出现环路的机制"></a>避免出现环路的机制</h5><p><strong>水平分割</strong></p><p>路由从某接口学到的路由，不会从该接口再发回邻居路由</p><p><strong>毒性反转</strong></p><p>路由从某接口学到的路由，会将该路由跳数设置为16，并从该接口再发回邻居路由</p><p><strong>触发更新</strong>（路由毒化）</p><p>当路由信息发生变化时，立即向邻居设备发送触发更新报文（变成16跳）</p><h4 id="RIP定时器"><a href="#RIP定时器" class="headerlink" title="RIP定时器"></a>RIP定时器</h4><p><img src="/post/27144/image-20220320204821984.png"></p><hr><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[RTA]</span>rip<br><span class="hljs-string">[RTA-rip-1]</span>version <span class="hljs-number">2</span><br><span class="hljs-string">[RTA-rip-1]</span>network <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure><hr><h4 id="metricin"><a href="#metricin" class="headerlink" title="metricin"></a>metricin</h4><p><img src="/post/27144/image-20220320213326023.png"></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[Huawei]<span class="hljs-keyword">interface</span> GigabitEthernet <span class="hljs-number">0</span><span class="hljs-regexp">/0/</span><span class="hljs-number">0</span><br>[Huawei-GigabitEthernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">0</span>]rip metricin <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h4 id="metricout"><a href="#metricout" class="headerlink" title="metricout"></a>metricout</h4><p><img src="/post/27144/image-20220320213425454.png"></p><hr><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[Huawei]<span class="hljs-keyword">interface</span> GigabitEthernet <span class="hljs-number">0</span><span class="hljs-regexp">/0/</span><span class="hljs-number">0</span><br>[Huawei-GigabitEthernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">0</span>]rip metricout <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h4 id="水平分割-amp-毒性逆转"><a href="#水平分割-amp-毒性逆转" class="headerlink" title="水平分割&amp;毒性逆转"></a>水平分割&amp;毒性逆转</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[Huawei]<span class="hljs-keyword">interface</span> GigabitEthernet <span class="hljs-number">0</span><span class="hljs-regexp">/0/</span><span class="hljs-number">0</span><br>[Huawei-GigabitEthernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">0</span>]rip split-horizon <br>[Huawei-GigabitEthernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">0</span>]rip poison-<span class="hljs-keyword">reverse</span> <br></code></pre></td></tr></table></figure><ul><li><strong>两个特性同时配置时，只有rip poison-reverse会生效</strong></li></ul><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[Huawei]</span>display rip <span class="hljs-number">1</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">GigabitEthernet</span> <span class="hljs-symbol">0</span>/<span class="hljs-symbol">0</span>/<span class="hljs-symbol">0</span> <span class="hljs-symbol">verbose</span> <br></code></pre></td></tr></table></figure><h4 id="output"><a href="#output" class="headerlink" title="output"></a>output</h4><p><img src="/post/27144/image-20220320213732214.png"></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[Huawei]<span class="hljs-keyword">interface</span> GigabitEthernet <span class="hljs-number">0</span><span class="hljs-regexp">/0/</span><span class="hljs-number">0</span><br>[Huawei-GigabitEthernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">0</span>]undo rip output<br></code></pre></td></tr></table></figure><p><strong>即在配置接口不再发送rip报文</strong></p><hr><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[Huawei]<span class="hljs-keyword">interface</span> GigabitEthernet <span class="hljs-number">0</span><span class="hljs-regexp">/0/</span><span class="hljs-number">0</span><br>[Huawei-GigabitEthernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">0</span>]undo rip input<br></code></pre></td></tr></table></figure><p><strong>即在配置接口不再接收rip报文</strong></p><hr><h4 id="抑制接口"><a href="#抑制接口" class="headerlink" title="抑制接口"></a>抑制接口</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[Huawei]</span>rip<br><span class="hljs-string">[Huawei-rip-1]</span>silent-<span class="hljs-keyword">interface</span> <span class="hljs-symbol">GigabitEthernet</span> <span class="hljs-symbol">0</span>/<span class="hljs-symbol">0</span>/<span class="hljs-symbol">0</span><br></code></pre></td></tr></table></figure><ul><li><strong>配置接口为抑制状态，只接收rip报文</strong></li><li><strong>优先级大于rip output和rip input</strong></li></ul><hr><h4 id="RIP路由汇总"><a href="#RIP路由汇总" class="headerlink" title="RIP路由汇总"></a>RIP路由汇总</h4><p><strong>默认时在有类网络的边界自动汇总，但可以关闭汇总。</strong></p><p><strong>undo summary关闭汇总。</strong></p><p><strong>如果接口启用水平分割、毒性发转，则不进行汇总，除非使用 “summary always”命令。</strong></p><hr><h2 id="OSPF"><a href="#OSPF" class="headerlink" title="OSPF"></a>OSPF</h2><p><img src="/post/27144/image-20220321132721427.png"></p><p><strong>特点</strong></p><ul><li>无环路–》SPF算法</li><li>收敛快</li><li>扩展性好</li><li>支持认证</li></ul><h3 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h3><p>OSPF组播的方式在所有开启OSPF的接口发送Hello包，用来确定是否有OSPF邻居，若发现了，则建立OSPF邻居关系，形成邻居表，之后互相发送LSA（链路状态通告）相互通告路由，形成LSDB（链路状态数据库）。再通过SPF算法，计算最佳路径（cost最小）后放入路由表。</p><h3 id="报文"><a href="#报文" class="headerlink" title="报文"></a>报文</h3><p><img src="/post/27144/image-20220321133849550.png"></p><h4 id="Hello报文信息"><a href="#Hello报文信息" class="headerlink" title="Hello报文信息"></a>Hello报文信息</h4><p><img src="/post/27144/image-20220321134745984.png"></p><ul><li>用来发现和维持OSPF邻居关系</li></ul><h3 id="邻居状态变迁"><a href="#邻居状态变迁" class="headerlink" title="邻居状态变迁"></a>邻居状态变迁</h3><p><img src="/post/27144/image-20220321134714147.png"></p><p>数据库同步过程</p><p><img src="/post/27144/image-20220321135120386.png"></p><ul><li><strong>路由使用DD报文进行主从路由的选举和数据库摘要信息交互</strong></li><li><strong>DD报文包含LSA的头部信息，用来描述LSDB的摘要信息</strong></li></ul><p>邻居关系的建立</p><p><img src="/post/27144/image-20220321135151490.png"></p><p><img src="/post/27144/image-20220321135203175.png"></p><h3 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">ospf process id<span class="hljs-regexp">//</span>进程id，不指定默认为<span class="hljs-number">1</span> router id 网络地址<span class="hljs-regexp">//</span>指定的id不具有实际意义只用来区分，也可不加，不指定则自动指定一个物理接口地址<br>area 数值<span class="hljs-regexp">//</span>指定区域<br>network 直连区域网段 反掩码<br></code></pre></td></tr></table></figure><h4 id="重置router-id"><a href="#重置router-id" class="headerlink" title="重置router id"></a>重置router id</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">reset ospf process （重置进程即可）<br></code></pre></td></tr></table></figure><h4 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">display ospf peer<br></code></pre></td></tr></table></figure><h4 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h4><p>ospf支持两种认证配置方式，分别为区域认证和链路认证。<br> （1）区域认证：同意区域内的认证模式和口令必须一致<br> （2）链路认证：链路认证相对于区域认证更加灵活，可针对某个单独的链路进行设置单独的认证模式和密码。</p><h5 id="接口认证"><a href="#接口认证" class="headerlink" title="接口认证"></a>接口认证</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//m</span>d5验证<br>[Huawei]interface GigabitEthernet <span class="hljs-number">0</span><span class="hljs-regexp">/0/</span><span class="hljs-number">0</span><br>[Huawei-GigabitEthernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">0</span>]ospf authentication-mode md5 <span class="hljs-number">1</span> huawei<br><span class="hljs-regexp">//</span>选项<br>  INTEGER&lt;<span class="hljs-number">1</span>-<span class="hljs-number">255</span>&gt;  Key ID<br><br><span class="hljs-regexp">//</span>简单认证<br>[Huawei]interface GigabitEthernet <span class="hljs-number">0</span><span class="hljs-regexp">/0/</span><span class="hljs-number">0</span><br>[Huawei-GigabitEthernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">0</span>]ospf authentication-mode simple <span class="hljs-number">1</span> huawei<br><span class="hljs-regexp">//</span>选项<br>  cipher            Encryption type (Cryptogram)<br>  plain             Encryption type (Plain text)<br></code></pre></td></tr></table></figure><h5 id="区域认证"><a href="#区域认证" class="headerlink" title="区域认证"></a>区域认证</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>区域明文认证<br>R1：ospf <span class="hljs-number">1</span><br>R1：area <span class="hljs-number">1</span><br>R1：authentication-mode simple huawei1<br><span class="hljs-regexp">//</span>选项<br>  cipher            Encryption type (Cryptogram)<br>  plain             Encryption type (Plain text)<br><br><span class="hljs-regexp">//</span>区域md5验证<br>R2：ospf <span class="hljs-number">1</span><br>R2：area <span class="hljs-number">0</span><br>R2：authentication-mode md5 <span class="hljs-number">1</span> huawei3<br><span class="hljs-regexp">//</span>选项<br>  INTEGER&lt;<span class="hljs-number">1</span>-<span class="hljs-number">255</span>&gt;  Key ID<br><br></code></pre></td></tr></table></figure><hr><h2 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h2><p><img src="/post/27144/image-20220321193204329.png"></p><h3 id="报文-1"><a href="#报文-1" class="headerlink" title="报文"></a>报文</h3><p><img src="/post/27144/image-20220321193409050.png"></p><h3 id="工作原理-2"><a href="#工作原理-2" class="headerlink" title="工作原理"></a>工作原理</h3><p><img src="/post/27144/686769-20161019110002810-907858031.png"></p><p>租约50%续租 87.5重绑定 租期24hour</p><h3 id="配置-3"><a href="#配置-3" class="headerlink" title="配置"></a>配置</h3><h4 id="接口地址池"><a href="#接口地址池" class="headerlink" title="接口地址池"></a>接口地址池</h4><p><img src="/post/27144/image-20220321210328933.png"></p><h4 id="验证地址池"><a href="#验证地址池" class="headerlink" title="验证地址池"></a>验证地址池</h4><p><img src="/post/27144/image-20220321212059880.png"></p><h4 id="全局地址池"><a href="#全局地址池" class="headerlink" title="全局地址池"></a>全局地址池</h4><p><img src="/post/27144/image-20220321212128088.png"></p>]]></content>
    
    
    <categories>
      
      <category>Network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HCIA速通-网络工程师 -3-生成树协议</title>
    <link href="/post/27054/"/>
    <url>/post/27054/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>特辑专属BGM-Hacknet原声集</strong></p>    <div id="aplayer-CdNPIZUh" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="8058662392" data-server="tencent" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="140px" data-preload="auto" data-theme="#555"></div> <h1 id="生成树"><a href="#生成树" class="headerlink" title="生成树"></a>生成树</h1><h2 id="STP生成树协议"><a href="#STP生成树协议" class="headerlink" title="STP生成树协议"></a>STP生成树协议</h2><p><img src="/post/27054/image-20220315225145172.png"></p><p><strong>根桥：</strong>在以太网络中，以某台交换机的某个端口为根的生成。此端口为</p><p>此外其他交换机为非根</p><ul><li><p>消除环路：通过阻断冗余链路来消除网络中可能存在的环路。</p></li><li><p>链路备份：当活动路径发生故障时， 激活备份链路， 及时恢复网络连通性。</p></li><li><p>选举根端口</p></li><li><p>阻塞非根端口</p></li><li><p><strong>非根交换机在选举端口时分别根据该端口的根路径开销、对端BID、对端PID和本端PID选择</strong></p></li><li><p>一个周期内的状态变迁时间为15秒</p></li></ul><h4 id="根桥选举过程"><a href="#根桥选举过程" class="headerlink" title="根桥选举过程"></a><strong>根桥选举过程</strong></h4><ol><li><strong>首先对比桥优先级，桥优先级最高（数值最小的）的设备会被选举为根桥。</strong></li><li><strong>如果桥优先级相同，则会比较MAC地址，MAC地址越小则越优先。</strong></li></ol><h4 id="根端口选举"><a href="#根端口选举" class="headerlink" title="根端口选举"></a><strong>根端口选举</strong></h4><ul><li><strong>非根交换机在选举根端口时依据的先后顺序为该端口的根路径开销、对端BID（Bridge ID）、对端PID（Port ID）和本端PID。</strong></li></ul><h3 id="STP端口角色"><a href="#STP端口角色" class="headerlink" title="STP端口角色"></a>STP端口角色</h3><p>STP中定义了三种端口角色：指定端口，根端口和预备端口。</p><p>指定端口（<strong>Design</strong>）：是交换机向所连网段转发配置BPDU的端口，每个网段有且只能有一个指定端口。一般情况下，根桥的每个端口总是指定端口。</p><p>根端口（<strong>Root</strong>）：是非根交换机去往根桥路径最优的端口。在一个运行STP协议的交换机上最多只有一个根端口，但根桥上没有根端口。</p><p>预备端口（<strong>Alternate</strong>）：如果一个端口既不是指定端口也不是根端口，则此端口为预备端口。预备端口将被阻塞。</p><p><strong>Tips</strong>：一台交换机有且仅有一个根端口（根桥除外），一条链路有且仅有一个指定端口。</p><h3 id="STP端口状态"><a href="#STP端口状态" class="headerlink" title="STP端口状态"></a>STP端口状态</h3><p><strong>Blocking</strong>（阻塞状态）：二层端口为非指定端口，也不会参与数据帧的转发。</p><p><strong>Listening</strong>（侦听状态）：生成树会根据交换机所接收到的BPDU而判断出了这个端口应该参与数据帧的转发。</p><p><strong>Learning</strong> (学习状态)：这个二层端口准备参与数据帧的转发，并开始填写MAC表。在默认情况下，端口会在这种状态下停留15秒钟时间。</p><p><strong>Forwarding</strong>（转发状态）：这个二层端口已经成为了活动拓扑的一个组成部分，它会转发数据帧，并同时收发BPDU。</p><p><strong>Disabled</strong>（禁用状态）：这个二层端口不会参与生成树，也不会转发数据帧。</p><p><img src="/post/27054/1.png"></p><h3 id="Bridge-Protocol-Data-Unit"><a href="#Bridge-Protocol-Data-Unit" class="headerlink" title="Bridge Protocol Data Unit"></a>Bridge Protocol Data Unit</h3><p><img src="/post/27054/image-20220317164521244.png"></p><ul><li>BPDU保护桥ID、路径开销、端口ID、计时器等参数</li><li>stp稳定状态下只由根端口发送bpdu</li><li>在初始状态下个交换机端口都发送bpdu信息以决定端口状态来选择指定端口</li></ul><p>标准生成树的bpdu参数</p><p><img src="/post/27054/image-20220317165213964.png"></p><p>message age&amp;&amp;max age:    20 sec</p><p>hello time ：2 sec</p><h3 id="STP拓扑变化处理过程"><a href="#STP拓扑变化处理过程" class="headerlink" title="STP拓扑变化处理过程"></a>STP拓扑变化处理过程</h3><p><img src="/post/27054/222651z27vmmc4g2vmiow2.png"></p><ol><li>T点接口发生变更后，下游设备会不间断地向上游设备发送TCN BPDU报文。</li><li>上游设备收到下游设备发来的TCN BPDU报文后，只有指定端口处理TCN BPDU报文。其它端口也有可能收到TCN BPDU报文，但不会处理。</li><li>上游设备会把配置BPDU报文中的Flags的TCA位设置1，然后发送给下游设备，告知下游设备停止发送TCN BPDU报文。</li><li>上游设备复制一份TCN BPDU报文，向根桥方向发送。</li><li>重复步骤1、2、3、4，直到根桥收到TCN BPDU报文。</li><li>根桥把配置BPDU报文中的Flags的TC位置1后发送，通知下游设备直接删除桥MAC地址表项。</li></ol><h3 id="STP配置"><a href="#STP配置" class="headerlink" title="STP配置"></a>STP配置</h3><figure class="highlight dos"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs dos">[Huawei]stp <span class="hljs-built_in">mode</span> ?<br>  mstp  Multiple Spanning <span class="hljs-built_in">Tree</span> Protocol (MSTP) <span class="hljs-built_in">mode</span><br>  rstp  Rapid Spanning <span class="hljs-built_in">Tree</span> Protocol (RSTP) <span class="hljs-built_in">mode</span><br>  stp   Spanning <span class="hljs-built_in">Tree</span> Protocol (STP) <span class="hljs-built_in">mode</span><br>[Huawei]stp <span class="hljs-built_in">mode</span> stp<br></code></pre></td></tr></table></figure><h4 id="配置交换机优先级"><a href="#配置交换机优先级" class="headerlink" title="配置交换机优先级"></a>配置交换机优先级</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[Huawei]</span>stp priority <span class="hljs-number">4096</span><br></code></pre></td></tr></table></figure><h4 id="配置交换机路径开销"><a href="#配置交换机路径开销" class="headerlink" title="配置交换机路径开销"></a>配置交换机路径开销</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[Huawei]stp pathcost-standard ?<br>  dot1d-<span class="hljs-number">1998</span>  IEEE <span class="hljs-number">802.1</span>D-<span class="hljs-number">1998</span><br>  dot1t       IEEE <span class="hljs-number">802.1</span>T<br>  legacy      Legacy<br>[Huawei]<span class="hljs-keyword">interface</span> GigabitEthernet <span class="hljs-number">0</span><span class="hljs-regexp">/0/</span><span class="hljs-number">0</span><br>[Huawei-GigabitEthernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">0</span>]stp cost <span class="hljs-number">2000</span><br></code></pre></td></tr></table></figure><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[Huawei]</span><span class="hljs-attribute">display</span> stp<br><br></code></pre></td></tr></table></figure><hr><h2 id="RSTP快速生成树"><a href="#RSTP快速生成树" class="headerlink" title="RSTP快速生成树"></a>RSTP快速生成树</h2><p><img src="/post/27054/image-20220317184751227.png"></p><ul><li>网络拓扑快速收敛</li></ul><p><strong>RSTP相对于标准STP增加了Backup端口和边缘端口</strong></p><ul><li>Backup：作为指定端口的备份端口，提供另外一条从根桥到非根桥的备份链路</li><li>边缘端口Edge port：不接收处理BPDU、不参与RSTP运算<ul><li>边缘端口在端口UP之后立即进入转发状态；不需等待2倍的转发延时就可转发流量</li><li>P/A机制中，边缘端口不阻塞，可持续进行流量转发</li><li>边缘端口UP时，不触发TC机制</li></ul></li></ul><h3 id="RSTP端口状态"><a href="#RSTP端口状态" class="headerlink" title="RSTP端口状态"></a>RSTP端口状态</h3><p><img src="/post/27054/image-20220317190416695.png"></p><h3 id="RST-BPDU"><a href="#RST-BPDU" class="headerlink" title="RST BPDU"></a>RST BPDU</h3><p><img src="/post/27054/image-20220317190513170.png"></p><ul><li><strong>STP的配置BPDU中的Flag字段的中间6位在RSTP中的到应用</strong></li><li><strong>非根桥设备无论是否收到根桥发送的配置BPDU，都会按照Hello Timer规定的时间间隔发送配置BPDU</strong></li></ul><h3 id="收敛过程"><a href="#收敛过程" class="headerlink" title="收敛过程"></a>收敛过程</h3><p><img src="/post/27054/image-20220317190858897.png"></p><ul><li><strong>每一台交换机启动RSTP后，都认为自己是”根桥”，并且发送RST BPDU。所以端口都为指定端口，处于Discarding状态</strong></li></ul><p><img src="/post/27054/image-20220317191024443.png"></p><ul><li><strong>SWB收到了更优的RST BPDU，于是停止发送RST BPDU,并开始执行同步</strong></li></ul><p><img src="/post/27054/image-20220317191055434.png"></p><ul><li><strong>阻塞所以非边缘端口后，SWB会发送一个Agreement位置的RST BPDU</strong></li></ul><p><img src="/post/27054/image-20220317191153104.png"></p><ul><li><strong>P/A进程向下游继续传递，SWB和SWC会继续进行收敛</strong></li></ul><h3 id="RSTP拓扑变化处理"><a href="#RSTP拓扑变化处理" class="headerlink" title="RSTP拓扑变化处理"></a>RSTP拓扑变化处理</h3><p><img src="/post/27054/image-20220317191335772.png"></p><ul><li><strong>其他交换设备接收到rst bpdu后，清空所有其他端口学习到的mac地址，除了收到rst bpdu的端口</strong></li><li><strong>非根桥在3个hello时间内未收到RST BPDU即认为根桥出现故障，随即进行重新选举</strong></li></ul><h3 id="STP兼容"><a href="#STP兼容" class="headerlink" title="STP兼容"></a>STP兼容</h3><p><img src="/post/27054/image-20220317191431873.png"></p><ul><li><strong>运行rstp的交换设备在某个端口接收到运行stp的设备发出的bdpu，会把该端口转到stp模式</strong></li><li><strong>等待2个hello时间</strong></li></ul><h3 id="RSTP配置"><a href="#RSTP配置" class="headerlink" title="RSTP配置"></a>RSTP配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx">[Huawei]<span class="hljs-attribute">stp</span> mode rstp <br></code></pre></td></tr></table></figure><h4 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx">[Huawei]<span class="hljs-attribute">display</span> stp <br></code></pre></td></tr></table></figure><h4 id="边缘端口配置"><a href="#边缘端口配置" class="headerlink" title="边缘端口配置"></a>边缘端口配置</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx">[Huawei-GigabitEthernet0/0/0]<span class="hljs-attribute">stp</span> edged-port enable<br></code></pre></td></tr></table></figure><ul><li>边缘端口可以由disabled直接转到forwarding状态，不经历时延</li></ul><p><strong>全局配置边缘端口</strong></p><p><strong>！！！</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">stpedged-port default<br></code></pre></td></tr></table></figure><h4 id="根保护"><a href="#根保护" class="headerlink" title="根保护"></a>根保护</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx">[Huawei-GigabitEthernet0/0/0]<span class="hljs-attribute">stp</span> root-protection<br></code></pre></td></tr></table></figure><ul><li><strong>根保护确保了根桥的指定端口不会因为一些网络问题而改变端口角色</strong></li></ul><h4 id="BPDU保护"><a href="#BPDU保护" class="headerlink" title="BPDU保护"></a>BPDU保护</h4><p><strong>假设边缘端口意外收到BPDU，则端口变成普通端口，会参与STP计算，这时会触发TC，重新刷新mac地址表，造成网络震荡，我们就可以进行BPDU保护配置</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx">[huawei]<span class="hljs-attribute">stp</span> bdpu-protection<br></code></pre></td></tr></table></figure><ul><li><strong>配置bdpu保护后，如果边缘端口收到bdpu报文，会立即关闭，并通知网管系统，被关闭的端口只能通过手动恢复</strong></li></ul><h5 id="意外shutdown的恢复"><a href="#意外shutdown的恢复" class="headerlink" title="意外shutdown的恢复"></a>意外shutdown的恢复</h5><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">error-down <span class="hljs-built_in">auto</span>-recovery cause bpdu-protection <span class="hljs-built_in">int</span>erval <span class="hljs-number">30</span>    <span class="hljs-comment">//30秒自动恢复</span><br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">//手动恢复</span><br><span class="hljs-keyword">interface</span> <span class="hljs-symbol">g0</span>/<span class="hljs-symbol">0</span>/<span class="hljs-symbol">0</span><br><span class="hljs-symbol">undo</span>  <span class="hljs-symbol">shutdown</span><br></code></pre></td></tr></table></figure><h4 id="环路保护"><a href="#环路保护" class="headerlink" title="环路保护"></a>环路保护</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">[Huawei-GigabitEthernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">0</span>]stp loop-protection<br></code></pre></td></tr></table></figure><ul><li><strong>根端口如果长时间收不到来自上游的bdpu，则进入discarding状态，避免在网络中形成环路</strong></li></ul>]]></content>
    
    
    <categories>
      
      <category>Network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HCIA速通-网络工程师 -2-VRP基础</title>
    <link href="/post/42402/"/>
    <url>/post/42402/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>特辑专属BGM-Hacknet原声集</strong></p>    <div id="aplayer-OwZWNbXU" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="8058662392" data-server="tencent" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="140px" data-preload="auto" data-theme="#555"></div> <h1 id="VRP基础"><a href="#VRP基础" class="headerlink" title="VRP基础"></a>VRP基础</h1><ol><li><p><strong>system-view</strong>命令进入系统视图</p></li><li><p><strong>interface <em>interface-type interface-number</em></strong> 命令进入相应的接口视图</p></li><li><p><strong>quit</strong>命令的功能是从任何一个视图退出到上一层视图</p></li><li><p>用户可以随时键入“？ ”以获得在线帮助信息</p></li><li><p><strong>display-Display information</strong></p><p><strong>display ip int brief 查看接口ip地址</strong></p><p><strong>display int brief 查看接口的简要信息</strong></p><p><strong>display this 查看当前配置过的命令</strong></p><p><strong>display current-configuration 显示当前配置文件</strong></p><p><strong>display saved-configuration 显示保存的配置文件</strong></p><p><strong>display this 查看当前模式下的配置</strong></p><p><strong>display current-configuration 关键词（查看关键词的配置）</strong></p><p><strong>display mac-address 查看MAC表</strong></p><p><strong>display arp 查看ARP表</strong></p><p><strong>display ip routing-table 查看路由表</strong></p><p><strong>display ospf peer 查看ospf邻居关系</strong></p><p><strong>display ospf lsdb 查看链路关系数据库</strong></p><p><strong>display  int Eth-Trunk 查看链路聚合状态</strong></p><p><strong>display clock 查看系统当前时间</strong></p></li><li><p>通过命令<strong>sysname <em>host-name</em></strong>来对设备名称进行修改</p></li><li><p>设置时区的命令行为<strong>clock timezone <em>time-zone-name</em> {add|minus}</strong></p></li><li><p>配置接口 IP地址 的命令为 **ip address ip-address{masl^mask-length},**其中 ip address 是命令关键字， ip-address为希望配置的IP地址。mask表示点分十进制方式的子网掩码；mask-length表 示长度方式的子网掩码，即掩码中二进制数1的个数。</p></li><li><p>save保存</p></li><li><p>shutdown关机/在接口下也可用</p></li></ol><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><p><img src="/post/42402/image-20220315203905983.png"></p><h1 id="文件基础"><a href="#文件基础" class="headerlink" title="文件基础"></a>文件基础</h1><ol><li>pwd 查看当前路径</li><li>dir显示目录文件</li><li>cd [dir] 进入目录</li><li>cd..返回上层</li><li>copy 复制文件</li><li>move 移动文件</li><li>rename 重命名文件</li><li>delete/unreserved 删除/永久删除文件</li><li>undelete 恢复删除文件</li><li>reset recycle-bin 彻底删除回收站文件</li><li>display current-configuration 显示当前配置文件</li><li>display saved-configuration 显示保存的配置文件</li><li>save 保存</li><li>display startup 显示启动配置参数</li><li>startup saved-configuration 修改下次启动的配置文件</li><li>fixdisk [disk:] 存储修复</li><li>format [disk:] 存储格式化</li></ol>]]></content>
    
    
    <categories>
      
      <category>Network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HCIA速通-网络工程师 -1-OSI模型</title>
    <link href="/post/1132/"/>
    <url>/post/1132/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>特辑专属BGM-Hacknet原声集</strong></p>    <div id="aplayer-dXOKzLoZ" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="8058662392" data-server="tencent" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="140px" data-preload="auto" data-theme="#555"></div> <h1 id="网络结构层次-OSI七层参考模型"><a href="#网络结构层次-OSI七层参考模型" class="headerlink" title="网络结构层次 - OSI七层参考模型"></a>网络结构层次 - OSI七层参考模型</h1><p><img src="/post/1132/image-20220315114713766-16473160371261.png"></p><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><p>​    </p><p>​                                                                                                传输bit流 提供物理连接 机械参数&amp;&amp;电气性能标准化</p><hr><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><p>​                                                                                                    传输帧 逻辑链路 数据封装-帧头帧尾-差错控制<br>​                                                                                                    局域网中还分逻辑链路控制和介质访问控制（早期）</p><p><img src="/post/1132/image-20220315120944929-16473173864722.png"></p><p><strong>d.mac 目的mac地址</strong></p><p><strong>s.mac 源mac地址</strong></p><p><strong>fcs 帧校验</strong></p><p><strong>依靠type类型&amp;长度决定数据帧格式</strong></p><p>820.3 交换机生成树使用</p><h3 id="Ethernet-II帧格式"><a href="#Ethernet-II帧格式" class="headerlink" title="Ethernet_II帧格式"></a>Ethernet_II帧格式</h3><p><img src="/post/1132/image-20220315122108419-16473180707673-16473185137855.png"></p><p><img src="/post/1132/image-20220315122530762-16473183329474.png"></p><h3 id="IEEE802-3帧格式"><a href="#IEEE802-3帧格式" class="headerlink" title="IEEE802.3帧格式"></a>IEEE802.3帧格式</h3><p><img src="/post/1132/image-20220315122649073.png"></p><p><img src="/post/1132/image-20220315123054958-16473186563156.png"></p><p><strong>OUI 唯一识别标识符</strong></p><h3 id="数据帧的发送和接收"><a href="#数据帧的发送和接收" class="headerlink" title="数据帧的发送和接收"></a>数据帧的发送和接收</h3><p><img src="/post/1132/image-20220315123544039-16473189456308.png"></p><hr><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><p>​                                                                                                    控制子网通信 路由选择 路由中继 链路复用 差错控制 流量控制</p><h3 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h3><h4 id="IP报文头部"><a href="#IP报文头部" class="headerlink" title="IP报文头部"></a>IP报文头部</h4><p><img src="/post/1132/image-20220315124352453-16473194347349.png"></p><p><strong>TTL存活时间 255</strong></p><p><strong>identification 分片控制</strong></p><p><strong>protocol 协议号</strong></p><h4 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h4><p><img src="/post/1132/image-20220315124958076-164731979931111.png"></p><p><img src="/post/1132/image-20220315125049099-164731985025712.png"></p><p><strong>主机位为0表示网段地址 255为广播地址</strong></p><h4 id="IP地址分类"><a href="#IP地址分类" class="headerlink" title="IP地址分类"></a>IP地址分类</h4><p><img src="/post/1132/image-20220315125430140-164732007125413.png"></p><p><img src="/post/1132/image-20220315130206021.png"></p><h4 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h4><p><strong>网络位二进制取反</strong></p><p><img src="/post/1132/image-20220315130411624-164732065373914.png"></p><h5 id="增长子网掩码（vlsm）"><a href="#增长子网掩码（vlsm）" class="headerlink" title="增长子网掩码（vlsm）"></a><strong>增长子网掩码（vlsm）</strong></h5><p><strong>借用主机位</strong></p><h3 id="ICMP协议"><a href="#ICMP协议" class="headerlink" title="ICMP协议"></a>ICMP协议</h3><p><img src="/post/1132/image-20220315133152736-16473223140681.png"></p><p><strong>icmp重定向 最优路径选择</strong></p><p><img src="/post/1132/image-20220315133734327-16473226557482.png"></p><h4 id="icmp数据报格式"><a href="#icmp数据报格式" class="headerlink" title="icmp数据报格式"></a>icmp数据报格式</h4><p><img src="/post/1132/image-20220315133900453-16473227423403.png"></p><p><strong>type icmp消息类型</strong></p><p><strong>code 同一消息中的不同类型</strong></p><p><img src="/post/1132/image-20220315134053148-16473228551074.png"></p><h4 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h4><p><img src="/post/1132/image-20220315135608931-16473237698006.png"></p><h4 id="tracert"><a href="#tracert" class="headerlink" title="tracert"></a>tracert</h4><p><img src="/post/1132/image-20220315135508823-16473237104215.png"></p><hr><h4 id="traceroute"><a href="#traceroute" class="headerlink" title="traceroute"></a><strong>traceroute</strong></h4><p>通过traceroute我们可以知道信息从你的计算机到互联网另一端的主机是走的什么路径。当然每次数据包由某一同样的出发点（source）到达某一同样的目的地(destination)走的路径可能会不一样，但基本上来说大部分时候所走的路由是相同的。linux系统中，我们称之为traceroute,在MS Windows中为tracert。 traceroute通过发送小的数据包到目的设备直到其返回，来测量其需要多长时间。一条路径上的每个设备traceroute要测3次。输出结果中包括每次测试的时间(ms)和设备的名称（如有的话）及其IP地址。</p><hr><h3 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h3><p>地址解析协议，即ARP（Address Resolution Protocol），是根据IP地址获取物理地址的一个TCP/IP协议。主机发送信息时将包含目标IP地址的ARP请求广播到局域网络上的所有主机，并接收返回消息，以此确定目标的物理地址；收到返回消息后将该IP地址和物理地址存入本机ARP缓存中并保留一定时间，下次请求时直接查询ARP缓存以节约资源。地址解析协议是建立在网络中各个主机互相信任的基础上的，局域网络上的主机可以自主发送ARP应答消息，其他主机收到应答报文时不会检测该报文的真实性就会将其记入本机ARP缓存；</p><h4 id="arp数据包格式"><a href="#arp数据包格式" class="headerlink" title="arp数据包格式"></a>arp数据包格式</h4><p><img src="/post/1132/image-20220315155644617-16473310063217.png"></p><p>不同网段则直接请求网关mac地址</p><h4 id="代理arp"><a href="#代理arp" class="headerlink" title="代理arp"></a>代理arp</h4><p>不需要设置网关，路由器代理arp请求，实际获得网关mac，提升路由冗余能力</p><p><img src="/post/1132/image-20220315162531847-16473327345461.png"></p><hr><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><p>​                                                                                                    端到端数据传输 数据分段、传输、组装 差错控制/流量控制</p><h3 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h3><p><img src="/post/1132/image-20220315162935616-16473329771162.png"></p><h4 id="TCP常见端口号"><a href="#TCP常见端口号" class="headerlink" title="TCP常见端口号"></a>TCP常见端口号</h4><p><img src="/post/1132/image-20220315163031348-16473330330973.png"></p><h4 id="TCP报文头"><a href="#TCP报文头" class="headerlink" title="TCP报文头"></a>TCP报文头</h4><p><img src="/post/1132/image-20220315163225149-16473331498534.png"></p><p><strong>五元组确认地址</strong></p><p><strong>sequence number 序列号，数据报排序</strong></p><p><strong>acknowledge number 确认序列号</strong></p><p><strong>resv 保留位</strong></p><table><thead><tr><th>urg</th><th>紧急指示位</th></tr></thead><tbody><tr><td>ack</td><td>缺省位</td></tr><tr><td>psh</td><td></td></tr><tr><td>rst</td><td>重置位</td></tr><tr><td>syn</td><td>初始位</td></tr><tr><td>fin</td><td></td></tr></tbody></table><p><img src="/post/1132/image-20220315163811165.png"></p><h3 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h3><p><img src="/post/1132/image-20220315165832441.png"></p><h4 id="UDP报文头"><a href="#UDP报文头" class="headerlink" title="UDP报文头"></a>UDP报文头</h4><p><img src="/post/1132/image-20220315165951321.png"></p><p><strong>无重传机制</strong></p><h2 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h2><p>​                                                                                                    会话服务 会话管理</p><h2 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h2><p>​                                                                                                    数据语法转换 数据加解密 数据解压缩</p><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><p>​                                                                                                    直接向程序服务</p><hr><h1 id="tcp-ip协议族"><a href="#tcp-ip协议族" class="headerlink" title="tcp/ip协议族"></a>tcp/ip协议族</h1><h2 id="tcp和udp区别"><a href="#tcp和udp区别" class="headerlink" title="tcp和udp区别"></a>tcp和udp区别</h2><p>tcp连接建立需要进行三次握手<br>udp不需要握手 数据包无须经过确认就可以进行下一次传输</p>]]></content>
    
    
    <categories>
      
      <category>Network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java se-方法重载</title>
    <link href="/post/18552/"/>
    <url>/post/18552/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h1><p>同一个类中，完成一些相似的功能的方法，我们可以允许他们使用相同的名字，但是要保证它们的形参列表不同即可，如果同一个类中包含了两个或两个以上方法名相同的方法，但形参列表不同，这种情况被称为方法重载（overload）</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> m)</span>&#123;<br>    <span class="hljs-type">int</span> a=i+m;<br>&#125; <br><br><span class="hljs-comment">//如果有一个相似功能的方法可以这样写</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> m,<span class="hljs-type">int</span> q)</span>&#123;<br>    <span class="hljs-type">int</span> a=i+m+q;<br>&#125; <br></code></pre></td></tr></table></figure><p>但这里注意和重写的区别</p><p>重载：同类同方法名，参数列表</p><p>重写：两个类中存在父子关系，保持方法名必须相同，参数列表不能满足子类需求的时候，进行改写，参数列表也必须相同==。当子类重写父类的某个方法之后，通过子类调用该方法，一定调用的是重写之后的方法</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java se</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java-容器</title>
    <link href="/post/36441/"/>
    <url>/post/36441/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>前言简述一下数组，数组是一种容器，可以在其中放置一个或一组数据。从而，实现使用数组来管理一组数据。</p><p>它的优势是作为一种简单的线性序列，可以快速的访问数组元素，效率高。如果从效率和类型检查的角度讲，数组是最好的。</p><p><strong>劣势</strong></p><p>不灵活：容量事先定义好，不能随着需求的变化而扩容。</p><p>比如：我们在一个用户管理系统中，要把今天注册的所有用户取出来，那么这个用户有多少个？我们在写程序时是无法确定的。如果，你能确定那你就是神了。因此，就不能使用数组。</p><p>从而看出，数组远远不 能满足我们的需求。我们需要一种<strong>灵活的，容量可以随时扩充的容器</strong>来装载我们的对象。这就是我们今天要学习的<strong>容器类</strong>，或者叫<strong>集合框架</strong>。</p><h2 id="容器的接口层次"><a href="#容器的接口层次" class="headerlink" title="容器的接口层次"></a>容器的接口层次</h2><p><img src="/post/36441/image-20220425191232029.png"></p><p>Collection是一个接口，只是规定了一些方法，即作为一个容器就应该具有这些功能。</p><p>在Collection中并没有任何的可以存储数据的地方，因此只是作为一个规范存在。</p><ul><li>添加add</li><li>删除remove</li><li>记数size</li><li>包含contains</li><li>清空clear</li><li>是否空isEmpty</li></ul><ol><li><p>Collection作为容器中最顶层的接口，没有属性，不能存储数据，只是提供了容器最基本的功能（规范）</p></li><li><p>List作为容器的接口，没有属性，不能存储数据，只是提供了容器最基本的功能（规范），增加了一些和位置相关的操作</p><p>List容器当中存储的数据是有顺序的(按照指定的位置进行存储)，元素是可以重复的</p></li><li><p>Set作为容器的接口，没有属性，不能存储数据，只是提供了容器最基本的功能（规范）</p><p>Set容器当中的数据是没有顺序的（不会按照添加顺序进行存储，    有自己的一套存储规则）元素是不可重复的.</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java se</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>By cycle on the country side</title>
    <link href="/post/36064/"/>
    <url>/post/36064/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="4881416c97e65ca0f96e6cb9e1d7b895a4f6a30499ed233ae514642f810bf002">fd8d1bf829fa52bdbab6091ca2743008d5f39dd7f181b164c120e0a02513072a340b83c41d8452a9ad703ca4dcacada86d604bde2dd1b35476eb4e4e0cc27847e659166620161694538c10a0a0793827e7acc9e0844460ca6ae3a36eec31ee35ce6c5dfce7f88efb22dfbc708191c648ae8e760552855553adf97d9fc31b9680ab1a315edba8c6d37da25fc55a294f4ff9a15b72ba0e2ecd5b878a4421063ad2f9c1d2e96e31706ded786b1db8dec05d4b7da754dfd94e10a1c251caa664dcf01e1357c0f3efc25f2ca7c43c8a3a334b5ad339d2bd7b0e53fad5b88f6e339c5405a4c7a0a576ec1f47e505a20298be0207f28d04b70176a3362ae49f90abb52d2343c6e4dc4b6f4bd8be2acb015ddb97c32576a3ecd6b68f77cfae0400b7e594eb14ffa3ab29f982a8f9cfc14fde96a8a2e37caae1898e097ac67a19ae385ddf373bf7271c4108232e59a6f5d15f03e409db49888cb8a5862b1a06617a0adcf9149fc085f4b5e5ee27f4972f3201b13e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>My Mind</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Private</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编程站点分享-r2coding</title>
    <link href="/post/22009/"/>
    <url>/post/22009/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>编程自学之路（Road 2 Coding）<br>哔哩哔哩UP主“CodeSheep”制作的一个自学编程网站，涵盖内容十分全面，内容免费无广告</p><p>如果你有自学编程的需求，不妨看看！</p><p>访问地址：<a href="https://www.r2coding.com/">https://www.r2coding.com</a><br><img src="/post/22009/r2coding.png"></p>]]></content>
    
    
    <categories>
      
      <category>Other Share</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Learn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java-多态的一些概念</title>
    <link href="/post/65212/"/>
    <url>/post/65212/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>polymorphism即多种形态，模糊策略，以不变应万变，使用多态可以编写更加通用的代码。多态是建立在继承和重写的基础上，是一个运行期的动态绑定行为。</p><p>要发生多态有三个必要条件：<strong>要有继承，要有重写，父类引用指向子类对象</strong></p><h2 id="4-based"><a href="#4-based" class="headerlink" title="4 based"></a>4 based</h2><p>1）、继承链，自己没有找父亲<br>2）、编译看类型+确定方法表，运行找对象<br>3）、就近最优原则：自己没有才找父亲<br>4）、发生多态，父类对子类的新增方法不可见</p><h1 id="extends关键字"><a href="#extends关键字" class="headerlink" title="extends关键字"></a>extends关键字</h1><p>继承的本质在于抽象。类是对对象的抽象，继承是对某一批类的抽象，从而实现对现实世界更好的建模。同时使用继承可以提高代码的复用性。（事实上，利用组合可以更好的实现代码复用！）extends的意思是“扩展“。子类是父类的扩展。</p><p>实际作用中是为了实现，<strong>实现代码的复用，延续+扩展父类信息。</strong></p><p><strong>即通过继承，子类自动拥有了基类的所有成员（成员变量和成员方法）。</strong></p><p>ips：<strong>Java只支持单继承，不允许多继承：一个子类只能拥有一个直接基类，但是一个基类可以派生出多个子类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs java">&lt;modifier&gt; class &lt;name&gt; [extends&lt;superclass&gt;] &#123;...&#125;<br></code></pre></td></tr></table></figure><h1 id="重写-Override"><a href="#重写-Override" class="headerlink" title="重写@Override"></a>重写@Override</h1><p>父类方法不满足子类的要求，按需改写。注意方法签名必须相同</p><p><strong>两个类中存在父子关系，保持方法名必须相同，参数列表不能满足子类需求的时候，进行改写，参数列表也必须相同==。当子类重写父类的某个方法之后，通过子类调用该方法，一定调用的是重写之后的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">F</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> a）&#123;</span><br><span class="hljs-params">return a*<span class="hljs-number">100</span>;</span><br><span class="hljs-params">    &#125;</span><br><span class="hljs-params">&#125;</span><br><span class="hljs-params"></span><br><span class="hljs-params"><span class="hljs-meta">@Override</span></span><br><span class="hljs-params">class C&#123;</span><br><span class="hljs-params">    //重写</span><br><span class="hljs-params"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> test(<span class="hljs-type">int</span> a）&#123;</span><br><span class="hljs-params">return a*<span class="hljs-number">100</span>*<span class="hljs-number">100</span>；</span><br><span class="hljs-params">    &#125;</span><br><span class="hljs-params">&#125;</span><br></code></pre></td></tr></table></figure><p> 注意属性不会重写，以下方法不会重写</p><p>1、静态方法不会重写，父类为静态，子类只能为静态，否则编译错误,只是可以在子类中出现和父类相同的方法，但不是重写，不能加@Override注解</p><p>2、final修饰方法否则编译错误</p><p>3、私有方法不会重写,只是可以在子类中出现和父类相同的方法，但不是重写，不能加@Override注解</p><h1 id="Object继承链"><a href="#Object继承链" class="headerlink" title="Object继承链"></a>Object继承链</h1><p>Object类是所有Java类的根基类<br>如果在类的声明中未使用extends关键字指明其基类，则<strong>默认基类为Object类</strong></p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nim">public class <span class="hljs-type">Person</span><span class="hljs-meta">&#123;...&#125;</span><br>//等价于;<br>public class <span class="hljs-type">Person</span> extends <span class="hljs-type">Object</span><span class="hljs-meta">&#123;...&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java se</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux防火墙的简单操作</title>
    <link href="/post/20312/"/>
    <url>/post/20312/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight dockerfile"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment">#开启</span><br>service firewalld start<br><br><span class="hljs-comment">#重启</span><br>service firewalld restart<br><br><span class="hljs-comment">#关闭</span><br>service firewalld stop<br><br><span class="hljs-comment">#查看防火墙规则</span><br>firewall-<span class="hljs-keyword">cmd</span><span class="language-bash"> --list-all</span><br><br><span class="hljs-comment">#查看端口是否开放</span><br>firewall-<span class="hljs-keyword">cmd</span><span class="language-bash"> --query-port=8080/tcp</span><br><br><br><span class="hljs-comment">#端口开放</span><br>firewall-<span class="hljs-keyword">cmd</span><span class="language-bash"> --permanent --add-port=8080/tcp</span><br><br><span class="hljs-comment">#移除端口开放</span><br>firewall-<span class="hljs-keyword">cmd</span><span class="language-bash"> --permanent --remove-port=8080/tcp</span><br><br><span class="hljs-comment">#重启防火墙</span><br>firewall-<span class="hljs-keyword">cmd</span><span class="language-bash"> --reload</span><br><br><span class="hljs-comment">#参数释义</span><br>firewall-<span class="hljs-keyword">cmd</span><span class="language-bash">:是linux提供的一个操作firewall的工具</span><br>--permanent:设置为持久<br>--<span class="hljs-keyword">add</span><span class="language-bash">-port:标识添加端口</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ops</tag>
      
      <tag>firewall</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cent os开启ftp</title>
    <link href="/post/56547/"/>
    <url>/post/56547/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>执行命令检查安装vsftpd</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">vsftpd -v<br></code></pre></td></tr></table></figure><p>会出现版本信息</p><p>没有的话执行下面的命令安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install vsftpd<br></code></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="language-bash">修改配置文件</span><br>vi /etc/vsftpd/vsftpd.conf<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta"># </span><span class="language-bash">禁用匿名用户</span><br>anonymous_enable=NO<br><span class="hljs-meta"># </span><span class="language-bash">禁止切换根目录</span><br>chroot_local_user=YES<br><span class="hljs-meta"># </span><span class="language-bash">启用写的权限</span><br>allow_writeable_chroot=YES<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="language-bash">_&gt; useradd ftpuser</span><br><span class="hljs-meta">$</span><span class="language-bash">_&gt; passwd ftpuser</span><br><span class="hljs-meta">$</span><span class="language-bash">_&gt; useradd -d /home/wwwroot  ftpuser // 访问目录</span><br><span class="hljs-meta">$</span><span class="language-bash">_&gt; useradd -s /sbin/nologin ftpuser // 不能登录linux主机</span><br><span class="hljs-meta">$</span><span class="language-bash">_&gt; <span class="hljs-built_in">chmod</span> 777 -R /home/wwwroot // 目录可写，这样就可以上传文件了</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Ftp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虚拟机下cent os开启ssh</title>
    <link href="/post/34670/"/>
    <url>/post/34670/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="安装openssh-server"><a href="#安装openssh-server" class="headerlink" title="安装openssh-server"></a>安装openssh-server</h1><p>首先确认安装了openssh-server</p><figure class="highlight 1c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-comment">//检查openssh-server的安装</span><br>yum list installed <span class="hljs-string">| grep openssh-server</span><br></code></pre></td></tr></table></figure><p>查看输出，没有安装的话通过以下命令安装</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>安装openssh-server<br>yum install openssh-server<br></code></pre></td></tr></table></figure><h1 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h1><p>输入命令编辑配置文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>ssh/sshd_config<br></code></pre></td></tr></table></figure><p>如果没有vim的话，vi也行，或者直接yum install vim再改配置</p><p><img src="/post/34670/image-20220410130227049.png"></p><p>将关于监听端口、监听地址前的注释去掉</p><p><img src="/post/34670/image-20220410130324700.png"></p><p>允许远程登录</p><p><img src="/post/34670/image-20220410130512099.png"></p><p>开启使用用户名密码来作为连接验证</p><h1 id="运行ssh服务"><a href="#运行ssh服务" class="headerlink" title="运行ssh服务"></a>运行ssh服务</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>启动服务<br>sudo service sshd start<br><br><span class="hljs-regexp">//</span>将ssh添加到开机启动列表<br>systemctl enable sshd.service<br></code></pre></td></tr></table></figure><p>检查服务监听状态</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -<span class="hljs-keyword">e</span> | <span class="hljs-keyword">grep</span> sshd 或 netstat -<span class="hljs-keyword">an</span> | <span class="hljs-keyword">grep</span> <span class="hljs-number">22</span><br></code></pre></td></tr></table></figure><p><img src="/post/34670/image-20220410130818101.png"></p><p>在VMware里查看虚拟机网络连接类型，默认应该是nat的</p><p><img src="/post/34670/image-20220410142931112.png"></p><p>从菜单栏点击<strong>编辑   》 虚拟网络编辑器</strong>，进入虚拟网络编辑器，查看发现 NAT 虚拟机的网卡为<strong>VMnet8</strong></p><p><img src="/post/34670/image-20220410143148263.png"></p><p>要确保<strong>VMnet8</strong>网卡和虚拟机网卡在同一网段内，即子网掩码、默认网关均和CentOS一致</p><p>cmd敲<strong>IPconfig</strong>看VMnet8网卡信息</p><p><img src="/post/34670/image-20220410143259737.png"></p><p>在cent os里敲<strong>ifconfig</strong>查看网卡信息，我的IP地址为192.168.37.128</p><p><img src="/post/34670/image-20220410142730765.png"></p><p>不对的童鞋可以修改，之后就可以进行ssh连接了</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell入门</title>
    <link href="/post/42333/"/>
    <url>/post/42333/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><p>介绍：命令行解释器</p><p>作用：接收用户命令，操作调用内核</p><p>特点：易编写、调试、灵活性强</p><h1 id="shell解释器"><a href="#shell解释器" class="headerlink" title="shell解释器"></a>shell解释器</h1><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">sudo cat <span class="hljs-regexp">/etc/</span>shells<br></code></pre></td></tr></table></figure><h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><p>以#!/bin/bash开头（指定解析器）</p><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> helloword.sh<br></code></pre></td></tr></table></figure><h2 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> helloword.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello word&quot;</span><br></code></pre></td></tr></table></figure><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">sh</span> helloword.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><h1 id="shell变量"><a href="#shell变量" class="headerlink" title="shell变量"></a>shell变量</h1><h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><p>$HOME、$PWD、$SHELL、#USER</p><h2 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h2><p>（1）定义：变量=值</p><p>（2）撤销：unset 变量</p><p>（3）声明静态变量：readonly变量，注意不能unset</p><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><p>（1）变量名由字母、数字、下划线组成，不能以数字开头，环境变量名建议大写</p><p>（2）等号两侧不能由空格</p><p>（3）bash中，变量默认类型都是字符串类型，无法直接进行数值运算。</p><p>（4）变量值如果有空格，需要用双引号或单引号括起来。</p><p>（5）全局变量：export 变量名</p><h2 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h2><h3 id="n"><a href="#n" class="headerlink" title="$n"></a>$n</h3><p>传递给脚本或函数的参数。n 是一个数字，表示第几个参数。$0代表脚本名称，$1-9表示参数，例如，第一个参数是 $1，第二个参数是 $2。</p><h3 id><a href="#" class="headerlink" title="$#"></a>$#</h3><p> 传递给脚本或函数的参数个数。</p><h3 id="-1"><a href="#-1" class="headerlink" title="$*"></a>$*</h3><p>传递给脚本或函数的所有参数。</p><h3 id="-2"><a href="#-2" class="headerlink" title="$@"></a>$@</h3><p>传递给脚本或函数的所有参数。当被双引号<code>&quot; &quot;</code>包含时，$@ 与 $* 稍有不同</p><h3 id="-3"><a href="#-3" class="headerlink" title="$?"></a>$?</h3><p>上个命令的退出状态，或函数的返回值，值为0-正常执行，非0-执行失败</p><h3 id="-4"><a href="#-4" class="headerlink" title="$$"></a>$$</h3><p>当前 Shell 进程 ID。对于 Shell 脚本，就是这些脚本所在的进程 ID。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1.基本语法"></a>1.基本语法</h3><ol><li>“$((运算式))”或“$[运算式]”</li><li>expr +，-，\*，/,%(加减乘除取余)</li></ol><p><strong>注意：expr运算符间有空格</strong></p><p>example</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="language-bash">计算2+3的值</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">[root]$ </span><span class="language-bash"><span class="hljs-built_in">expr</span> 2 + 3</span><br>5<br></code></pre></td></tr></table></figure><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><h3 id="1-基本语法-1"><a href="#1-基本语法-1" class="headerlink" title="1.基本语法"></a>1.基本语法</h3><p> [ condition ] (condition前后有空格)</p><ul><li>条件非空为true</li></ul><p>常用判断</p><p>（1）整数比较</p><p>​        =字符串比较</p><p>​        -lt 小于（less than）                         -le 小于等于（less equal）</p><p>​        -eq 等于（equal）                             -gt大于（greater than）</p><p>​        -ge大于等于（greater equal）        -ne不等于（not equal）</p><p><strong>example</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#22是否小于等于23</span><br><br>[ 22 -le 23]<br><br><span class="hljs-comment">#根据输出判断执行</span><br><span class="hljs-built_in">echo</span> $? <br></code></pre></td></tr></table></figure><p>（2）按照权限判断</p><p>-r 只读（read）            -w写入（write）</p><p>-x 执行（execute）</p><p><strong>example</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#x.sh是否具有写入权限</span><br><br>[ -w x.sh]<br><br><span class="hljs-comment">#根据输出判断执行</span><br><span class="hljs-built_in">echo</span> $? <br></code></pre></td></tr></table></figure><p>（3）按文件类型</p><p>-f 文件存在且为file        -d文件存在且为目录</p><p>-e文件存在</p><p>（4）多条件判断（&amp;&amp;上一条命令执行成功执行下一条，||上一条执行失败后才执行下一条）</p><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><h4 id="1-基本语法-2"><a href="#1-基本语法-2" class="headerlink" title="1.基本语法"></a>1.基本语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">if [ 判读式 ]:then<br><br> 执行式<br> elif [ 判读式 ]:then<br> 执行式<br> <br>fi<br></code></pre></td></tr></table></figure><p> <strong>或者</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">if [ 判读式 ]<br><br> then<br><br> 执行式<br> elif [ 判读式 ]then<br> 执行式<br><br>fi<br></code></pre></td></tr></table></figure><ul><li><strong>判读式前后有空格</strong></li><li><strong>if后有空格</strong></li></ul><h3 id="case"><a href="#case" class="headerlink" title="case"></a>case</h3><h4 id="1-基本语法-3"><a href="#1-基本语法-3" class="headerlink" title="1.基本语法"></a>1.基本语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">case $变量名 in<br><br>&quot;值1&quot;）<br><br>变量值为1则执行<br><br>;;<br><br>&quot;值2&quot;）<br><br>变量值为2则执行<br><br>;;<br><br>*)<br><br>default语句<br><br>;;<br><br>esac<br></code></pre></td></tr></table></figure><p>case结尾必须为in，每个case判断以有括号”)”结束</p><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><h4 id="1-基本语法1"><a href="#1-基本语法1" class="headerlink" title="1.基本语法1"></a>1.基本语法1</h4><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gcode">for <span class="hljs-comment">(( 初始值;循环条件;变量变化 )</span>)<br> <span class="hljs-keyword">do</span><br>执行<br><span class="hljs-keyword">do</span><span class="hljs-symbol">ne</span><br></code></pre></td></tr></table></figure><p><strong>example</strong></p><p>从1累加到100</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash/</span><br><br>s=0<br><span class="hljs-keyword">for</span> ((i=1;i&lt;=100;i++))<br><span class="hljs-keyword">do</span><br>        s=$[<span class="hljs-variable">$s</span>+<span class="hljs-variable">$i</span>]<br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$s</span><br></code></pre></td></tr></table></figure><h4 id="2-基本语法2"><a href="#2-基本语法2" class="headerlink" title="2.基本语法2"></a>2.基本语法2</h4><p>for each</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> 变量 <span class="hljs-keyword">in</span> 值1 值2 值3...<br><span class="hljs-keyword">do</span><br>执行语句<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p><strong>example</strong></p><p>从1累加到100</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash/</span><br>s=0<br>i=1<br><span class="hljs-keyword">while</span> [ <span class="hljs-variable">$i</span> -le 100 ]<br><span class="hljs-keyword">do</span><br>s=$[<span class="hljs-variable">$s</span> + <span class="hljs-variable">$i</span>]<br>i=$[<span class="hljs-variable">$i</span> + 1]<br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$s</span><br></code></pre></td></tr></table></figure><h2 id="read"><a href="#read" class="headerlink" title="read"></a>read</h2><h3 id="1-基本语法-4"><a href="#1-基本语法-4" class="headerlink" title="1.基本语法"></a>1.基本语法</h3><p>read(选项)(参数)</p><p>选项：</p><p>​    -p：指定读取值时的提示符</p><p>​    -t：指定读取值时等待的时间</p><p>参数</p><p>​    变量：指定读取值的变量名</p><p><strong>example</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">read</span> -t<br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>系统函数</p><h3 id="basename"><a href="#basename" class="headerlink" title="basename"></a>basename</h3><p>语法：basename[string/pathname] [suffix] </p><p>(描述：basename命令会删掉最后一个/之前的所有前缀包括”/“字符并将剩下的字符串print)</p><p>选项：</p><p>suffix为后缀，如果被指定，basename回家pathname或string中的suffix去掉</p><h3 id="dirname"><a href="#dirname" class="headerlink" title="dirname"></a>dirname</h3><p>语法：dirname 绝对路径</p><p>(描述：从给定绝对路径的文件名中去除文件名并保留下路径信息)</p><h3 id="自定义-1"><a href="#自定义-1" class="headerlink" title="自定义"></a>自定义</h3><p>[ function ] funname[()]</p><p>{</p><p>​    action;</p><p>​    [return int;]</p><p>}</p><p>funname</p><ul><li>shell是脚本语言，调用函数前必须先声明</li><li>函数返回值只能通过$？获取，加return返回，不叫将以最后一条命令结果作为返回值</li></ul><p><strong>example</strong></p><p>两数和</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash/</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">sum</span></span>()<br>&#123;<br> s=0;<br> s=$[<span class="hljs-variable">$1</span>+<span class="hljs-variable">$2</span>]<br> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$s</span><br>&#125;<br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;输入一&quot;</span> p1<br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;输入二&quot;</span> p2<br><span class="hljs-built_in">sum</span> <span class="hljs-variable">$p1</span> <span class="hljs-variable">$p2</span><br></code></pre></td></tr></table></figure><h3 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h3><p>cut的作用”剪”，负责在文件或输出中截切字段、字符输出</p><h4 id="1-基本语法-5"><a href="#1-基本语法-5" class="headerlink" title="1.基本语法"></a>1.基本语法</h4><p>cut [选项参数] filename</p><p>默认分隔符是制表符</p><p><strong>参数</strong></p><ul><li>​    -f 列号，提取指定序列</li><li>​    -d 分隔符，按指定分隔符分割列</li></ul><h3 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h3><p>sed是一种流编辑器，一次处理一行内容，处理时，把当前处理行进行临时缓存，称为模式空间，接着sed命令处理缓存区内容，处理完成输出，不对文件内容改变</p><h4 id="1-基本语法-6"><a href="#1-基本语法-6" class="headerlink" title="1.基本语法"></a>1.基本语法</h4><p>sed [选项参数] ‘command’ filename</p><p><strong>参数</strong></p><ul><li>-e 直接在指令列模式进行动作编辑</li></ul><p><strong>命令功能描述</strong></p><ul><li>a 新增，a后面接字符，在下一行出现</li><li>d 删除</li><li>s 查找并替换</li></ul><p><strong>g表示全局</strong></p><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><p>文本分析工具，把文件逐行读入，以空格为默认分隔符将每行切片，切开部分再进行分析处理</p><h4 id="1-基本语法-7"><a href="#1-基本语法-7" class="headerlink" title="1.基本语法"></a>1.基本语法</h4><p>awk [选项参数]  ‘patterm1{action1} pattern2{action2}…’</p><p>pattern:awk查找的内容，匹配模式</p><p><strong>关键字</strong></p><ul><li><p>BEGIN开头</p></li><li><p>END结尾</p></li></ul><p>action：执行命令</p><p><strong>参数</strong></p><p>-F指定分隔符</p><p>-v 赋值一个用户定义变量</p><p><strong>example</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#匹配passwd中root开头行取第七列</span><br><br>cp <span class="hljs-regexp">/etc/</span>passwd <span class="hljs-regexp">/shell/</span><br>awk -F : <span class="hljs-string">&#x27;/^root/ &#123;print $7&#125;&#x27;</span>  passwd<br></code></pre></td></tr></table></figure><p><strong>内置变量</strong></p><p>FILENAME 文件名</p><p>NR 已读记录数</p><p>NF 浏览记录的域的个数（切割后列的个数）</p><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p>进行排序并将结果输出</p><h4 id="1-基本语法-8"><a href="#1-基本语法-8" class="headerlink" title="1.基本语法"></a>1.基本语法</h4><p>sort(选项)(参数)</p><p>​    -n 按数值大小排序</p><p>​    -r 按相反顺序排序</p><p>​    -t 设置排序时的分隔符</p><p>​    -k 指定需要排序的列</p><p><strong>example</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> sum1.txt | <span class="hljs-built_in">sort</span> -t <span class="hljs-string">&quot;&quot;</span> -nr<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shell</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kvm虚拟化的日常-虚拟机网络模式和热添加技术</title>
    <link href="/post/43020/"/>
    <url>/post/43020/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>略。。。</p><p><strong>2022 -3月17增补：参考我在hcia系列文章的内容</strong></p><h2 id="nat"><a href="#nat" class="headerlink" title="nat"></a>nat</h2><p>默认安装为nat网络</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs jboss-cli">virt-install <span class="hljs-params">--virt-type</span> kvm <span class="hljs-params">--os-type=linux</span> <span class="hljs-params">--os-variant</span> rhel7 <span class="hljs-params">--name</span> centos7 <span class="hljs-params">--memory</span> 1024 <span class="hljs-params">--vcpus</span> 1 <span class="hljs-params">--disk</span> <span class="hljs-string">/opt/centos_kvm.raw</span>,format=raw,size=10 <span class="hljs-params">--cdrom</span> <span class="hljs-string">/opt/CentOS-7-x86_64-Minimal-2009.iso</span> <span class="hljs-params">--network</span> network=default <span class="hljs-params">--graphics</span> vnc,listen=0.0.0.0 <span class="hljs-params">--noautoconsole</span><br></code></pre></td></tr></table></figure><h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#创建桥接网卡</span><br>virsh iface-bridge eth0 vr0<br><br>virsh iface-unbridge br0<br><br>virsh <span class="hljs-built_in">edit</span> domain<span class="hljs-built_in"></span><br><span class="hljs-built_in">interface </span><span class="hljs-attribute">type</span>=<span class="hljs-string">&#x27;brige&#x27;</span><br>&lt;source <span class="hljs-attribute">bridge</span>=<span class="hljs-string">&#x27;br0&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment">#指定使用桥接网络</span><br>virt-install <span class="hljs-params">--virt-type</span> kvm <span class="hljs-params">--os-type=linux</span> <span class="hljs-params">--os-variant</span> rhel7 <span class="hljs-params">--name</span> centos7 <span class="hljs-params">--memory</span> 1024 <span class="hljs-params">--vcpus</span> 1 <span class="hljs-params">--disk</span> <span class="hljs-string">/opt/centos_kvm.raw</span>,format=raw,size=10 <span class="hljs-params">--cdrom</span> <span class="hljs-string">/opt/CentOS-7-x86_64-Minimal-2009.iso</span> <span class="hljs-params">--network</span> bridge=br0 <span class="hljs-params">--graphics</span> vnc,listen=0.0.0.0 <span class="hljs-params">--noautoconsole</span><br></code></pre></td></tr></table></figure><h1 id="热添加"><a href="#热添加" class="headerlink" title="热添加"></a>热添加</h1><p>以下命令按步骤进行，新建磁盘盘符以<strong>vdb</strong>命名</p><h2 id="热添加硬盘"><a href="#热添加硬盘" class="headerlink" title="热添加硬盘"></a><strong>热添加硬盘</strong></h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment">#创建硬盘</span><br>qemu-img create -f qcow2 磁盘路径 大小 <br><br><span class="hljs-comment">#临时添加raw硬盘</span><br>virsh attach-disk 加入的domain 加入disk的绝对路径 盘符（未指定格式默认为raw打开） （永久生效添加<span class="hljs-params">--config</span>）<br><span class="hljs-comment">#或指定格式</span><br>virsh attach-disk 加入的domain 加入disk的绝对路径 盘符 <span class="hljs-params">--subdriver</span> 指定格式 （永久生效添加<span class="hljs-params">--config</span>）<br><br><span class="hljs-comment">#临时删除盘</span><br>virsh detach-disk 删除disk的domain 盘符 （永久生效添加<span class="hljs-params">--config</span>）<br><br><span class="hljs-comment">#显示磁盘</span><br>fidsk -l<br><br><span class="hljs-comment">#格式化硬盘</span><br>mkfs.xfs <span class="hljs-string">/dev/vdb</span><br><br><span class="hljs-comment">#显示磁盘分区信息</span><br>df -h<br><br><span class="hljs-comment">#挂载vdb到mnt</span><br>mount <span class="hljs-string">/dev/vdb</span> <span class="hljs-string">/mnt</span><br></code></pre></td></tr></table></figure><h2 id="硬盘扩容"><a href="#硬盘扩容" class="headerlink" title="硬盘扩容"></a>硬盘扩容</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#在虚拟机把扩容硬盘的挂载目录卸载</span><br>umount /mnt<br><br><span class="hljs-comment">#剥离硬盘</span><br>virsh detach-disk 删除disk的domain 盘符<br><br><span class="hljs-comment">#调整硬盘容量</span><br>qemu-img resize<br><br><br><span class="hljs-comment">#再次附加硬盘 </span><br>virsh attach-disk 加入的domain 加入disk的绝对路径 盘符 --subdriver 指定格式<br><br><span class="hljs-comment">#再次挂载扩容盘</span><br>mount <span class="hljs-regexp">/dev/</span>vdb /mnt<br><br><span class="hljs-comment">#更新扩容盘超级块信息</span><br>xfs_growfs <span class="hljs-regexp">/dev/</span>vdb(ext4格式磁盘使用resize2fs <span class="hljs-regexp">/dev/</span>vdb)<br></code></pre></td></tr></table></figure><h2 id="热添加网卡"><a href="#热添加网卡" class="headerlink" title="热添加网卡"></a>热添加网卡</h2><p><strong>部分命令转自<a href="https://blog.csdn.net/qq_33648367/article/details/113845703">csdn</a></strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[root@centoszhu ~]</span># virsh                                          　　　　进入virsh命令行模式<br>virsh # attach-interface web01 <span class="hljs-attr">--type</span> bridge <span class="hljs-attr">--source</span> br0          　　　　添加一块桥接网卡<br>virsh # attach-interface web01 <span class="hljs-attr">--type</span> bridge <span class="hljs-attr">--source</span> br0 <span class="hljs-attr">--model</span> virtio  添加一块网卡，指定模式virtio网卡更快<br>virsh # attach-interface web01 <span class="hljs-attr">--type</span> bridge <span class="hljs-attr">--source</span> br0 <span class="hljs-attr">--model</span> virtio <span class="hljs-attr">--config</span>   写进配置文件，永久生效<br>virsh # domiflist web01 　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　查看虚拟机有多少块网卡<br>virsh # domblklist web01                                           　　　　查看虚拟机有多少硬盘<br>virsh # detach-interface web01 <span class="hljs-attr">--type</span> bridge <span class="hljs-attr">--mac</span> <span class="hljs-number">52</span>:<span class="hljs-number">54</span>:<span class="hljs-number">00</span>:<span class="hljs-number">8</span>f:<span class="hljs-number">96</span>:<span class="hljs-number">8</span>f  　　 分离网卡<br></code></pre></td></tr></table></figure><hr><p><strong>以下原创</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#附加模式为virtio的网卡</span><br><span class="hljs-attribute">virsh</span> attach-interface domain --type bridge --source br0 --model virtio<br><span class="hljs-comment">#删除网卡</span><br><span class="hljs-attribute">detach</span>-interface domain --type bridge --mac <span class="hljs-number">52</span>:<span class="hljs-number">54</span>:<span class="hljs-number">00</span>:<span class="hljs-number">35</span>:<span class="hljs-number">03</span>-<span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><h2 id="热添加内存"><a href="#热添加内存" class="headerlink" title="热添加内存"></a><strong>热添加内存</strong></h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment">#安装时配置max内存</span><br>virt-install <span class="hljs-params">--virt-type</span> kvm <span class="hljs-params">--os-type=linux</span> <span class="hljs-params">--os-variant</span> rhel7 <span class="hljs-params">--name</span> web02 <span class="hljs-params">--memory</span> 215,maxmemory=2048 <span class="hljs-params">--vcpus</span> 1 <span class="hljs-params">--disk</span> <span class="hljs-string">/opt/web-clone.qcow2</span> <span class="hljs-params">--boot</span> hd <span class="hljs-params">--network</span> bridge=br0 <span class="hljs-params">--graphics</span> vnc,listen=0.0.0.0 <span class="hljs-params">--noautoconsol</span><br><br><br>[root@centoszhu opt]<span class="hljs-comment"># virsh setmem web02 1024M                     临时生效</span><br>[root@centoszhu opt]<span class="hljs-comment"># virsh setmem web02 1024M --config </span><br></code></pre></td></tr></table></figure><h2 id="热添加cpu"><a href="#热添加cpu" class="headerlink" title="热添加cpu"></a>热添加cpu</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment">#1、安装虚拟机时，需要修改参数。maxvcpus=10</span><br><br>virt-install <span class="hljs-params">--virt-type</span> kvm <span class="hljs-params">--os-type=linux</span> <span class="hljs-params">--os-variant</span> rhel7 <span class="hljs-params">--name</span> web02 <span class="hljs-params">--memory</span> 215,maxmemory=2048 <span class="hljs-params">--vcpus</span> 1,maxvcpus=10 <span class="hljs-params">--disk</span> <span class="hljs-string">/opt/web-clone.qcow2</span> <span class="hljs-params">--boot</span> hd <span class="hljs-params">--network</span> bridge=br0 <span class="hljs-params">--graphics</span> vnc,listen=0.0.0.0 <span class="hljs-params">--noautoconsole</span>                系统帮助文档maxvcp <br><br><br>[root@centoszhu opt]<span class="hljs-comment"># virsh setvcpus web02 2                     临时添加</span><br>[root@centoszhu opt]<span class="hljs-comment"># virsh setvcpus web02 2 --config            写入配置文件，永久生效</span><br></code></pre></td></tr></table></figure><h1 id="热迁移"><a href="#热迁移" class="headerlink" title="热迁移"></a>热迁移</h1><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-meta">#共享主机安装nfs</span><br><span class="hljs-title">yum</span> install nfs-utils<br><br><span class="hljs-meta">#创建共享目录</span><br><span class="hljs-title">mkdir</span> /<span class="hljs-class"><span class="hljs-keyword">data</span></span><br><br><span class="hljs-title">vim</span> /etc/exports<br>/<span class="hljs-class"><span class="hljs-keyword">data</span> x网段/24(<span class="hljs-title">rw</span>,<span class="hljs-title">async</span>,<span class="hljs-title">no_root_squash</span>,<span class="hljs-title">no_all_squash</span>) </span><br><br><span class="hljs-title">systemctl</span> restart rpcbind<br><span class="hljs-title">systemctl</span> restart nfs<br></code></pre></td></tr></table></figure><p>宿主机链接共享机</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment">#测试连接</span><br>shoumount -e 共享机IP地址 <br><span class="hljs-comment">#挂载共享机目录（注意先backup原目录文件）</span><br>mount -t nfs 共享机IP地址:<span class="hljs-string">/data</span> 要挂载的目录 <br>virsh migrate <span class="hljs-params">--live</span> <span class="hljs-params">--verbose</span> oldboy qemu+ssh:<span class="hljs-string">//</span>迁入机IP地址<span class="hljs-string">/system</span> <span class="hljs-params">--unsafe</span><br></code></pre></td></tr></table></figure><p>更多请<a href="https://www.qstack.com.cn/archives/368.html">参考</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kvm</tag>
      
      <tag>kvm管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kvm虚拟化的日常—克隆</title>
    <link href="/post/29469/"/>
    <url>/post/29469/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="完整克隆"><a href="#完整克隆" class="headerlink" title="完整克隆"></a>完整克隆</h1><p>完整克隆就是把原始的虚拟主机全部状态的一个拷贝，除了MAC地址和UUID，其余虚拟机的配置都一样，克隆出来的虚拟主机和原始的虚拟主机是相互独立的，不共享任何资源，都有自己独立的CPU、内存、和存储空间，好处就是安全性比较高，企业中主要用的也是完整克隆的方式；</p><figure class="highlight crmsh"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><pre><code class="hljs crmsh">//自动克隆<br>virt-<span class="hljs-keyword">clone</span> <span class="hljs-title">--auto-clone</span> -o 源domain -n 新domain<br><br>———————————————————————————————————————————————————————————————————————————————<br>//手动克隆<br><br><span class="hljs-comment">#copy 磁盘</span><br>cp 源磁盘 新磁盘<br><br><span class="hljs-comment">#重定向导出配置</span><br>virsh dumpxml 源domain &gt;新domain.<span class="hljs-keyword">xml</span><br><br><span class="hljs-title">#编辑配置（需要修改domain</span>名 删除uuid 删除mac 修改disk位置）<br>vim 新domain.<span class="hljs-keyword">xml</span><br><br><span class="hljs-title">#导入配置</span><br><span class="hljs-title">virsh</span> define 新domain.<span class="hljs-keyword">xml</span><br><br><span class="hljs-title">#启动</span><br><span class="hljs-title">virsh</span> <span class="hljs-literal">start</span> 新domain<br></code></pre></td></tr></table></figure><h1 id="链接克隆"><a href="#链接克隆" class="headerlink" title="链接克隆"></a>链接克隆</h1><p>链接克隆，字面意思就是通过链接啥而克隆出的一个虚拟主机，肯定和原始的虚拟主机有关系的，虽然服务器会给克隆出的虚拟主机分配新的CPU、内存，但是它们共享一个虚拟磁盘的存储空间，克隆出来的虚拟主机存储数据时，原始主机才会分配出空间让链接克隆出来的虚拟主机存储。克隆出来的虚拟主机是不能脱离原始虚拟机独立运行的，好处就是链接克隆的虚拟主机更快，节省空间，但相对来说不是那么安全。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">#生成磁盘文件<br>qemu-img <span class="hljs-keyword">create</span> -f qcow2 -b 源<span class="hljs-keyword">domain</span>磁盘 新<span class="hljs-keyword">domain</span>.qcow2<br><br>#重定向导出配置<br>virsh dumpxml 源<span class="hljs-keyword">domain</span> &gt;新<span class="hljs-keyword">domain</span>.xml<br><br>#编辑配置（需要修改<span class="hljs-keyword">domain</span>名 删除<span class="hljs-type">uuid</span> 删除mac 修改disk位置）<br>vim 新<span class="hljs-keyword">domain</span>.xml<br><br>#导入配置<br>virsh define 新<span class="hljs-keyword">domain</span>.xml<br><br>#启动<br>virsh <span class="hljs-keyword">start</span> 新<span class="hljs-keyword">domain</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kvm</tag>
      
      <tag>kvm管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>opensatck模板机创建</title>
    <link href="/post/30065/"/>
    <url>/post/30065/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="系统优化"><a href="#系统优化" class="headerlink" title="系统优化"></a>系统优化</h1><p><strong>固定网卡名：安装系统时按TAB键，在底下输入</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs routeros">net.<span class="hljs-attribute">ifnames</span>=0 <span class="hljs-attribute">biosdevname</span>=0<br></code></pre></td></tr></table></figure><p><strong>添加中文支持</strong></p><p><strong>最小化安装并添加工具</strong></p><p><img src="/post/30065/image-20220410213050204.png"></p><p><strong>根分区和swap分区添加</strong></p><p><img src="/post/30065/image-20220410213137408.png"></p><h1 id="网卡优化"><a href="#网卡优化" class="headerlink" title="网卡优化"></a>网卡优化</h1><p><strong>编辑网卡配置，删除所有行</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>sysconfig<span class="hljs-regexp">/network-scripts/i</span>fcfg-eth0<br></code></pre></td></tr></table></figure><p><strong>添加以下配置信息</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">TYPE</span><span class="hljs-operator">=</span>Ethernet<br><span class="hljs-attribute">BOOTPROTO</span><span class="hljs-operator">=</span>none<br><span class="hljs-attribute">NAME</span><span class="hljs-operator">=</span>eth0<br><span class="hljs-attribute">DEVICE</span><span class="hljs-operator">=</span>eth0<br><span class="hljs-attribute">ONBOOT</span><span class="hljs-operator">=</span>yes<br>//这行删掉，下面地址、掩码和网关按实际情况配置<br><span class="hljs-attribute">IPADDR</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">NETMASK</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">GATEWAY</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">DNS1</span><span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure><h1 id="防火墙优化"><a href="#防火墙优化" class="headerlink" title="防火墙优化"></a>防火墙优化</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>停止防火墙<br>systemctl stop firewalld<br><br><span class="hljs-regexp">//</span>禁用防火墙<br>systemctl disable firewalld<br></code></pre></td></tr></table></figure><h1 id="SE-linux优化"><a href="#SE-linux优化" class="headerlink" title="SE linux优化"></a>SE linux优化</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>临时关闭<br>setenforce <span class="hljs-number">0</span><br>getenforce<br></code></pre></td></tr></table></figure><p>编辑配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>selinux/config <br></code></pre></td></tr></table></figure><p><strong>修改SELINUX=enforcing为SELINUX=disable</strong></p><h1 id="ssh优化"><a href="#ssh优化" class="headerlink" title="ssh优化"></a>ssh优化</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>ssh/sshd_config <br><br><br><span class="hljs-regexp">//</span>以下为修改项<br>GSSAPIAuthentication yes<br>UseDNS no<br><br><span class="hljs-regexp">//</span>重启<br>systemctl restart sshd<br></code></pre></td></tr></table></figure><h1 id="hosts优化"><a href="#hosts优化" class="headerlink" title="hosts优化"></a>hosts优化</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>hosts<br><br><span class="hljs-comment">#增加2行，IP为你指定的地址</span><br>ipcontroller<br>ipcomputer<br></code></pre></td></tr></table></figure><h2 id="系统名"><a href="#系统名" class="headerlink" title="系统名"></a>系统名</h2><p>原<a href="https://blog.csdn.net/qq_30638831/article/details/78921342">po</a></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-number">1</span>、查看系统的机器名称：<br><br>    使用root用户登录，在终端控制台输入： hostname<br><br>    [root<span class="hljs-symbol">@linuxidc</span> ]<span class="hljs-meta"># hostname </span><br>    <br>    linuxidc<br><br><span class="hljs-number">2</span>、临时修改机器名称：<br><br>    [root<span class="hljs-symbol">@linuxidc</span> ]<span class="hljs-meta"># hostname yourname</span><br><br>注：第<span class="hljs-number">2</span>步的修改只能临时有效，机器重启又还原了，想要让修改永久生效，还要继续下面的步骤：<br><br><span class="hljs-number">3</span>、修改hosts 文件（路径：/etc/hosts）：<br><br>    [root<span class="hljs-symbol">@linuxidc</span> ]<span class="hljs-meta"># vi /etc/hosts</span><br><br>    把hosts里面所有原来的名称改成你想改成的名称，此外，还需要特别注意的是，hosts文件里面的ip必须改成系统现在拥有的ip（ip查询方式：<span class="hljs-meta"># ifconfig）</span><br><br><span class="hljs-number">4</span>、修改network文件（路径：/etc/sysconfig/network）：<br><br>    [root<span class="hljs-symbol">@linuxidc</span> ]<span class="hljs-meta"># vi /etc/sysconfig/network</span><br><br>    把里面的hostname=XXX 中XXX改成你想改成的名称<br><br><span class="hljs-number">5</span>、重启机器：<br><br>    [root<span class="hljs-symbol">@linuxidc</span> ]<span class="hljs-meta"># reboot</span><br><br>ok，修改完毕~~~~~~~~ <br></code></pre></td></tr></table></figure><h1 id="yum源优化"><a href="#yum源优化" class="headerlink" title="yum源优化"></a>yum源优化</h1><p><img src="/post/30065/image-20220410221525018.png"></p><p><img src="/post/30065/image-20220410221614698.png"></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>关闭网卡图形化设置模式<br>systemctl stop NetworkManager.service<br>systemctl disable NetworkManager.service<br><br><span class="hljs-regexp">//</span>tab补全<br>yum install -y bash-completion.noarch<br><br><span class="hljs-regexp">//</span>下载常用命令<br>yum install -y net-tools vim lrzsz wget tree screen lsof tcpdum<br><br><span class="hljs-regexp">//</span>关机<br>shutdown -h now<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kvm虚拟化的日常-磁盘管理和快照</title>
    <link href="/post/50933/"/>
    <url>/post/50933/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="格式管理"><a href="#格式管理" class="headerlink" title="格式管理"></a>格式管理</h1><h2 id="磁盘格式"><a href="#磁盘格式" class="headerlink" title="磁盘格式"></a>磁盘格式</h2><p>raw：裸格式，古用空间比较大，不支持快照功能，性能较好，不万便传输<br>总50G占用2G<br>qcow2：cow（copy on write）占用空间小，支持快照，性能比raw差一点，万便传输 总50G占用2G</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">//raw</span><br>virt-install <span class="hljs-params">--virt-type</span> kvm <span class="hljs-params">--os-type=linux</span> <span class="hljs-params">--os-variant</span> rhel7 <span class="hljs-params">--name</span> centos7 <span class="hljs-params">--memory</span> 1024 <span class="hljs-params">--vcpus</span> 1 <span class="hljs-params">--disk</span> <span class="hljs-string">/opt/centos_kvm.raw</span>,format=raw,size=10 <span class="hljs-params">--cdrom</span> <span class="hljs-string">/opt/CentOS-7-x86_64-Minimal-2009.iso</span> <span class="hljs-params">--network</span> network=default <span class="hljs-params">--graphics</span> vnc,listen=0.0.0.0 <span class="hljs-params">--noautoconsole</span><br><br><br><span class="hljs-string">//qcow2</span><br>virt-install <span class="hljs-params">--virt-type</span> kvm <span class="hljs-params">--os-type=linux</span> <span class="hljs-params">--os-variant</span> rhel7 <span class="hljs-params">--name</span> centos7 <span class="hljs-params">--memory</span> 1024 <span class="hljs-params">--vcpus</span> 1 <span class="hljs-params">--disk</span> <span class="hljs-string">/opt/centos_kvm.qcow2</span>,format=qcow2,size=10 <span class="hljs-params">--cdrom</span> <span class="hljs-string">/opt/CentOS-7-x86_64-Minimal-2009.iso</span> <span class="hljs-params">--network</span> network=default <span class="hljs-params">--graphics</span> vnc,listen=0.0.0.0 <span class="hljs-params">--noautoconsole</span><br></code></pre></td></tr></table></figure><h2 id="磁盘工具的常用命令"><a href="#磁盘工具的常用命令" class="headerlink" title="磁盘工具的常用命令"></a>磁盘工具的常用命令</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">qemu -<span class="hljs-selector-tag">img</span> 参数 文件<br></code></pre></td></tr></table></figure><hr><p><strong>info 查看镜像信息</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">qemu</span> -img <span class="hljs-literal">info</span> 文件<br></code></pre></td></tr></table></figure><hr><p><strong>create 创建</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>不指定磁盘格式<br>qemu -img create 镜像路径 大小(xxG)<br><br><span class="hljs-regexp">//</span>指定磁盘格式<br>qemu -img create -f qcow2 镜像路径 大小(xxG)<br></code></pre></td></tr></table></figure><hr><p><strong>resize 调整容量</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//qcow2写时复制机制不能缩小</span><br>qemu -<span class="hljs-selector-tag">img</span> <span class="hljs-attribute">resize</span> 镜像路径 大小|加减大小<br></code></pre></td></tr></table></figure><hr><p><strong>convert 转换磁盘格式</strong> </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">qemu -<span class="hljs-selector-tag">img</span> convert -f 原格式 -O 输出格式 源文件路径  输出文件路径<br></code></pre></td></tr></table></figure><p><strong>转换后注意在virsh edit domain修改disk type</strong></p><hr><h1 id="磁盘快照"><a href="#磁盘快照" class="headerlink" title="磁盘快照"></a>磁盘快照</h1><p><img src="/post/50933/take_photo.jpg"></p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">virsh <span class="hljs-keyword">snapshot</span>-参数<br></code></pre></td></tr></table></figure><h2 id="查看快照列表"><a href="#查看快照列表" class="headerlink" title="查看快照列表"></a>查看快照列表</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">virsh <span class="hljs-keyword">snapshot</span>-list <span class="hljs-keyword">domain</span><br></code></pre></td></tr></table></figure><h2 id="创建快照"><a href="#创建快照" class="headerlink" title="创建快照"></a>创建快照</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//不命名快照，默认以时间戳生成快照名<br>virsh <span class="hljs-keyword">snapshot</span>-<span class="hljs-keyword">create</span> <span class="hljs-keyword">domain</span><br><br>//命名快照<br>virsh <span class="hljs-keyword">snapshot</span>-<span class="hljs-keyword">create</span>-<span class="hljs-keyword">as</span> <span class="hljs-comment">--name 快照名  domain</span><br></code></pre></td></tr></table></figure><h2 id="删除快照"><a href="#删除快照" class="headerlink" title="删除快照"></a>删除快照</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">virsh <span class="hljs-keyword">snapshot</span>-<span class="hljs-keyword">delete</span> <span class="hljs-comment">--snapshotname 快照名 domain</span><br></code></pre></td></tr></table></figure><h2 id="还原快照"><a href="#还原快照" class="headerlink" title="还原快照"></a>还原快照</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">virsh <span class="hljs-keyword">snapshot</span>-revert <span class="hljs-keyword">domain</span> <span class="hljs-comment">--snapshotname 快照名</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kvm</tag>
      
      <tag>kvm管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kvm虚拟化的日常 — virsh命令</title>
    <link href="/post/29848/"/>
    <url>/post/29848/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>前言</strong></p><h1 id="什么是virsh"><a href="#什么是virsh" class="headerlink" title="什么是virsh"></a>什么是virsh</h1><p><strong>virsh</strong>是kvm一个管理工具包。virsh提供两种执行模式：“直接模式（Direct Mode）”与“互动模式（Interactive Mode）”。在直接模式里，你必须在Shell中以参数、自变量的方式来执行virsh，如果在互动模式中，则virsh会提供一个提示字符串，你可以在该提示字符串后，输入要执行的命令。如果执行virsh没有指定任何参数或自变量则默认就是进入互动模式。与xm一样，COMMAND也是 virsh提供的命令。</p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p><strong>virsh list 处于启动状态的虚拟机 –all 所有</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>用法<br>virsh 参数 虚拟机唯一名<br></code></pre></td></tr></table></figure><p>启动 start</p><p>关机 shutdown</p><p>重启 reboot</p><p>断电 destroy</p><p>配置文件 dumpxml （加重定向例如：&gt;centos7.xml导出到文件）</p><p>定义/导入 define（domain配置文件）</p><p>取消定义 undefine</p><p>编辑配置 edit</p><p>重置主机域名（关机状态下） domrename（主机名后加上改后的名字）</p><p>挂起 suspend </p><p>恢复 resume</p><p>显示vnc端口号 vncdisplay</p><p>开机启动 autostart（在配置目录autostart下可以看到设置开机自启的domain）</p><hr><p><strong>console控制台 console</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>ssh到domain里,输入修改domain内核参数的命令<br>grubby --update-kernel=ALL --args=<span class="hljs-string">&quot;console=ttyS0,115200n8&quot;</span> <br><br><span class="hljs-regexp">//</span>或者<br>vi <span class="hljs-regexp">/boot/g</span>rub2/grub.cfg<br><span class="hljs-regexp">//</span>linux16末尾加上console=ttyS0,<span class="hljs-number">115200</span>n8，最后reboot<br></code></pre></td></tr></table></figure><hr><p><strong>配置文件目录 /etc/libvirt/qemu</strong></p><h2 id="如何删除一个虚拟机"><a href="#如何删除一个虚拟机" class="headerlink" title="如何删除一个虚拟机"></a>如何删除一个虚拟机</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>销毁域<br>virsh destroy 虚拟机唯一名<br><br><span class="hljs-regexp">//</span>解除定义<br>virsh undefine 虚拟机唯一名<br><br><span class="hljs-regexp">//</span>删除硬盘文件<br>rm -rf  虚拟机硬盘所在位置 -y<br><br><span class="hljs-regexp">//</span>最后查看<br>virsh list --all<br></code></pre></td></tr></table></figure><h1 id="virsh全命令"><a href="#virsh全命令" class="headerlink" title="virsh全命令"></a>virsh全命令</h1><p>我敲virsh help得到输出如下，help真的是很重要，不会了就敲help找自己需要的</p><p>分组的命令：</p><p> Domain Management (help keyword ‘domain’):<br>    attach-device                  从一个XML文件附加装置<br>    attach-disk                    附加磁盘设备<br>    attach-interface               获得网络界面<br>    autostart                      自动开始一个域<br>    blkdeviotune                   设定或者查询块设备 I/O 调节参数。<br>    blkiotune                      获取或者数值 blkio 参数<br>    blockcommit                    启动块提交操作。<br>    blockcopy                      启动块复制操作。<br>    blockjob                       管理活跃块操作<br>    blockpull                      使用其后端映像填充磁盘。<br>    blockresize                    创新定义域块设备大小<br>    change-media                   更改 CD 介质或者软盘驱动器<br>    console                        连接到客户会话<br>    cpu-stats                      显示域 cpu 统计数据<br>    create                         从一个 XML 文件创建一个域<br>    define                         从一个 XML 文件定义（但不开始）一个域<br>    desc                           显示或者设定域描述或者标题<br>    destroy                        销毁（停止）域<br>    detach-device                  从一个 XML 文件分离设备<br>    detach-device-alias            detach device from an alias<br>    detach-disk                    分离磁盘设备<br>    detach-interface               分离网络界面<br>    domdisplay                     域显示连接 URI<br>    domfsfreeze                    Freeze domain’s mounted filesystems.<br>    domfsthaw                      Thaw domain’s mounted filesystems.<br>    domfsinfo                      Get information of domain’s mounted filesystems.<br>    domfstrim                      在域挂载的文件系统中调用 fstrim。<br>    domhostname                    输出域主机名<br>    domid                          把一个域名或 UUID 转换为域 id<br>    domif-setlink                  设定虚拟接口的链接状态<br>    domiftune                      获取/设定虚拟接口参数<br>    domjobabort                    忽略活跃域任务<br>    domjobinfo                     域任务信息<br>    domname                        将域 id 或 UUID 转换为域名<br>    domrename                      rename a domain<br>    dompmsuspend                   使用电源管理功能挂起域<br>    dompmwakeup                    从 pmsuspended 状态唤醒域<br>    domuuid                        把一个域名或 id 转换为域 UUID<br>    domxml-from-native             将原始配置转换为域 XML<br>    domxml-to-native               将域 XML 转换为原始配置<br>    dump                           把一个域的内核 dump 到一个文件中以方便分析<br>    dumpxml                        XML 中的域信息<br>    edit                           编辑某个域的 XML 配置<br>    event                          Domain Events<br>    inject-nmi                     在虚拟机中输入 NMI<br>    iothreadinfo                   view domain IOThreads<br>    iothreadpin                    control domain IOThread affinity<br>    iothreadadd                    add an IOThread to the guest domain<br>    iothreaddel                    delete an IOThread from the guest domain<br>    send-key                       向虚拟机发送序列号<br>    send-process-signal            向进程发送信号<br>    lxc-enter-namespace            LXC 虚拟机进入名称空间<br>    managedsave                    管理域状态的保存<br>    managedsave-remove             删除域的管理保存<br>    managedsave-edit               edit XML for a domain’s managed save state file<br>    managedsave-dumpxml            Domain information of managed save state file in XML<br>    managedsave-define             redefine the XML for a domain’s managed save state file<br>    memtune                        获取或者数值内存参数<br>    perf                           Get or set perf event<br>    metadata                       show or set domain’s custom XML metadata<br>    migrate                        将域迁移到另一个主机中<br>    migrate-setmaxdowntime         设定最大可耐受故障时间<br>    migrate-getmaxdowntime         get maximum tolerable downtime<br>    migrate-compcache              获取/设定压缩缓存大小<br>    migrate-setspeed               设定迁移带宽的最大值<br>    migrate-getspeed               获取最长迁移带宽<br>    migrate-postcopy               Switch running migration from pre-copy to post-copy<br>    numatune                       获取或者数值 numa 参数<br>    qemu-attach                    QEMU 附加<br>    qemu-monitor-command           QEMU 监控程序命令<br>    qemu-monitor-event             QEMU Monitor Events<br>    qemu-agent-command             QEMU 虚拟机代理命令<br>    reboot                         重新启动一个域<br>    reset                          重新设定域<br>    restore                        从一个存在一个文件中的状态恢复一个域<br>    resume                         重新恢复一个域<br>    save                           把一个域的状态保存到一个文件<br>    save-image-define              为域的保存状态文件重新定义 XML<br>    save-image-dumpxml             在 XML 中保存状态域信息<br>    save-image-edit                为域保存状态文件编辑 XML<br>    schedinfo                      显示/设置日程安排变量<br>    screenshot                     提取当前域控制台快照并保存到文件中<br>    set-lifecycle-action           change lifecycle actions<br>    set-user-password              set the user password inside the domain<br>    setmaxmem                      改变最大内存限制值<br>    setmem                         改变内存的分配<br>    setvcpus                       改变虚拟 CPU 的号<br>    shutdown                       关闭一个域<br>    start                          开始一个（以前定义的）非活跃的域<br>    suspend                        挂起一个域<br>    ttyconsole                     tty 控制台<br>    undefine                       取消定义一个域<br>    update-device                  从 XML 文件中关系设备<br>    vcpucount                      域 vcpu 计数<br>    vcpuinfo                       详细的域 vcpu 信息<br>    vcpupin                        控制或者查询域 vcpu 亲和性<br>    emulatorpin                    控制火车查询域模拟器亲和性<br>    vncdisplay                     vnc 显示<br>    guestvcpus                     query or modify state of vcpu in the guest (via agent)<br>    setvcpu                        attach/detach vcpu or groups of threads<br>    domblkthreshold                set the threshold for block-threshold event for a given block device or it’s backing chain element</p><p> Domain Monitoring (help keyword ‘monitor’):<br>    domblkerror                    在块设备中显示错误<br>    domblkinfo                     域块设备大小信息<br>    domblklist                     列出所有域块<br>    domblkstat                     获得域设备块状态<br>    domcontrol                     域控制接口状态<br>    domif-getlink                  获取虚拟接口链接状态<br>    domifaddr                      Get network interfaces’ addresses for a running domain<br>    domiflist                      列出所有域虚拟接口<br>    domifstat                      获得域网络接口状态<br>    dominfo                        域信息<br>    dommemstat                     获取域的内存统计<br>    domstate                       域状态<br>    domstats                       get statistics about one or multiple domains<br>    domtime                        domain time<br>    list                           列出域</p><p> Host and Hypervisor (help keyword ‘host’):<br>    allocpages                     Manipulate pages pool size<br>    capabilities                   性能<br>    cpu-baseline                   计算基线 CPU<br>    cpu-compare                    使用 XML 文件中描述的 CPU 与主机 CPU 进行对比<br>    cpu-models                     CPU models<br>    domcapabilities                domain capabilities<br>    freecell                       NUMA可用内存<br>    freepages                      NUMA free pages<br>    hostname                       打印管理程序主机名<br>    hypervisor-cpu-baseline        compute baseline CPU usable by a specific hypervisor<br>    hypervisor-cpu-compare         compare a CPU with the CPU created by a hypervisor on the host<br>    maxvcpus                       连接 vcpu 最大值<br>    node-memory-tune               获取或者设定节点内存参数<br>    nodecpumap                     节点 cpu 映射<br>    nodecpustats                   输出节点的 cpu 状统计数据。<br>    nodeinfo                       节点信息<br>    nodememstats                   输出节点的内存状统计数据。<br>    nodesuspend                    在给定时间段挂起主机节点<br>    sysinfo                        输出 hypervisor sysinfo<br>    uri                            打印管理程序典型的URI<br>    version                        显示版本</p><p> Interface (help keyword ‘interface’):<br>    iface-begin                    生成当前接口设置快照，可在今后用于提交 (iface-commit) 或者恢复 (iface-rollback)<br>    iface-bridge                   生成桥接设备并为其附加一个现有网络设备<br>    iface-commit                   提交 iface-begin 后的更改并释放恢复点<br>    iface-define                   define an inactive persistent physical host interface or modify an existing persistent one from an XML file<br>    iface-destroy                  删除物理主机接口（启用它请执行 “if-down”）<br>    iface-dumpxml                  XML 中的接口信息<br>    iface-edit                     为物理主机界面编辑 XML 配置<br>    iface-list                     物理主机接口列表<br>    iface-mac                      将接口名称转换为接口 MAC 地址<br>    iface-name                     将接口 MAC 地址转换为接口名称<br>    iface-rollback                 恢复到之前保存的使用 iface-begin 生成的更改<br>    iface-start                    启动物理主机接口（启用它请执行 “if-up”）<br>    iface-unbridge                 分离其辅助设备后取消定义桥接设备<br>    iface-undefine                 取消定义物理主机接口（从配置中删除）</p><p> Network Filter (help keyword ‘filter’):<br>    nwfilter-define                使用 XML 文件定义或者更新网络过滤器<br>    nwfilter-dumpxml               XML 中的网络过滤器信息<br>    nwfilter-edit                  为网络过滤器编辑 XML 配置<br>    nwfilter-list                  列出网络过滤器<br>    nwfilter-undefine              取消定义网络过滤器<br>    nwfilter-binding-create        create a network filter binding from an XML file<br>    nwfilter-binding-delete        delete a network filter binding<br>    nwfilter-binding-dumpxml       XML 中的网络过滤器信息<br>    nwfilter-binding-list          list network filter bindings</p><p> Networking (help keyword ‘network’):<br>    net-autostart                  自动开始网络<br>    net-create                     从一个 XML 文件创建一个网络<br>    net-define                     define an inactive persistent virtual network or modify an existing persistent one from an XML file<br>    net-destroy                    销毁（停止）网络<br>    net-dhcp-leases                print lease info for a given network<br>    net-dumpxml                    XML 中的网络信息<br>    net-edit                       为网络编辑 XML 配置<br>    net-event                      Network Events<br>    net-info                       网络信息<br>    net-list                       列出网络<br>    net-name                       把一个网络UUID 转换为网络名<br>    net-start                      开始一个(以前定义的)不活跃的网络<br>    net-undefine                   undefine a persistent network<br>    net-update                     更新现有网络配置的部分<br>    net-uuid                       把一个网络名转换为网络UUID</p><p> Node Device (help keyword ‘nodedev’):<br>    nodedev-create                 根据节点中的 XML 文件定义生成设备<br>    nodedev-destroy                销毁（停止）节点中的设备<br>    nodedev-detach                 将节点设备与其设备驱动程序分离<br>    nodedev-dumpxml                XML 中的节点设备详情<br>    nodedev-list                   这台主机中中的枚举设备<br>    nodedev-reattach               重新将节点设备附加到他的设备驱动程序中<br>    nodedev-reset                  重置节点设备<br>    nodedev-event                  Node Device Events</p><p> Secret (help keyword ‘secret’):<br>    secret-define                  定义或者修改 XML 中的 secret<br>    secret-dumpxml                 XML 中的 secret 属性<br>    secret-event                   Secret Events<br>    secret-get-value               secret 值输出<br>    secret-list                    列出 secret<br>    secret-set-value               设定 secret 值<br>    secret-undefine                取消定义 secret</p><p> Snapshot (help keyword ‘snapshot’):<br>    snapshot-create                使用 XML 生成快照<br>    snapshot-create-as             使用一组参数生成快照<br>    snapshot-current               获取或者设定当前快照<br>    snapshot-delete                删除域快照<br>    snapshot-dumpxml               为域快照转储 XML<br>    snapshot-edit                  编辑快照 XML<br>    snapshot-info                  快照信息<br>    snapshot-list                  为域列出快照<br>    snapshot-parent                获取快照的上级快照名称<br>    snapshot-revert                将域转换为快照</p><p> Storage Pool (help keyword ‘pool’):<br>    find-storage-pool-sources-as   找到潜在存储池源<br>    find-storage-pool-sources      发现潜在存储池源<br>    pool-autostart                 自动启动某个池<br>    pool-build                     建立池<br>    pool-create-as                 从一组变量中创建一个池<br>    pool-create                    从一个 XML 文件中创建一个池<br>    pool-define-as                 在一组变量中定义池<br>    pool-define                    define an inactive persistent storage pool or modify an existing persistent one from an XML file<br>    pool-delete                    删除池<br>    pool-destroy                   销毁（删除）池<br>    pool-dumpxml                   XML 中的池信息<br>    pool-edit                      为存储池编辑 XML 配置<br>    pool-info                      存储池信息<br>    pool-list                      列出池<br>    pool-name                      将池 UUID 转换为池名称<br>    pool-refresh                   刷新池<br>    pool-start                     启动一个（以前定义的）非活跃的池<br>    pool-undefine                  取消定义一个不活跃的池<br>    pool-uuid                      把一个池名称转换为池 UUID<br>    pool-event                     Storage Pool Events</p><p> Storage Volume (help keyword ‘volume’):<br>    vol-clone                      克隆卷。<br>    vol-create-as                  从一组变量中创建卷<br>    vol-create                     从一个 XML 文件创建一个卷<br>    vol-create-from                生成卷，使用另一个卷作为输入。<br>    vol-delete                     删除卷<br>    vol-download                   将卷内容下载到文件中<br>    vol-dumpxml                    XML 中的卷信息<br>    vol-info                       存储卷信息<br>    vol-key                        为给定密钥或者路径返回卷密钥<br>    vol-list                       列出卷<br>    vol-name                       为给定密钥或者路径返回卷名<br>    vol-path                       为给定密钥或者路径返回卷路径<br>    vol-pool                       为给定密钥或者路径返回存储池<br>    vol-resize                     创新定义卷大小<br>    vol-upload                     将文件内容上传到卷中<br>    vol-wipe                       擦除卷</p><p> Virsh itself (help keyword ‘virsh’):<br>    cd                             更改当前目录<br>    echo                           echo 参数<br>    exit                           退出这个非交互式终端<br>    help                           打印帮助<br>    pwd                            输出当前目录<br>    quit                           退出这个非交互式终端<br>    connect                        连接（重新连接）到 hypervisor</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kvm</tag>
      
      <tag>kvm管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cent os的KVM虚拟化部署</title>
    <link href="/post/17784/"/>
    <url>/post/17784/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>给linux基础比较弱的童鞋和我写的一篇基础教程</p><p>前言引述一下什么是<a href="https://zhuanlan.zhihu.com/p/139429116">云计算</a></p><p><strong>相关：虚拟机下cent os开启<a href="https://blog.csdn.net/trackle400/article/details/52755571">ssh</a></strong></p><h1 id="什么是虚拟化"><a href="#什么是虚拟化" class="headerlink" title="什么是虚拟化"></a>什么是虚拟化</h1><p><strong>kernel-based virtual machine</strong>（基于内核的虚拟机）</p><p>虚拟化，是指通过虚拟化技术将一台计算机虚拟为多台逻辑计算机。在一台计算机上同时运行多个逻辑计算机，每个逻辑计算机可运行不同的操作系统，并且应用程序都可以在相互独立的空间内运行而互不影响，从而显著提高计算机的工作效率。</p><p> 虚拟化使用软件的方法重新定义划分IT资源，可以实现IT资源的动态分配、灵活调度、跨域共享，提高IT资源利用率，使IT资源能够真正成为社会基础设施，服务于各行各业中灵活多变的应用需求。</p><h1 id="虚拟化分类"><a href="#虚拟化分类" class="headerlink" title="虚拟化分类"></a>虚拟化分类</h1><p> <strong>1. 完全虚拟化</strong></p><p> 最流行的虚拟化方法，使用Hypervisor这种中间层软件，在虚拟服务器和底层硬件之间建立一个抽象层。</p><p> Hypervisor可以捕获CPU指令，为指令访问硬件控制器和外设充当中介。因而，完全虚拟化技术几乎能让任何一款操作系统不用改动就能安装到虚拟服务器上，而它们不知道自己运行在虚拟化环境下。主要缺点是，性能方面不如裸机，因为Hypervisor需要占用一些资源，给处理器带来开销。</p><p> 在完全虚拟化的环境下，Hypervisor运行在裸硬件上，充当主机操作系统，而由Hypervisor管理的虚拟服务器运行客户端操作系统(Guest OS)。</p><p><img src="/post/17784/1620.jpeg"></p><p> <strong>2. 准虚拟化</strong></p><p> 完全虚拟化是处理器密集型技术，因为它要求Hypervisor管理各个虚拟服务器，并让它们彼此独立。减轻这种负担的一种方法就是，改动客户操作系统，让它以为自己运行在虚拟环境下，能够与Hypervisor协同工作，这种方法就叫准虚拟化。</p><p> 准虚拟化技术的优点是性能高。经过准虚拟化处理的服务器可与Hypervisor协同工作，其响应能力几乎不亚于未经过虚拟化处理的服务器。它的客户操作系统(Guest OS)集成了虚拟化方面的代码。该方法无需重新编译或引起陷阱，因为操作系统自身能够与虚拟进程进行很好的协作。</p><p><img src="/post/17784/1620-16495658614981.jpeg"></p><p> <strong>3. 操作系统层虚拟化</strong></p><p> 实现虚拟化还有一个方法，那就是在操作系统层面增添虚拟服务器功能。就操作系统层的虚拟化而言，没有独立的Hypervisor层。相反主机操作系统本身就负责在多个虚拟服务器之间分配硬件资源，并且让这些服务器彼此独立。一个明显的区别是，如果使用操作系统层虚拟化，所有虚拟服务器必须运行同一操作系统。</p><p> 虽然操作系统层虚拟化的灵活性比较差，但本机速度性能比较高。此外，由于架构在所有虚拟服务器上使用单一、标准的操作系统，管理起来比异构环境要容易。</p><p> <strong>4. 桌面虚拟</strong></p><p> 服务器虚拟化主要针对服务器而言，而虚拟化最接近用户的还是要算的上桌面虚拟化了，桌面虚拟化主要功能是将分散的桌面环境集中保存并管理起来，包括桌面环境的集中下发，集中更新，集中管理。桌面虚拟化使得桌面管理变得简单，不用每台终端单独进行维护，每台终端进行更新。终端数据可以集中存储在中心机房里，安全性相对传统桌面应用要高很多。桌面虚拟化可以使得一个人拥有多个桌面环境，也可以把一个桌面环境供多人使用，节省了license。另外，桌面虚拟化依托于服务器虚拟化。没有服务器虚拟化，这个桌面虚拟化的优势将完全没有了。不仅如此，还浪费了许多管理资本。</p><p> <strong>5. 硬件虚拟化</strong></p><p> 英特尔虚拟化技术(IVT，Intel Virtualization Technology)是由英特尔开发的一种虚拟化技术，利用IVT可以对在系统上的客操作系统，通过虚拟机查看器(VMM，Virtual Machine Monitor)来虚拟一套硬件设备，以供客操作系统使用。这些技术以往在VMware与Virtual PC上都通过软件实现，而通过IVT的硬件支持可以加速此类软件的进行。</p><p> AMD虚拟化(AMD Virtualization)，缩写为“AMD-V”，是AMD为64位的x86架构提供的虚拟化扩展的名称，但有时仍然会用“Pacifica”(AMD开发这项扩展时的内部项目代码)来指代它。</p><h2 id="各类型虚拟化的区别"><a href="#各类型虚拟化的区别" class="headerlink" title="各类型虚拟化的区别"></a>各类型虚拟化的区别</h2><p>典型的代表有：Xen，KVM，WMware，Hyper-V、Docker容器等。</p><p> Xen是开源免费的虚拟化软件;WMware是付费的虚拟化软件;Hyper-V微软的收费虚拟化技术;Docker是一种容器技术，属于一种轻量级虚拟化技术。</p><p> <strong>1. KVM(Kernel-based Virtual Machine)基于内核的虚拟</strong></p><p> KVM是集成到Linux内核的Hypervisor，是X86架构且硬件支持虚拟化技术(Intel VT或AMD-V)的Linux的全虚拟化解决方案。它是Linux的一个很小的模块，利用Linux做大量的事，如任务调度、内存管理与硬件设备交互等。</p><p> <strong>2. Xen</strong></p><p> Xen是第一类运行在裸机上的虚拟化管理程序(Hypervisor)。它支持全虚拟化和准虚拟化，Xen支持hypervisor和虚拟机互相通讯，而且提供在所有Linux版本上的免费产品，包括Red Hat Enterprise Linux和SUSE Linux Enterprise Server。</p><p> Xen最重要的优势在于准虚拟化，此外未经修改的操作系统也可以直接在Xen上运行(如Windows)，能让虚拟机有效运行而不需要仿真，因此虚拟机能感知到Hypervisor，而不需要模拟虚拟硬件，从而能实现高性能。</p><h1 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h1><h3 id="一些名词解释"><a href="#一些名词解释" class="headerlink" title="一些名词解释"></a>一些名词解释</h3><ul><li><p>libvirt作用：虚拟化的管理软件</p></li><li><p>libvirt : kvm.xen.qemu.lxc</p></li><li><p>virt virt-install virt-clone    作用：虚拟机的安装工具和克隆工具</p></li><li><p>qemu-kvm qemu-img （qcow2.raw）作用，管理虚拟化的虚拟磁盘</p></li></ul><hr><p>安装vmware，创建cent os虚拟机，这里不赘述了，这个就太基础了，不值得说，不会可以百度。</p><p><strong>vmware环境配置要求：</strong></p><ol><li>虚拟机分配内存4g以上 </li><li>vmware开启虚拟化</li><li>开启ssh</li></ol><p>​    <strong>相关：虚拟机下cent os开启<a href="https://blog.csdn.net/trackle400/article/details/52755571">ssh</a></strong></p><p><strong>xshell连接虚拟机</strong>：ssh软件怎么使用不用教了吧？</p><p><strong>劫持yum源（这一步也可以不做，只是速度会慢一点）</strong></p><p>xshell菜单栏&gt;&gt;&gt;查看&gt;&gt;&gt;快速命令&gt;&gt;&gt;右侧勾选快速命令栏</p><p>在下方弹出的窗口双击（不同版本可能有区别），在新弹出的窗口键入标签名，在字串输入框键入命令</p><p><img src="/post/17784/image-20220409191320899.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>参考命令，视你的交换机决定前置IP地址，保存，点击，回车。<br>echo <span class="hljs-string">&#x27;192.168.37.127 mirrors.aliyun.com&#x27;</span> &gt;&gt;<span class="hljs-regexp">/etc/</span>hosts<br></code></pre></td></tr></table></figure><p>然后替换阿里云yum源，也可以保存为快速命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -o <span class="hljs-regexp">/etc/yum</span>.repos.d<span class="hljs-regexp">/CentOS-Base.repo https:/</span><span class="hljs-regexp">/mirrors.aliyun.com/</span>repo/Centos-<span class="hljs-number">7</span>.repo<br></code></pre></td></tr></table></figure><h2 id="安装kvm虚拟化管理工具"><a href="#安装kvm虚拟化管理工具" class="headerlink" title="安装kvm虚拟化管理工具"></a><strong>安装kvm虚拟化管理工具</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">yum install libvirt virt-install qemu-kvm -y<br></code></pre></td></tr></table></figure><p><strong>ftp push一个cent 7的包到虚拟机作为kvm虚拟机的镜像包</strong>，我没有配置ftp，直wget下载，或者也可以按照这里<a href="https://www.jianshu.com/p/2cc9f4ca5bce">配置ftp</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>先检查有没有安装wget<br>yum list installed | grep wget<br><span class="hljs-regexp">//</span>没有的话输入以下命令安装<br>yum install wget<br><br><span class="hljs-regexp">//</span>然后wget下载链接到指定目录<br>参考命令 wget http:<span class="hljs-regexp">//mi</span>rrors.njupt.edu.cn<span class="hljs-regexp">/centos/</span><span class="hljs-number">7.9</span>.<span class="hljs-number">2009</span><span class="hljs-regexp">/isos/</span>x86_64<span class="hljs-regexp">/CentOS-7-x86_64-Minimal-2009.iso /</span>opt/cdrom<br></code></pre></td></tr></table></figure><h2 id="启动libvirt的命令"><a href="#启动libvirt的命令" class="headerlink" title="启动libvirt的命令"></a><strong>启动libvirt的命令</strong></h2><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl start libvirtd.service<br><span class="hljs-params">system</span>ctl status libvirtd.service<br></code></pre></td></tr></table></figure><h2 id="创建虚拟机的命令"><a href="#创建虚拟机的命令" class="headerlink" title="创建虚拟机的命令"></a><strong>创建虚拟机的命令</strong></h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">virt-install <span class="hljs-params">--virt-type</span> kvm <span class="hljs-params">--os-type=linux</span> <span class="hljs-params">--os-variant</span> rhel7 <span class="hljs-params">--name</span> centos7 <span class="hljs-params">--memory</span> 1024 <span class="hljs-params">--vcpus</span> 1 <span class="hljs-params">--disk</span> <span class="hljs-string">/opt/centos_kvm.raw</span>,format=raw,size=10 <span class="hljs-params">--cdrom</span> <span class="hljs-string">/opt/CentOS-7-x86_64-Minimal-2009.iso</span> <span class="hljs-params">--network</span> network=default <span class="hljs-params">--graphics</span> vnc,listen=0.0.0.0 <span class="hljs-params">--noautoconsole</span><br></code></pre></td></tr></table></figure><p>嗯，这里我出了一个的错误：ERROR    主机不支持 任意虚拟化选项 </p><p><strong>我重新装了一下虚拟化环境，提示没有可用软件包 qemu-kym-y。</strong>这里各位童鞋抄代码的时候一定注意不要写错了啊。</p><h2 id="virt命令的参数详解"><a href="#virt命令的参数详解" class="headerlink" title="virt命令的参数详解"></a>virt命令的参数详解</h2><p>–virt-type kvm                                                                    虚拟化的类型 （xen kvm或qemu为默认）</p><p>–os-type=linux                                                                   系统类型</p><p>–OS-variant rhel7                                                              系统版本</p><p>–name centos7                                                                  虚拟机名字</p><p>–memory 1024                                                                  虚拟机的内存</p><p>–vcpus 1                                                                             虚拟机cpu的核心数</p><p>–disk /opt/centos2.raw,format=raw size:10                虚拟机硬盘保存名和类型(qcow2或raw)与位置，格式化保存的类型 硬盘空间（单位G） </p><p>–cdrom /opt/centos-7-X86_64-11-1-08150.iso            虚拟机镜像的位置</p><p>–network network=default                                             默认使用NAT</p><p>–graphics vnc,listen=0.0.0.0                                           显示类型，需要监听的地址4个0为全网段监听</p><p>–noautoconsole                                                                不知道什么意思，无影响，英文字面是不自动控制</p><p>continue&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</p><ul><li>引述一下vnc viewer</li></ul><p>VNC是一款很实用的可以实现远程桌面控制的小工具，VNC Viewer软件可以帮助用户从其他的计算机或者移动设备上通过 Internet查看或者完全控制你的计算机。VNC是跨平台的，它能够在不同类型的计算机上交互操作，还支持Java客户端，如果没有安装指定的客户端也可以成功进行vpc的访问。</p><p>这里有的童鞋可以先去下载一个vnc viewer用于创建虚拟机后的操作</p><p>使用vnc连接虚拟机ip，默认回车就可以，出现图形就代表成功了</p><p><img src="/post/17784/image-20220409230547131.png"></p><ul><li>继续，修改系统挂载分区项（仅供参考，我虚拟机装在了机械硬盘，所以关闭swap分区），点由我配置分区，点击完成后弹出窗口选择标准分区，在下面点击加号，挂载点选择根/，点击添加挂载点，完成</li></ul><p><img src="/post/17784/image-20220409235901064.png"></p><p><strong>kdump</strong></p><p><img src="/post/17784/image-20220410000502823.png"></p><p>看文字描述，笔记本内存小，我把它关了</p><p><strong>网卡</strong></p><p><img src="/post/17784/image-20220410000600937.png"></p><p>打开开机自启</p><p>然后最小化安装，注意一下时区等配置就行了，点击开始安装，配置root密码等待安装完成</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kvm</tag>
      
      <tag>kvm部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>给你的网站启用SSL</title>
    <link href="/post/1899/"/>
    <url>/post/1899/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本站是采用的github page和hexo框架搭建，考虑到git受到的特殊关照，时不时就得抽风无法访问，所以是使用的<strong>cloudflare</strong>提供的免费cdn服务，虽然速度慢了点，但为了保证服务的稳定性，选择牺牲了速度（也考虑经济性），什么？你问我问什么不用国内的cdn服务？嗯嗯嗯，钱！而且国内站点的<strong>备案</strong>大家都知道有多麻烦，综合选择下，这就是我最后的决定，当然后期还是应该上typecho等博客系统，这是后话了。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>这是hexo的<a href="https://github.com/hexojs/hexo">github链接</a>，可以看到它是依赖node.js、git的，所以我们先去安装这两个，安装没什么好说的，默认。</p><p>git的操作就是配置用户和仓库目录，这里我也仅仅会简单的用法，如果跟我一样不太熟练的话，其实可以下载github的桌面版使用</p><p>这里贴一下hexo的安装</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="language-bash">这里你自己决定找一个目录，安装hexo软件包</span><br>npm install hexo-cli -g<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="language-bash">配置你的blog所在的子目录和站点名,这里可以配置多个</span><br>hexo init blog<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="language-bash">。。。</span><br>cd blog<br><br></code></pre></td></tr></table></figure><p>然后是一些简单使用命令，这里先进入blog所在的目录，之后点击地址栏，输入cmd，或者直接在cmd打开所在目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="language-bash">启用服务</span><br>hexo s<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="language-bash">编译生成</span><br>hexo g<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="language-bash">删除生成文件</span><br>hexo clean<br></code></pre></td></tr></table></figure><p>这是官方的<a href="https://hexo.io/zh-cn/docs/">文档</a>，可以帮助更了解一些基本使用配置。</p><h2 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h2><ol><li><p>把你的域名解析记录改成cloudflare的</p></li><li><p>添加域名成功后，就可以使用cloudflare的cdn作缓存了，这里也可以配置ssl的启用方式，实际上如果是使用宝塔搭建wordpress站点可以直接用上面let’s encrypt的证书服务且自动续签，还有多层嵌套使用cdn防止攻击，当然我这里都是静态资源，没什么好防的。</p></li><li><p>git上新建公开一个以你的用户名为前缀的仓库，后缀加上 .github.io</p></li><li><p>在设置》page设置你的域名，解析成功</p><p><strong>end</strong></p><p>使用你的域名进行访问，</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>web site</category>
      
    </categories>
    
    
    <tags>
      
      <tag>http</tag>
      
      <tag>ssl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dead line for me</title>
    <link href="/post/37826/"/>
    <url>/post/37826/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="6f7d9cf2ca4f8b0429bf7b5bf462226380978ee08b4b0283d071f3e1a728929f"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>My Mind</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Private</tag>
      
      <tag>My War</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux （cent os）常用命令及宝塔部署</title>
    <link href="/post/19294/"/>
    <url>/post/19294/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>整理一些Linux的常用命令方便一些小白使用（我）</p><p>没有的一些命令或者缺失参数可以点击链接跳转菜鸟教程查看：<a href="https://www.runoob.com/linux/linux-command-manual.html">https://www.runoob.com/linux/linux-command-manual.html</a></p><h2 id="1-ls-—-List"><a href="#1-ls-—-List" class="headerlink" title="1. ls — List"></a>1. ls — List</h2><p>ls会列举出当前工作目录的内容（文件或文件夹）。</p><h2 id="2-mkdir-—-Make-Directory"><a href="#2-mkdir-—-Make-Directory" class="headerlink" title="2.mkdir — Make Directory"></a>2.mkdir — Make Directory</h2><p>mkdir 用于新建一个新目录</p><h2 id="3-pwd-—-Print-Working-Directory"><a href="#3-pwd-—-Print-Working-Directory" class="headerlink" title="3.pwd — Print Working Directory"></a>3.pwd — Print Working Directory</h2><p>显示当前工作目录</p><h2 id="4-cd-—-Change-Directory"><a href="#4-cd-—-Change-Directory" class="headerlink" title="4.cd — Change Directory"></a>4.cd — Change Directory</h2><p>切换文件路径，cd 将给定的文件夹（或目录）设置成当前工作目录。</p><h2 id="5-rmdir—-Remove-Directory（系统调优命令-cd-root-amp-amp-rm-rf-）-lt-—括号里的不要信！！！"><a href="#5-rmdir—-Remove-Directory（系统调优命令-cd-root-amp-amp-rm-rf-）-lt-—括号里的不要信！！！" class="headerlink" title="5.rmdir— Remove Directory（系统调优命令 cd root &amp;&amp; rm -rf /* ）&lt;—括号里的不要信！！！"></a>5.rmdir— Remove Directory（<del>系统调优命令 cd root &amp;&amp; rm -rf /*</del> ）&lt;—括号里的不要信！！！</h2><p>删除给定的目录</p><h2 id="6-rm—-Remove"><a href="#6-rm—-Remove" class="headerlink" title="6. rm— Remove"></a>6. rm— Remove</h2><p>rm 会删除给定的文件</p><h2 id="7-cp—-Copy"><a href="#7-cp—-Copy" class="headerlink" title="7. cp— Copy"></a>7. cp— Copy</h2><p>cp 命令对文件进行复制</p><h2 id="8-mv—-Move"><a href="#8-mv—-Move" class="headerlink" title="8. mv— Move"></a>8. mv— Move</h2><p>mv 命令对文件或文件夹进行移动，如果文件或文件夹存在于当前工作目录，还可以对文件或文件夹进行重命名。</p><h2 id="9-cat—-concatenate-and-print-files"><a href="#9-cat—-concatenate-and-print-files" class="headerlink" title="9. cat— concatenate and print files"></a>9. cat— concatenate and print files</h2><p>cat 用于在标准输出（监控器或屏幕）上查看文件内容</p><h2 id="10-tail-—-print-TAIL-from-last"><a href="#10-tail-—-print-TAIL-from-last" class="headerlink" title="10. tail — print TAIL(from last)"></a>10. tail — print TAIL(from last)</h2><p>ail 默认在标准输出上显示给定文件的最后10行内容，可以使用tail -n N 指定在标准输出上显示文件的最后N行内容</p><h2 id="11-less-—-print-LESS"><a href="#11-less-—-print-LESS" class="headerlink" title="11.less — print LESS"></a>11.less — print LESS</h2><p>less 按页或按窗口打印文件内容。在查看包含大量文本数据的大文件时是非常有用和高效的。你可以使用Ctrl+F向前翻页，Ctrl+B向后翻页。</p><h2 id="12-grep"><a href="#12-grep" class="headerlink" title="12.grep"></a>12.grep</h2><p>grep 在给定的文件中搜寻指定的字符串。grep -i “” 在搜寻时会忽略字符串的大小写，而grep -r “” 则会在当前工作目录的文件中递归搜寻指定的字符串。</p><h2 id="13-find"><a href="#13-find" class="headerlink" title="13.find"></a>13.find</h2><p>这个命令会在给定位置搜寻与条件匹配的文件。你可以使用find -name 的-name选项来进行区分大小写的搜寻，find -iname 来进行不区分大小写的搜寻。</p><h2 id="14-tar"><a href="#14-tar" class="headerlink" title="14.tar"></a>14.tar</h2><p>tar命令能创建、查看和提取tar压缩文件。tar -cvf 是创建对应压缩文件，tar -tvf 来查看对应压缩文件，tar -xvf 来提取对应压缩文件。</p><h2 id="15-gzip"><a href="#15-gzip" class="headerlink" title="15. gzip"></a>15. gzip</h2><p>gzip 命令创建和提取gzip压缩文件，还可以用gzip -d 来提取压缩文件。</p><h2 id="16-unzip"><a href="#16-unzip" class="headerlink" title="16. unzip"></a>16. unzip</h2><p>unzip 对gzip文档进行解压。在解压之前，可以使用unzip -l 命令查看文件内容。</p><h2 id="17-help"><a href="#17-help" class="headerlink" title="17.help"></a>17.help</h2><p>help会在终端列出所有可用的命令,可以使用任何命令的-h或-help选项来查看该命令的具体用法。图就省略啦，会有详细列表显示出来的。</p><h2 id="18-whatis-—-What-is-this-command"><a href="#18-whatis-—-What-is-this-command" class="headerlink" title="18.whatis — What is this command"></a>18.whatis — What is this command</h2><p>whatis 会用单行来描述给定的命令，就是解释当前命令。</p><h2 id="19-exit"><a href="#19-exit" class="headerlink" title="19.exit"></a>19.exit</h2><p>exit用于结束当前的终端会话。</p><h2 id="20-ping"><a href="#20-ping" class="headerlink" title="20.ping"></a>20.ping</h2><p>ping 通过发送数据包ping远程主机(服务器)，常用与检测网络连接和服务器状态。</p><h2 id="21-who-—-Who-Is-logged-in"><a href="#21-who-—-Who-Is-logged-in" class="headerlink" title="21.who — Who Is logged in"></a>21.who — Who Is logged in</h2><p>who能列出当前登录的用户名。</p><h2 id="22-su-—-Switch-User"><a href="#22-su-—-Switch-User" class="headerlink" title="22.su — Switch User"></a>22.su — Switch User</h2><p>su 用于切换不同的用户。即使没有使用密码，超级用户也能切换到其它用户。</p><h2 id="23-uname"><a href="#23-uname" class="headerlink" title="23.uname"></a>23.uname</h2><p>uname会显示出关于系统的重要信息，如内核名称、主机名、内核版本、处理机类型等等，使用uname -a可以查看所有信息。</p><h2 id="24-df-—-Disk-space-Free"><a href="#24-df-—-Disk-space-Free" class="headerlink" title="24.df — Disk space Free"></a>24.df — Disk space Free</h2><p>df查看文件系统中磁盘的使用情况–硬盘已用和可用的存储空间以及其它存储设备。你可以使用df -h将结果以人类可读的方式显示。</p><h2 id="25-ps-—-ProcesseS"><a href="#25-ps-—-ProcesseS" class="headerlink" title="25.ps — ProcesseS"></a>25.ps — ProcesseS</h2><p>ps显示系统的运行进程。</p><h2 id="26-top-—-Top-processes"><a href="#26-top-—-Top-processes" class="headerlink" title="26.top — Top processes"></a>26.top — Top processes</h2><p>top命令会默认按照CPU的占用情况，显示占用量较大的进程,可以使用top -u 查看某个用户的CPU使用排名情况。</p><h2 id="27-shutdown"><a href="#27-shutdown" class="headerlink" title="27. shutdown"></a>27. shutdown</h2><p>shutdown用于关闭计算机，而shutdown -r用于重启计算机。</p><h2 id="28-ifconfig"><a href="#28-ifconfig" class="headerlink" title="28.ifconfig"></a><strong>28.ifconfig</strong></h2><p>显示网卡信息，查看ip地址等</p><h2 id="29-apt"><a href="#29-apt" class="headerlink" title="29.apt"></a>29.apt</h2><p>apt（Advanced Packaging Tool）是一个在 Debian 和 Ubuntu 中的 Shell 前端软件包管理器。在cent中用的是yum</p><p>可使用的参数有update 、upgrade、install 、uninstall等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs linux">apt [options] [command] [package ...]<br></code></pre></td></tr></table></figure><ul><li><strong>options：</strong>可选，选项包括 -h（帮助），-y（当安装过程提示选择全部为”yes”），-q（不显示安装的过程）等等。</li><li><strong>command：</strong>要进行的操作。</li><li><strong>package</strong>：安装的包名。</li></ul><h2 id="30-sudo"><a href="#30-sudo" class="headerlink" title="30.sudo"></a>30.sudo</h2><p>Linux sudo命令以系统管理者的身份执行指令，也就是说，经由 sudo 所执行的指令就好像是 root 亲自执行。</p><p>使用权限：在 /etc/sudoers 中有出现的使用者。</p><p>例如安装某些软件包时提示没有权限可以使用sudo命令进行安装</p><hr><h1 id="宝塔面板安装"><a href="#宝塔面板安装" class="headerlink" title="宝塔面板安装"></a>宝塔面板安装</h1><p>功能简介：宝塔Linux面板是提升运维效率的服务器管理软件，支持一键LAMP/LNMP/集群/监控/网站/FTP/数据库/JAVA等100多项服务器管理功能。<br>有30个人的专业团队研发及维护，经过200多个版本的迭代，功能全，少出错且足够安全，已获得全球百万用户认可安装。</p><p>宝塔的官方配置要求</p><p><strong>安装要求：</strong></p><p>内存：512M以上，推荐768M以上（纯面板约占系统60M内存）</p><p>硬盘：300M以上可用硬盘空间（纯面板约占20M磁盘空间）</p><p>系统：CentOS 7.1+ (Ubuntu16.04+.、Debian9.0+)，<strong>确保是干净的操作系统，</strong>没有安装过其它环境带的Apache/Nginx/php/MySQL/pgsql/gitlab/java<strong>（已有环境不可安装）</strong></p><p>架构：x86_64（主流服务器均是此架构），ARM不完整兼容（面板环境安装慢，部分软件可能安装不上）</p><p>安装前请先进行update！</p><h2 id="cent-os："><a href="#cent-os：" class="headerlink" title="cent os："></a>cent os：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh<br></code></pre></td></tr></table></figure><h2 id="Ubuntu-Deepin安装命令："><a href="#Ubuntu-Deepin安装命令：" class="headerlink" title="Ubuntu/Deepin安装命令："></a>Ubuntu/Deepin安装命令：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>（Parker）Actually, not all people can receive their past.</title>
    <link href="/post/4434/"/>
    <url>/post/4434/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="0a997fc1bea27e52e1ad57e2c1b6cf4e354aebdcd9f6a494c8e8fef9ecf515ff">fd8d1bf829fa52bdbab6091ca2743008d5f39dd7f181b164c120e0a02513072a340b83c41d8452a9ad703ca4dcacada86d604bde2dd1b35476eb4e4e0cc27847e659166620161694538c10a0a0793827e7acc9e0844460ca6ae3a36eec31ee35ce6c5dfce7f88efb22dfbc708191c648ae8e760552855553adf97d9fc31b9680ab1a315edba8c6d37da25fc55a294f4ff9a15b72ba0e2ecd5b878a4421063ad2f9c1d2e96e31706ded786b1db8dec05d4b7da754dfd94e10a1c251caa664dcf01e1357c0f3efc25f2ca7c43c8a3a334b5ad339d2bd7b0e53fad5b88f6e339c5405a4c7a0a576ec1f47e505a20298be0207f28d04b70176a3362ae49f90abb52d2343c6e4dc4b6f4bd8be2acb015ddb97c32576a3ecd6b68f77cfae0400b7e59471e7b2498da3dd290eb8a99d260e50d512b57cc4ba702c05edd5ebbf3ec8ae4fca697d33b63b780e02262e70723fb80b6fc7dc0fe98e7b5bbed46e56618749f52ca52d843f9b375b2126f2db5e3f80935db2921328d47438a9b5374478c272132c9a44ccefceafe2a9dc1b8947601b7bf0d973ee206b40e2663f8f3a67d0d4cf3fc5e0622545e6c176bd9b979d2dbd3292f5bad15d336477fb80d55e51ab70689f1550eb345707da3e4f663d8203c07653397a9a88ea6f661a98d142a7e06e5e17bc1569c34a791ed466bb187a88996f4b9a59c02af9fa33035a0d2740032825afd396e478991ae24a68dd9ea73b79ccc626ae5da2e358ea83a5d74a6cfc479ee6402c833c6f00fc4dc2f946475fc1c6b8f4835c06dde5aa85e7f457ef66e4fc7be5cac10ff408792cb51c629bf050492e3f08c6376f8e739828a31a3b18d148fce5709b5a1a6c6c4387c30c6b78006c5ae5450ab18143366362f9ef0044742b0ee63de011f35105eb31c378e77eb91c9a19c7c7056ecc875aa49b1a56f04bebb1704364ed3c0c47d5c499b43ee9e2f5bef99b1903e72480bc884d3d2d945c7dcc674035ff565bce9bdd66a75a9b5017cdb4fee745ac1b090e2a564d7c0a204c5ca1d9b611be70dd64c36e7baefa99b962ce8d9f1ea4e4c0a043cfff09075b6a8632ec76e032cf9ec631236d3bb80ad91e25de215fe8319a4a0e5a0cb36b9665a0fc7744814e2d4c6d17e69ebced8df05c5eefea9e28b63df348e173da08679b969d827e14f071e7283dac0515737af3ac92d245d5f8cf69f59e8c7d9579f9984f46670786a79f594a99b55b13aa5ecb1b0fe61de961ef580f2a7287dde46125cfed96d7fde0901639174ec62d1294b9e7ab7c529885e294ca120087c1315d935312e7acd7731c5fea6ecba1d55328c488dc6c12d6f958eef9b85fbab9340d08622c48a77c8562ccf0ab5fa69fbbeb24dce1c83b08cf898ed97c0225dac3f227c84eb053155ddbc059e1b58bce3ce94dee9b2870f7b3d3aeebab32468a73e9c29f1d0041777681daab39b314b8ed1a698415ddee64af5b4f85347311687002e6398b15c860da1faa40d5b5c1186f0012a68c6e11e47496a727a3b62f5ea2573ba8f4568a06f0ff8bbffd8ea1ea6f476520cc9d66fd894e01a4784feb0e3b476ae840e00c952eb545f23affb6064bd818c2f93aacb67f25c141dc133bc099f9441406810b8e44fcdd2465d40f54ea8d3509718e8f69585296a1122fa4afc3fa0b9897268f9316f3200a13f2636df889324c994afd6ab17fcddf176994fe555d4e41dedc1ebd2f52374879bf3ea6b87d114b599ef26aeb9414bf0b8803b7fa1c9f116c217265a35ebf665e40fed986c5d8c437175f17504d8633e16b6ccffdb365fd32dd52323d19963587166efa017d3099f023d64ee257faf911118bbb01a9cfb3e982d9029c90adece97693035f4a97a14433764cdacbc91bda7cca679c9391f888a6f33f729f8a57104d791bf49b5266de6fcf1efea8271a7ab521c0ee72104ae773b54f8d265676e45e603596d6decc81baea7fad97cb727aa15e6202c3e039fd650e66602e0d6c92a86817fb91e14962a7cbd5892263bb7a0c5c0a4d6443443d8529f9d34ef5dc526bedaf9a62ec6a159925c4161211279f64e95ee9555bc9dff2a942d1a34678ab8c92056c8bf3c9f48d410eeb579f05b06831f7bc0eea3c935a02969b4c35cebed1a8957bda4f7c76e99beda1d365f274091f3b85be8ca22d62c61208790409100004900f1bd0d1dc417d284933cc1e6aa6fd192ed33c58c4fc68a5d262de1915dd3c9a5abd8cad58672adf915c8a10467e85ae3958c44eb3c4475c9c02e4fec4fbe7513579981f5c49c3c4b656bd190e6a34c1c8df7add17198e556900d753cb256c1b6d40334b4527d45b020e91cb791d56f755678b919f23e2c83f3ae43a2785a6f8e571dfe9d8d4ed229af4fb635da6dd601132f55bcaac7960812de4055ce2b8cdd00a9299c9c8f51f5195b83cce1bc7268fe17856e76ecd7fe4d156b06eb6b8af67871e7fde69d501c8005d9f801596f6dad59435f9daf54ea764fd2b8d1e6dfa8a245e691a10cfa2078872cf982d167313fb1e2bc96fd2d8c952f20469cc65b7e7e32785c6d704bf82c8a17a2e20a37bdd0a387620a3b0e511b8414e7c7fb7d87133b3b7a247fd3b08ac1e58dcd607e98a3b246702afcf1ffaf31d38ede9b7b12cb5b52ee40cb7a1e550170afd4c73042b5fc0576b5a1bb75a2c50b296db1dcce592b89b590bd99e891e2097531d2dbb40d4339f93a820d707af2a43786eb4291010cce887c615a3dff43d3ec6792821e1149ad3a399657c3e4b54eb48811b6a8d6ef87f054e205eb40f45014b3c7b73236bf4c72a8a6dcfc9f1c7da6a14d857e79935e8122322911d0a6e8e1caa2119b674d59f42fbc55c9c0e3eafba47a3f0c7fa19e8820c187a6e25fe5be78c9e4804ec0922f3467929c6916441655da69c397ce63705e68c605c7f84ea05b0f2465d24d35c8220e5ee248a86b37ea1c565398cbeea39bfc1bf81765e056c5d6f3fe3d3d38c799cf21d5239ad7e06d3c7c920c07183cc765204aa3c972c424ef185199f8eca28ed35c3911ac6248ac572cfbb09c59e55801448001ce0bc1a5e5df268626ee956192a06fad54eab52c275b8a52ec0d7ce019f3147a3402f5249b573af04134a83cb020fe992c776fc853339e7b2a228f9beb65cdad7597e479ef39b8646e02a94da7d2a39b0aab48e8600701af9416c1b919825a1faee1cc20881946031b3e0d5edd97040f100a29935eb66dd5a51dba29b487da760e99e1e39daa723d2924a9899f677dc5ac7abc5e6023a5ee8d77a789e9cae5ee2369335c4ffce9dddb0ecf1bcb894cca3675d6dd560f8260d8c0264c131621727136566e76ca2647fdcd1d392804d3e569711103b53c9beca23ccc2bdffa6f43378009771d6d6d5f63ffa11d5d5d90fc55bd859b72fae5f77d68ea7c95cd4b0940e4d3edbbf97051601a79ff9e52b2df50938b5c7c7f7d39e8a30e8f9892e307596f79dad10bc564ea9c9c0bcaed769d030356cd7890269c6fdd0b60f2f9bb5b5013915bbcb27205912bfdaa4b5e0c4c20d99580b2a4deeffd9ffba8181c06dec1588402e7b7da01f4eb16adfd862a81dabfca790e61461b5d8d8d2df806d6da0574fc9a9b58ad5e15365281e7db8e57478f576a620d05a63eee8253687c3c715b915212296db6a1df01e7c00c0b056eeab4a2eff7cdc3ed885d42026b22017df7b05e39ceaa6e4481c9f9f60c77c91307e8f7e3d82ce56fff5977aa80c6f50eb39d0b3eb12e17f91ba801332d62579a145c0948b33fc8da8cb853e8ae1dc75ff42046f3dc93748cce8fce0e1124da8ed1130487c645f0e4812acc27794ced7bc21d95a29af49804a61867e479f5825c2fa76160130101047933cca63d7ed14c0a6930f8e9b415c18131c6c91f088b5f320d4391c37aba295a7dfe0c637c1dded32a7ba12b7e65fd622bdfe8713c1cad6cd2540a062b534ae3f8eb0edf0fa0876e5654af088a39d04e149bd003c330178b9c2322084eb7ab70d4b8e99bb78a64e1ac7f33cbf43edfffc4e264b15a54ba84c2fe3c76bcffe9778</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>My Mind</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Private</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
